// Bootstrap the program:
@256
D=A
@SP
M=D
// call Sys.init:
@$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
($ret.1)
// funciton Sys.init:
(Sys.init)
// C_PUSH constant 4000:
@4000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 5000:
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.main:
@Sys.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.main
0;JMP
(Sys.init$ret.2)
// C_POP temp 1:
@6
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label LOOP:
(Sys.init$LOOP)
// goto LOOP:
@Sys.init$LOOP
0;JMP
// funciton Sys.main:
(Sys.main)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4001:
@4001
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 5001:
@5001
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 200:
@200
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 40:
@40
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 123:
@123
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.add12:
@Sys.main$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.add12
0;JMP
(Sys.main$ret.3)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return Sys.main:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Sys.add12:
(Sys.add12)
// C_PUSH constant 4002:
@4002
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 5002:
@5002
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return Sys.add12:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
