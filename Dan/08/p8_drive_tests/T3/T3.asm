// Bootstrap the program:
@256
D=A
@SP
M=D
// call Sys.init:
@$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
($ret.1)
// funciton Main.T3:
(Main.T3)
// call Main.t1:
@Main.T3$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.t1
0;JMP
(Main.T3$ret.2)
// call Main.t2:
@Main.T3$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.t2
0;JMP
(Main.T3$ret.3)
// call Main.t3:
@Main.T3$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.t3
0;JMP
(Main.T3$ret.4)
// call Main.t4:
@Main.T3$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.t4
0;JMP
(Main.T3$ret.5)
// label WHILE:
(Main.T3$WHILE)
// goto WHILE:
@Main.T3$WHILE
0;JMP
// return Main.T3:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Main.t1:
(Main.t1)
// C_PUSH constant 32767:
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 32767:
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE1
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE1
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL1
D;JLT
@R15
M=0
@END_BOOL1
0;JMP
(X_NEGATIVE_Y_POSITIVE1)
@R15
M=-1
@END_BOOL1
0;JMP
(Y_NEGATIVE1)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE1
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL1
0;JMP
(X_AND_Y_NEGATIVE1)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL1
D;JLT
@R15
M=0
@END_BOOL1
0;JMP
(END_BOOL1)
@R15
D=M
@SP
A=M-1
M=D
// return Main.t1:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Main.t2:
(Main.t2)
// C_PUSH constant 32767:
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32767:
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE2
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE2
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL2
D;JGT
@R15
M=0
@END_BOOL2
0;JMP
(X_NEGATIVE_Y_POSITIVE2)
@R15
M=0
@END_BOOL2
0;JMP
(Y_NEGATIVE2)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE2
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL2
0;JMP
(X_AND_Y_NEGATIVE2)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL2
D;JGT
@R15
M=0
@END_BOOL2
0;JMP
(END_BOOL2)
@R15
D=M
@SP
A=M-1
M=D
// return Main.t2:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Main.t3:
(Main.t3)
// C_PUSH constant 20000:
@20000
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 30000:
@30000
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE3
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE3
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL3
D;JGT
@R15
M=0
@END_BOOL3
0;JMP
(X_NEGATIVE_Y_POSITIVE3)
@R15
M=0
@END_BOOL3
0;JMP
(Y_NEGATIVE3)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE3
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL3
0;JMP
(X_AND_Y_NEGATIVE3)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL3
D;JGT
@R15
M=0
@END_BOOL3
0;JMP
(END_BOOL3)
@R15
D=M
@SP
A=M-1
M=D
// return Main.t3:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Main.t4:
(Main.t4)
// C_PUSH constant 20000:
@20000
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30000:
@30000
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE4
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE4
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL4
D;JGT
@R15
M=0
@END_BOOL4
0;JMP
(X_NEGATIVE_Y_POSITIVE4)
@R15
M=0
@END_BOOL4
0;JMP
(Y_NEGATIVE4)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE4
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL4
0;JMP
(X_AND_Y_NEGATIVE4)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL4
D;JGT
@R15
M=0
@END_BOOL4
0;JMP
(END_BOOL4)
@R15
D=M
@SP
A=M-1
M=D
// return Main.t4:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Sys.init:
(Sys.init)
// call Main.T3:
@Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.T3
0;JMP
(Sys.init$ret.1)
// label WHILE:
(Sys.init$WHILE)
// goto WHILE:
@Sys.init$WHILE
0;JMP
