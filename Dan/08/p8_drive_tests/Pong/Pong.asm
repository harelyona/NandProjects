@256
D=A
@SP
M=D
// call Sys.init:
@$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
($ret.1)
// funciton Array.new:
(Array.new)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE1
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE1
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL1
D;JGT
@R15
M=0
@END_BOOL1
0;JMP
(X_NEGATIVE_Y_POSITIVE1)
@R15
M=0
@END_BOOL1
0;JMP
(Y_NEGATIVE1)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE1
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL1
0;JMP
(X_AND_Y_NEGATIVE1)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL1
D;JGT
@R15
M=0
@END_BOOL1
0;JMP
(END_BOOL1)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Array.new$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Array.new$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Array.new$IF_TRUE0)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Array.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Array.new$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Array.new$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc:
@Array.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Array.new$ret.3)
// return Array.new:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Array.dispose:
(Array.dispose)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc:
@Array.dispose$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Array.dispose$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Array.dispose:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Ball.new:
(Ball.new)
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc:
@Ball.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Ball.new$ret.1)
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 10:
@THIS
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 11:
@THIS
D=M
@11
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 12:
@THIS
D=M
@12
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 5:
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 13:
@THIS
D=M
@13
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 14:
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Ball.show:
@Ball.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.show
0;JMP
(Ball.new$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Ball.new:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Ball.dispose:
(Ball.dispose)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc:
@Ball.dispose$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Ball.dispose$ret.3)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Ball.dispose:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Ball.show:
(Ball.show)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor:
@Ball.show$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Ball.show$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Ball.draw:
@Ball.show$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.draw
0;JMP
(Ball.show$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Ball.show:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Ball.hide:
(Ball.hide)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.setColor:
@Ball.hide$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Ball.hide$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Ball.draw:
@Ball.hide$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.draw
0;JMP
(Ball.hide$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Ball.hide:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Ball.draw:
(Ball.draw)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle:
@Ball.draw$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Ball.draw$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Ball.draw:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Ball.getLeft:
(Ball.getLeft)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Ball.getLeft:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Ball.getRight:
(Ball.getRight)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return Ball.getRight:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Ball.setDestination:
(Ball.setDestination)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 3:
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs:
@Ball.setDestination$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Ball.setDestination$ret.9)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs:
@Ball.setDestination$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Ball.setDestination$ret.10)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE2
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE2
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL2
D;JLT
@R15
M=0
@END_BOOL2
0;JMP
(X_NEGATIVE_Y_POSITIVE2)
@R15
M=-1
@END_BOOL2
0;JMP
(Y_NEGATIVE2)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE2
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL2
0;JMP
(X_AND_Y_NEGATIVE2)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL2
D;JLT
@R15
M=0
@END_BOOL2
0;JMP
(END_BOOL2)
@R15
D=M
@SP
A=M-1
M=D
// C_POP this 7:
@THIS
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 7:
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Ball.setDestination$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Ball.setDestination$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Ball.setDestination$IF_TRUE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE3
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE3
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL3
D;JLT
@R15
M=0
@END_BOOL3
0;JMP
(X_NEGATIVE_Y_POSITIVE3)
@R15
M=-1
@END_BOOL3
0;JMP
(Y_NEGATIVE3)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE3
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL3
0;JMP
(X_AND_Y_NEGATIVE3)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL3
D;JLT
@R15
M=0
@END_BOOL3
0;JMP
(END_BOOL3)
@R15
D=M
@SP
A=M-1
M=D
// C_POP this 8:
@THIS
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE4
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE4
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL4
D;JLT
@R15
M=0
@END_BOOL4
0;JMP
(X_NEGATIVE_Y_POSITIVE4)
@R15
M=-1
@END_BOOL4
0;JMP
(Y_NEGATIVE4)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE4
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL4
0;JMP
(X_AND_Y_NEGATIVE4)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL4
D;JLT
@R15
M=0
@END_BOOL4
0;JMP
(END_BOOL4)
@R15
D=M
@SP
A=M-1
M=D
// C_POP this 9:
@THIS
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Ball.setDestination$IF_END0
0;JMP
// label IF_FALSE0:
(Ball.setDestination$IF_FALSE0)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE5
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE5
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL5
D;JLT
@R15
M=0
@END_BOOL5
0;JMP
(X_NEGATIVE_Y_POSITIVE5)
@R15
M=-1
@END_BOOL5
0;JMP
(Y_NEGATIVE5)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE5
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL5
0;JMP
(X_AND_Y_NEGATIVE5)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL5
D;JLT
@R15
M=0
@END_BOOL5
0;JMP
(END_BOOL5)
@R15
D=M
@SP
A=M-1
M=D
// C_POP this 8:
@THIS
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE6
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE6
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL6
D;JLT
@R15
M=0
@END_BOOL6
0;JMP
(X_NEGATIVE_Y_POSITIVE6)
@R15
M=-1
@END_BOOL6
0;JMP
(Y_NEGATIVE6)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE6
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL6
0;JMP
(X_AND_Y_NEGATIVE6)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL6
D;JLT
@R15
M=0
@END_BOOL6
0;JMP
(END_BOOL6)
@R15
D=M
@SP
A=M-1
M=D
// C_POP this 9:
@THIS
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Ball.setDestination$IF_END0)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Ball.setDestination$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.setDestination$ret.11)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 4:
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Ball.setDestination$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.setDestination$ret.12)
// C_POP this 5:
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.multiply:
@Ball.setDestination$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.setDestination$ret.13)
// C_POP this 6:
@THIS
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Ball.setDestination:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Ball.move:
(Ball.move)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Ball.hide:
@Ball.move$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.hide
0;JMP
(Ball.move$ret.14)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 4:
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE7
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE7
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL7
D;JLT
@R15
M=0
@END_BOOL7
0;JMP
(X_NEGATIVE_Y_POSITIVE7)
@R15
M=-1
@END_BOOL7
0;JMP
(Y_NEGATIVE7)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE7
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL7
0;JMP
(X_AND_Y_NEGATIVE7)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL7
D;JLT
@R15
M=0
@END_BOOL7
0;JMP
(END_BOOL7)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Ball.move$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Ball.move$IF_TRUE0)
// C_PUSH this 4:
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 4:
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Ball.move$IF_END0
0;JMP
// label IF_FALSE0:
(Ball.move$IF_FALSE0)
// C_PUSH this 4:
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 4:
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 9:
@THIS
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Ball.move$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Ball.move$IF_TRUE1)
// C_PUSH this 7:
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Ball.move$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Ball.move$IF_TRUE2)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END2:
@Ball.move$IF_END2
0;JMP
// label IF_FALSE2:
(Ball.move$IF_FALSE2)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END2:
(Ball.move$IF_END2)
// goto IF_END1:
@Ball.move$IF_END1
0;JMP
// label IF_FALSE1:
(Ball.move$IF_FALSE1)
// C_PUSH this 7:
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Ball.move$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Ball.move$IF_TRUE3)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3:
@Ball.move$IF_END3
0;JMP
// label IF_FALSE3:
(Ball.move$IF_FALSE3)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END3:
(Ball.move$IF_END3)
// label IF_END1:
(Ball.move$IF_END1)
// label IF_END0:
(Ball.move$IF_END0)
// C_PUSH this 8:
@THIS
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@Ball.move$IF_FALSE4
0;JMP
// label IF_TRUE4:
(Ball.move$IF_TRUE4)
// C_PUSH this 7:
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE5:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE5
D;JNE
// goto IF_FALSE5:
@Ball.move$IF_FALSE5
0;JMP
// label IF_TRUE5:
(Ball.move$IF_TRUE5)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END5:
@Ball.move$IF_END5
0;JMP
// label IF_FALSE5:
(Ball.move$IF_FALSE5)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END5:
(Ball.move$IF_END5)
// goto IF_END4:
@Ball.move$IF_END4
0;JMP
// label IF_FALSE4:
(Ball.move$IF_FALSE4)
// C_PUSH this 7:
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE6:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE6
D;JNE
// goto IF_FALSE6:
@Ball.move$IF_FALSE6
0;JMP
// label IF_TRUE6:
(Ball.move$IF_TRUE6)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END6:
@Ball.move$IF_END6
0;JMP
// label IF_FALSE6:
(Ball.move$IF_FALSE6)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END6:
(Ball.move$IF_END6)
// label IF_END4:
(Ball.move$IF_END4)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 10:
@THIS
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE8
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE8
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL8
D;JGT
@R15
M=0
@END_BOOL8
0;JMP
(X_NEGATIVE_Y_POSITIVE8)
@R15
M=0
@END_BOOL8
0;JMP
(Y_NEGATIVE8)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE8
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL8
0;JMP
(X_AND_Y_NEGATIVE8)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL8
D;JGT
@R15
M=0
@END_BOOL8
0;JMP
(END_BOOL8)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE7:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE7
D;JNE
// goto IF_FALSE7:
@Ball.move$IF_FALSE7
0;JMP
// label IF_TRUE7:
(Ball.move$IF_TRUE7)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 14:
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 10:
@THIS
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE7:
(Ball.move$IF_FALSE7)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 11:
@THIS
D=M
@11
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE9
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE9
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL9
D;JLT
@R15
M=0
@END_BOOL9
0;JMP
(X_NEGATIVE_Y_POSITIVE9)
@R15
M=-1
@END_BOOL9
0;JMP
(Y_NEGATIVE9)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE9
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL9
0;JMP
(X_AND_Y_NEGATIVE9)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL9
D;JLT
@R15
M=0
@END_BOOL9
0;JMP
(END_BOOL9)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE8:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE8
D;JNE
// goto IF_FALSE8:
@Ball.move$IF_FALSE8
0;JMP
// label IF_TRUE8:
(Ball.move$IF_TRUE8)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 14:
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 11:
@THIS
D=M
@11
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE8:
(Ball.move$IF_FALSE8)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 12:
@THIS
D=M
@12
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE10
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE10
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL10
D;JGT
@R15
M=0
@END_BOOL10
0;JMP
(X_NEGATIVE_Y_POSITIVE10)
@R15
M=0
@END_BOOL10
0;JMP
(Y_NEGATIVE10)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE10
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL10
0;JMP
(X_AND_Y_NEGATIVE10)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL10
D;JGT
@R15
M=0
@END_BOOL10
0;JMP
(END_BOOL10)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE9:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE9
D;JNE
// goto IF_FALSE9:
@Ball.move$IF_FALSE9
0;JMP
// label IF_TRUE9:
(Ball.move$IF_TRUE9)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 14:
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 12:
@THIS
D=M
@12
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE9:
(Ball.move$IF_FALSE9)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 13:
@THIS
D=M
@13
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE11
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE11
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL11
D;JLT
@R15
M=0
@END_BOOL11
0;JMP
(X_NEGATIVE_Y_POSITIVE11)
@R15
M=-1
@END_BOOL11
0;JMP
(Y_NEGATIVE11)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE11
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL11
0;JMP
(X_AND_Y_NEGATIVE11)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL11
D;JLT
@R15
M=0
@END_BOOL11
0;JMP
(END_BOOL11)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE10:
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE10
D;JNE
// goto IF_FALSE10:
@Ball.move$IF_FALSE10
0;JMP
// label IF_TRUE10:
(Ball.move$IF_TRUE10)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 14:
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 13:
@THIS
D=M
@13
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE10:
(Ball.move$IF_FALSE10)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Ball.show:
@Ball.move$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.show
0;JMP
(Ball.move$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 14:
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Ball.move:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Ball.bounce:
(Ball.bounce)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Ball.bounce$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.16)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Ball.bounce$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.17)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL12
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL12)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Ball.bounce$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Ball.bounce$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Ball.bounce$IF_TRUE0)
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Ball.bounce$IF_END0
0;JMP
// label IF_FALSE0:
(Ball.bounce$IF_FALSE0)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE13
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE13
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL13
D;JLT
@R15
M=0
@END_BOOL13
0;JMP
(X_NEGATIVE_Y_POSITIVE13)
@R15
M=-1
@END_BOOL13
0;JMP
(Y_NEGATIVE13)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE13
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL13
0;JMP
(X_AND_Y_NEGATIVE13)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL13
D;JLT
@R15
M=0
@END_BOOL13
0;JMP
(END_BOOL13)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL14
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL14)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE15
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE15
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL15
D;JLT
@R15
M=0
@END_BOOL15
0;JMP
(X_NEGATIVE_Y_POSITIVE15)
@R15
M=-1
@END_BOOL15
0;JMP
(Y_NEGATIVE15)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE15
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL15
0;JMP
(X_AND_Y_NEGATIVE15)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL15
D;JLT
@R15
M=0
@END_BOOL15
0;JMP
(END_BOOL15)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL16
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL16)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Ball.bounce$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Ball.bounce$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Ball.bounce$IF_TRUE1)
// C_PUSH constant 20:
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Ball.bounce$IF_END1
0;JMP
// label IF_FALSE1:
(Ball.bounce$IF_FALSE1)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Ball.bounce$IF_END1)
// label IF_END0:
(Ball.bounce$IF_END0)
// C_PUSH this 14:
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL17
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL17)
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Ball.bounce$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Ball.bounce$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Ball.bounce$IF_TRUE2)
// C_PUSH constant 506:
@506
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 50:
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Math.multiply:
@Ball.bounce$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.18)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Ball.bounce$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.19)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Ball.bounce$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.20)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END2:
@Ball.bounce$IF_END2
0;JMP
// label IF_FALSE2:
(Ball.bounce$IF_FALSE2)
// C_PUSH this 14:
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL18
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL18)
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Ball.bounce$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Ball.bounce$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Ball.bounce$IF_TRUE3)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 50:
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Ball.bounce$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.21)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Ball.bounce$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.22)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Ball.bounce$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.23)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3:
@Ball.bounce$IF_END3
0;JMP
// label IF_FALSE3:
(Ball.bounce$IF_FALSE3)
// C_PUSH this 14:
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL19
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL19)
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@Ball.bounce$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@Ball.bounce$IF_FALSE4
0;JMP
// label IF_TRUE4:
(Ball.bounce$IF_TRUE4)
// C_PUSH constant 250:
@250
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 25:
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Math.multiply:
@Ball.bounce$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.24)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Ball.bounce$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.25)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Ball.bounce$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.26)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END4:
@Ball.bounce$IF_END4
0;JMP
// label IF_FALSE4:
(Ball.bounce$IF_FALSE4)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 25:
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Ball.bounce$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.27)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Ball.bounce$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.28)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Ball.bounce$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.29)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END4:
(Ball.bounce$IF_END4)
// label IF_END3:
(Ball.bounce$IF_END3)
// label IF_END2:
(Ball.bounce$IF_END2)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Ball.setDestination:
@Ball.bounce$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.setDestination
0;JMP
(Ball.bounce$ret.30)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Ball.bounce:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.new:
(Bat.new)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc:
@Bat.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Bat.new$ret.1)
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 3:
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 4:
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.show:
@Bat.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.show
0;JMP
(Bat.new$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Bat.new:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.allign:
(Bat.allign)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Bat.allign:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.dispose:
(Bat.dispose)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc:
@Bat.dispose$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Bat.dispose$ret.3)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Bat.dispose:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.show:
(Bat.show)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor:
@Bat.show$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.show$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.draw:
@Bat.show$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.draw
0;JMP
(Bat.show$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Bat.show:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.hide:
(Bat.hide)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.setColor:
@Bat.hide$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.hide$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.draw:
@Bat.hide$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.draw
0;JMP
(Bat.hide$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Bat.hide:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.draw:
(Bat.draw)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle:
@Bat.draw$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Bat.draw$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Bat.draw:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.setDirection:
(Bat.setDirection)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 4:
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Bat.setDirection:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.getLeft:
(Bat.getLeft)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Bat.getLeft:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.getRight:
(Bat.getRight)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return Bat.getRight:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.setWidth:
(Bat.setWidth)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.hide:
@Bat.setWidth$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.hide
0;JMP
(Bat.setWidth$ret.9)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.show:
@Bat.setWidth$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.show
0;JMP
(Bat.setWidth$ret.10)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Bat.setWidth:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Bat.move:
(Bat.move)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 4:
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL20
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL20)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Bat.move$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Bat.move$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Bat.move$IF_TRUE0)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE21
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE21
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL21
D;JLT
@R15
M=0
@END_BOOL21
0;JMP
(X_NEGATIVE_Y_POSITIVE21)
@R15
M=-1
@END_BOOL21
0;JMP
(Y_NEGATIVE21)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE21
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL21
0;JMP
(X_AND_Y_NEGATIVE21)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL21
D;JLT
@R15
M=0
@END_BOOL21
0;JMP
(END_BOOL21)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Bat.move$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Bat.move$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Bat.move$IF_TRUE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Bat.move$IF_FALSE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.setColor:
@Bat.move$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.move$ret.11)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle:
@Bat.move$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Bat.move$ret.12)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor:
@Bat.move$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.move$ret.13)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle:
@Bat.move$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Bat.move$ret.14)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Bat.move$IF_END0
0;JMP
// label IF_FALSE0:
(Bat.move$IF_FALSE0)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE22
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE22
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL22
D;JGT
@R15
M=0
@END_BOOL22
0;JMP
(X_NEGATIVE_Y_POSITIVE22)
@R15
M=0
@END_BOOL22
0;JMP
(Y_NEGATIVE22)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE22
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL22
0;JMP
(X_AND_Y_NEGATIVE22)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL22
D;JGT
@R15
M=0
@END_BOOL22
0;JMP
(END_BOOL22)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Bat.move$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Bat.move$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Bat.move$IF_TRUE2)
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Bat.move$IF_FALSE2)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.setColor:
@Bat.move$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.move$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle:
@Bat.move$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Bat.move$ret.16)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor:
@Bat.move$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.move$ret.17)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle:
@Bat.move$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Bat.move$ret.18)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Bat.move$IF_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Bat.move:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.new:
(Board.new)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc:
@Board.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Board.new$ret.1)
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Board.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 1:
@Board.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Board.new:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.dispose:
(Board.dispose)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc:
@Board.dispose$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Board.dispose$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.dispose:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.draw:
(Board.draw)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor:
@Board.draw$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.draw$ret.3)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle:
@Board.draw$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Board.draw$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.draw:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.erase:
(Board.erase)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.setColor:
@Board.erase$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.erase$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle:
@Board.erase$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Board.erase$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.erase:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.setX:
(Board.setX)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.setX:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.setY:
(Board.setY)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.setY:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.move:
(Board.move)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.erase:
@Board.move$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.erase
0;JMP
(Board.move$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL23
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL23)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.move$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.move$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.move$IF_TRUE0)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE24
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE24
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL24
D;JGT
@R15
M=0
@END_BOOL24
0;JMP
(X_NEGATIVE_Y_POSITIVE24)
@R15
M=0
@END_BOOL24
0;JMP
(Y_NEGATIVE24)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE24
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL24
0;JMP
(X_AND_Y_NEGATIVE24)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL24
D;JGT
@R15
M=0
@END_BOOL24
0;JMP
(END_BOOL24)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Board.move$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Board.move$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Board.move$IF_TRUE1)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Board.move$IF_FALSE1)
// label IF_FALSE0:
(Board.move$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL25
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL25)
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Board.move$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Board.move$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Board.move$IF_TRUE2)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 209:
@209
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE26
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE26
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL26
D;JLT
@R15
M=0
@END_BOOL26
0;JMP
(X_NEGATIVE_Y_POSITIVE26)
@R15
M=-1
@END_BOOL26
0;JMP
(Y_NEGATIVE26)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE26
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL26
0;JMP
(X_AND_Y_NEGATIVE26)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL26
D;JLT
@R15
M=0
@END_BOOL26
0;JMP
(END_BOOL26)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Board.move$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Board.move$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Board.move$IF_TRUE3)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(Board.move$IF_FALSE3)
// label IF_FALSE2:
(Board.move$IF_FALSE2)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL27
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL27)
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@Board.move$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@Board.move$IF_FALSE4
0;JMP
// label IF_TRUE4:
(Board.move$IF_TRUE4)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE28
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE28
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL28
D;JGT
@R15
M=0
@END_BOOL28
0;JMP
(X_NEGATIVE_Y_POSITIVE28)
@R15
M=0
@END_BOOL28
0;JMP
(Y_NEGATIVE28)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE28
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL28
0;JMP
(X_AND_Y_NEGATIVE28)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL28
D;JGT
@R15
M=0
@END_BOOL28
0;JMP
(END_BOOL28)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE5:
@SP
AM=M-1
D=M
@Board.move$IF_TRUE5
D;JNE
// goto IF_FALSE5:
@Board.move$IF_FALSE5
0;JMP
// label IF_TRUE5:
(Board.move$IF_TRUE5)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE5:
(Board.move$IF_FALSE5)
// label IF_FALSE4:
(Board.move$IF_FALSE4)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL29
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL29)
// if goto IF_TRUE6:
@SP
AM=M-1
D=M
@Board.move$IF_TRUE6
D;JNE
// goto IF_FALSE6:
@Board.move$IF_FALSE6
0;JMP
// label IF_TRUE6:
(Board.move$IF_TRUE6)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 500:
@500
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE30
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE30
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL30
D;JLT
@R15
M=0
@END_BOOL30
0;JMP
(X_NEGATIVE_Y_POSITIVE30)
@R15
M=-1
@END_BOOL30
0;JMP
(Y_NEGATIVE30)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE30
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL30
0;JMP
(X_AND_Y_NEGATIVE30)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL30
D;JLT
@R15
M=0
@END_BOOL30
0;JMP
(END_BOOL30)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE7:
@SP
AM=M-1
D=M
@Board.move$IF_TRUE7
D;JNE
// goto IF_FALSE7:
@Board.move$IF_FALSE7
0;JMP
// label IF_TRUE7:
(Board.move$IF_TRUE7)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE7:
(Board.move$IF_FALSE7)
// label IF_FALSE6:
(Board.move$IF_FALSE6)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.draw:
@Board.move$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.draw
0;JMP
(Board.move$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.move:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.isHit:
(Board.isHit)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE31
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE31
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL31
D;JGT
@R15
M=0
@END_BOOL31
0;JMP
(X_NEGATIVE_Y_POSITIVE31)
@R15
M=0
@END_BOOL31
0;JMP
(Y_NEGATIVE31)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE31
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL31
0;JMP
(X_AND_Y_NEGATIVE31)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL31
D;JGT
@R15
M=0
@END_BOOL31
0;JMP
(END_BOOL31)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.isHit$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.isHit$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.isHit$IF_TRUE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE32
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE32
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL32
D;JLT
@R15
M=0
@END_BOOL32
0;JMP
(X_NEGATIVE_Y_POSITIVE32)
@R15
M=-1
@END_BOOL32
0;JMP
(Y_NEGATIVE32)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE32
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL32
0;JMP
(X_AND_Y_NEGATIVE32)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL32
D;JLT
@R15
M=0
@END_BOOL32
0;JMP
(END_BOOL32)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Board.isHit$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Board.isHit$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Board.isHit$IF_TRUE1)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE33
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE33
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL33
D;JGT
@R15
M=0
@END_BOOL33
0;JMP
(X_NEGATIVE_Y_POSITIVE33)
@R15
M=0
@END_BOOL33
0;JMP
(Y_NEGATIVE33)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE33
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL33
0;JMP
(X_AND_Y_NEGATIVE33)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL33
D;JGT
@R15
M=0
@END_BOOL33
0;JMP
(END_BOOL33)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Board.isHit$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Board.isHit$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Board.isHit$IF_TRUE2)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE34
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE34
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL34
D;JLT
@R15
M=0
@END_BOOL34
0;JMP
(X_NEGATIVE_Y_POSITIVE34)
@R15
M=-1
@END_BOOL34
0;JMP
(Y_NEGATIVE34)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE34
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL34
0;JMP
(X_AND_Y_NEGATIVE34)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL34
D;JLT
@R15
M=0
@END_BOOL34
0;JMP
(END_BOOL34)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Board.isHit$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Board.isHit$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Board.isHit$IF_TRUE3)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// return Board.isHit:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// label IF_FALSE3:
(Board.isHit$IF_FALSE3)
// label IF_FALSE2:
(Board.isHit$IF_FALSE2)
// label IF_FALSE1:
(Board.isHit$IF_FALSE1)
// label IF_FALSE0:
(Board.isHit$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.isHit:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Keyboard.init:
(Keyboard.init)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Keyboard.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Keyboard.keyPressed:
(Keyboard.keyPressed)
// C_PUSH constant 24576:
@24576
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.peek:
@Keyboard.keyPressed$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Keyboard.keyPressed$ret.1)
// return Keyboard.keyPressed:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Keyboard.readChar:
(Keyboard.readChar)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.printChar:
@Keyboard.readChar$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Keyboard.readChar$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL35
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL35)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE36
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE36
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL36
D;JGT
@R15
M=0
@END_BOOL36
0;JMP
(X_NEGATIVE_Y_POSITIVE36)
@R15
M=0
@END_BOOL36
0;JMP
(Y_NEGATIVE36)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE36
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL36
0;JMP
(X_AND_Y_NEGATIVE36)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL36
D;JGT
@R15
M=0
@END_BOOL36
0;JMP
(END_BOOL36)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Keyboard.readChar$WHILE_END0
D;JNE
// call Keyboard.keyPressed:
@Keyboard.readChar$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.readChar$ret.3)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE37
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE37
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL37
D;JGT
@R15
M=0
@END_BOOL37
0;JMP
(X_NEGATIVE_Y_POSITIVE37)
@R15
M=0
@END_BOOL37
0;JMP
(Y_NEGATIVE37)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE37
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL37
0;JMP
(X_AND_Y_NEGATIVE37)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL37
D;JGT
@R15
M=0
@END_BOOL37
0;JMP
(END_BOOL37)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Keyboard.readChar$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Keyboard.readChar$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Keyboard.readChar$IF_TRUE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Keyboard.readChar$IF_FALSE0)
// goto WHILE_EXP0:
@Keyboard.readChar$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Keyboard.readChar$WHILE_END0)
// call String.backSpace:
@Keyboard.readChar$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Keyboard.readChar$ret.4)
// call Output.printChar:
@Keyboard.readChar$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printChar:
@Keyboard.readChar$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Keyboard.readChar:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Keyboard.readLine:
(Keyboard.readLine)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 80:
@80
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Keyboard.readLine$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Keyboard.readLine$ret.7)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Keyboard.readLine$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Keyboard.readLine$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call String.newLine:
@Keyboard.readLine$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.newLine
0;JMP
(Keyboard.readLine$ret.9)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call String.backSpace:
@Keyboard.readLine$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Keyboard.readLine$ret.10)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Keyboard.readLine$WHILE_EXP0)
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Keyboard.readLine$WHILE_END0
D;JNE
// call Keyboard.readChar:
@Keyboard.readLine$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.readChar
0;JMP
(Keyboard.readLine$ret.11)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL38
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL38)
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Keyboard.readLine$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Keyboard.readLine$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Keyboard.readLine$IF_TRUE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL39
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL39)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Keyboard.readLine$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Keyboard.readLine$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Keyboard.readLine$IF_TRUE1)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.eraseLastChar:
@Keyboard.readLine$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.eraseLastChar
0;JMP
(Keyboard.readLine$ret.12)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Keyboard.readLine$IF_END1
0;JMP
// label IF_FALSE1:
(Keyboard.readLine$IF_FALSE1)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Keyboard.readLine$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Keyboard.readLine$ret.13)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Keyboard.readLine$IF_END1)
// label IF_FALSE0:
(Keyboard.readLine$IF_FALSE0)
// goto WHILE_EXP0:
@Keyboard.readLine$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Keyboard.readLine$WHILE_END0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Keyboard.readLine:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Keyboard.readInt:
(Keyboard.readInt)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Keyboard.readLine:
@Keyboard.readInt$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.readLine
0;JMP
(Keyboard.readInt$ret.14)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.intValue:
@Keyboard.readInt$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.intValue
0;JMP
(Keyboard.readInt$ret.15)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Keyboard.readInt$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Keyboard.readInt$ret.16)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Keyboard.readInt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Main.main:
(Main.main)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call PongGame.newInstance:
@Main.main$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.newInstance
0;JMP
(Main.main$ret.1)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call PongGame.getInstance:
@Main.main$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.getInstance
0;JMP
(Main.main$ret.2)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call PongGame.run:
@Main.main$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.run
0;JMP
(Main.main$ret.3)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call PongGame.dispose:
@Main.main$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.dispose
0;JMP
(Main.main$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Main.main:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.init:
(Math.init)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Math.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init$ret.1)
// C_POP static 1:
@Math.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Math.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init$ret.2)
// C_POP static 0:
@Math.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Math.init$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE40
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE40
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL40
D;JLT
@R15
M=0
@END_BOOL40
0;JMP
(X_NEGATIVE_Y_POSITIVE40)
@R15
M=-1
@END_BOOL40
0;JMP
(Y_NEGATIVE40)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE40
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL40
0;JMP
(X_AND_Y_NEGATIVE40)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL40
D;JLT
@R15
M=0
@END_BOOL40
0;JMP
(END_BOOL40)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Math.init$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Math.init$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Math.init$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Math.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.abs:
(Math.abs)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE41
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE41
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL41
D;JLT
@R15
M=0
@END_BOOL41
0;JMP
(X_NEGATIVE_Y_POSITIVE41)
@R15
M=-1
@END_BOOL41
0;JMP
(Y_NEGATIVE41)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE41
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL41
0;JMP
(X_AND_Y_NEGATIVE41)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL41
D;JLT
@R15
M=0
@END_BOOL41
0;JMP
(END_BOOL41)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.abs$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.abs$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.abs$IF_TRUE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.abs$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.abs:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.multiply:
(Math.multiply)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE42
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE42
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL42
D;JLT
@R15
M=0
@END_BOOL42
0;JMP
(X_NEGATIVE_Y_POSITIVE42)
@R15
M=-1
@END_BOOL42
0;JMP
(Y_NEGATIVE42)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE42
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL42
0;JMP
(X_AND_Y_NEGATIVE42)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL42
D;JLT
@R15
M=0
@END_BOOL42
0;JMP
(END_BOOL42)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE43
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE43
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL43
D;JGT
@R15
M=0
@END_BOOL43
0;JMP
(X_NEGATIVE_Y_POSITIVE43)
@R15
M=0
@END_BOOL43
0;JMP
(Y_NEGATIVE43)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE43
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL43
0;JMP
(X_AND_Y_NEGATIVE43)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL43
D;JGT
@R15
M=0
@END_BOOL43
0;JMP
(END_BOOL43)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE44
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE44
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL44
D;JGT
@R15
M=0
@END_BOOL44
0;JMP
(X_NEGATIVE_Y_POSITIVE44)
@R15
M=0
@END_BOOL44
0;JMP
(Y_NEGATIVE44)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE44
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL44
0;JMP
(X_AND_Y_NEGATIVE44)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL44
D;JGT
@R15
M=0
@END_BOOL44
0;JMP
(END_BOOL44)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE45
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE45
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL45
D;JLT
@R15
M=0
@END_BOOL45
0;JMP
(X_NEGATIVE_Y_POSITIVE45)
@R15
M=-1
@END_BOOL45
0;JMP
(Y_NEGATIVE45)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE45
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL45
0;JMP
(X_AND_Y_NEGATIVE45)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL45
D;JLT
@R15
M=0
@END_BOOL45
0;JMP
(END_BOOL45)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs:
@Math.multiply$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply$ret.3)
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs:
@Math.multiply$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply$ret.4)
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE46
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE46
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL46
D;JLT
@R15
M=0
@END_BOOL46
0;JMP
(X_NEGATIVE_Y_POSITIVE46)
@R15
M=-1
@END_BOOL46
0;JMP
(Y_NEGATIVE46)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE46
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL46
0;JMP
(X_AND_Y_NEGATIVE46)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL46
D;JLT
@R15
M=0
@END_BOOL46
0;JMP
(END_BOOL46)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.multiply$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.multiply$IF_TRUE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.multiply$IF_FALSE0)
// label WHILE_EXP0:
(Math.multiply$WHILE_EXP0)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE47
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE47
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL47
D;JLT
@R15
M=0
@END_BOOL47
0;JMP
(X_NEGATIVE_Y_POSITIVE47)
@R15
M=-1
@END_BOOL47
0;JMP
(Y_NEGATIVE47)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE47
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL47
0;JMP
(X_AND_Y_NEGATIVE47)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL47
D;JLT
@R15
M=0
@END_BOOL47
0;JMP
(END_BOOL47)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Math.multiply$WHILE_END0
D;JNE
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE48
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE48
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL48
D;JGT
@R15
M=0
@END_BOOL48
0;JMP
(X_NEGATIVE_Y_POSITIVE48)
@R15
M=0
@END_BOOL48
0;JMP
(Y_NEGATIVE48)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE48
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL48
0;JMP
(X_AND_Y_NEGATIVE48)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL48
D;JGT
@R15
M=0
@END_BOOL48
0;JMP
(END_BOOL48)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Math.multiply$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Math.multiply$IF_TRUE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Math.multiply$IF_FALSE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Math.multiply$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Math.multiply$WHILE_END0)
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Math.multiply$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Math.multiply$IF_TRUE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Math.multiply$IF_FALSE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.multiply:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.divide:
(Math.divide)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL49
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL49)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.divide$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.divide$IF_TRUE0)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Math.divide$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.divide$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.divide$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE50
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE50
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL50
D;JLT
@R15
M=0
@END_BOOL50
0;JMP
(X_NEGATIVE_Y_POSITIVE50)
@R15
M=-1
@END_BOOL50
0;JMP
(Y_NEGATIVE50)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE50
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL50
0;JMP
(X_AND_Y_NEGATIVE50)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL50
D;JLT
@R15
M=0
@END_BOOL50
0;JMP
(END_BOOL50)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE51
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE51
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL51
D;JGT
@R15
M=0
@END_BOOL51
0;JMP
(X_NEGATIVE_Y_POSITIVE51)
@R15
M=0
@END_BOOL51
0;JMP
(Y_NEGATIVE51)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE51
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL51
0;JMP
(X_AND_Y_NEGATIVE51)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL51
D;JGT
@R15
M=0
@END_BOOL51
0;JMP
(END_BOOL51)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE52
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE52
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL52
D;JGT
@R15
M=0
@END_BOOL52
0;JMP
(X_NEGATIVE_Y_POSITIVE52)
@R15
M=0
@END_BOOL52
0;JMP
(Y_NEGATIVE52)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE52
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL52
0;JMP
(X_AND_Y_NEGATIVE52)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL52
D;JGT
@R15
M=0
@END_BOOL52
0;JMP
(END_BOOL52)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE53
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE53
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL53
D;JLT
@R15
M=0
@END_BOOL53
0;JMP
(X_NEGATIVE_Y_POSITIVE53)
@R15
M=-1
@END_BOOL53
0;JMP
(Y_NEGATIVE53)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE53
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL53
0;JMP
(X_AND_Y_NEGATIVE53)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL53
D;JLT
@R15
M=0
@END_BOOL53
0;JMP
(END_BOOL53)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs:
@Math.divide$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs:
@Math.divide$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide$ret.7)
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Math.divide$WHILE_EXP0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Math.divide$WHILE_END0
D;JNE
// C_PUSH constant 32767:
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE54
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE54
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL54
D;JLT
@R15
M=0
@END_BOOL54
0;JMP
(X_NEGATIVE_Y_POSITIVE54)
@R15
M=-1
@END_BOOL54
0;JMP
(Y_NEGATIVE54)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE54
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL54
0;JMP
(X_AND_Y_NEGATIVE54)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL54
D;JLT
@R15
M=0
@END_BOOL54
0;JMP
(END_BOOL54)
@R15
D=M
@SP
A=M-1
M=D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Math.divide$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Math.divide$IF_TRUE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE55
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE55
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL55
D;JGT
@R15
M=0
@END_BOOL55
0;JMP
(X_NEGATIVE_Y_POSITIVE55)
@R15
M=0
@END_BOOL55
0;JMP
(Y_NEGATIVE55)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE55
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL55
0;JMP
(X_AND_Y_NEGATIVE55)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL55
D;JGT
@R15
M=0
@END_BOOL55
0;JMP
(END_BOOL55)
@R15
D=M
@SP
A=M-1
M=D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Math.divide$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Math.divide$IF_TRUE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Math.divide$IF_FALSE2)
// label IF_FALSE1:
(Math.divide$IF_FALSE1)
// goto WHILE_EXP0:
@Math.divide$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Math.divide$WHILE_END0)
// label WHILE_EXP1:
(Math.divide$WHILE_EXP1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE56
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE56
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL56
D;JGT
@R15
M=0
@END_BOOL56
0;JMP
(X_NEGATIVE_Y_POSITIVE56)
@R15
M=0
@END_BOOL56
0;JMP
(Y_NEGATIVE56)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE56
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL56
0;JMP
(X_AND_Y_NEGATIVE56)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL56
D;JGT
@R15
M=0
@END_BOOL56
0;JMP
(END_BOOL56)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Math.divide$WHILE_END1
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE57
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE57
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL57
D;JGT
@R15
M=0
@END_BOOL57
0;JMP
(X_NEGATIVE_Y_POSITIVE57)
@R15
M=0
@END_BOOL57
0;JMP
(Y_NEGATIVE57)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE57
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL57
0;JMP
(X_AND_Y_NEGATIVE57)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL57
D;JGT
@R15
M=0
@END_BOOL57
0;JMP
(END_BOOL57)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Math.divide$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Math.divide$IF_TRUE3)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(Math.divide$IF_FALSE3)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Math.divide$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Math.divide$WHILE_END1)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@Math.divide$IF_FALSE4
0;JMP
// label IF_TRUE4:
(Math.divide$IF_TRUE4)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE4:
(Math.divide$IF_FALSE4)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.divide:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.sqrt:
(Math.sqrt)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE58
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE58
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL58
D;JLT
@R15
M=0
@END_BOOL58
0;JMP
(X_NEGATIVE_Y_POSITIVE58)
@R15
M=-1
@END_BOOL58
0;JMP
(Y_NEGATIVE58)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE58
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL58
0;JMP
(X_AND_Y_NEGATIVE58)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL58
D;JLT
@R15
M=0
@END_BOOL58
0;JMP
(END_BOOL58)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.sqrt$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.sqrt$IF_TRUE0)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Math.sqrt$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.sqrt$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.sqrt$IF_FALSE0)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Math.sqrt$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE59
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE59
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL59
D;JGT
@R15
M=0
@END_BOOL59
0;JMP
(X_NEGATIVE_Y_POSITIVE59)
@R15
M=0
@END_BOOL59
0;JMP
(Y_NEGATIVE59)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE59
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL59
0;JMP
(X_AND_Y_NEGATIVE59)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL59
D;JGT
@R15
M=0
@END_BOOL59
0;JMP
(END_BOOL59)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Math.sqrt$WHILE_END0
D;JNE
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Math.sqrt$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.sqrt$ret.9)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE60
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE60
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL60
D;JGT
@R15
M=0
@END_BOOL60
0;JMP
(X_NEGATIVE_Y_POSITIVE60)
@R15
M=0
@END_BOOL60
0;JMP
(Y_NEGATIVE60)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE60
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL60
0;JMP
(X_AND_Y_NEGATIVE60)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL60
D;JGT
@R15
M=0
@END_BOOL60
0;JMP
(END_BOOL60)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE61
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE61
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL61
D;JLT
@R15
M=0
@END_BOOL61
0;JMP
(X_NEGATIVE_Y_POSITIVE61)
@R15
M=-1
@END_BOOL61
0;JMP
(Y_NEGATIVE61)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE61
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL61
0;JMP
(X_AND_Y_NEGATIVE61)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL61
D;JLT
@R15
M=0
@END_BOOL61
0;JMP
(END_BOOL61)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Math.sqrt$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Math.sqrt$IF_TRUE1)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Math.sqrt$IF_FALSE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Math.sqrt$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Math.sqrt$WHILE_END0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.sqrt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.max:
(Math.max)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE62
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE62
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL62
D;JGT
@R15
M=0
@END_BOOL62
0;JMP
(X_NEGATIVE_Y_POSITIVE62)
@R15
M=0
@END_BOOL62
0;JMP
(Y_NEGATIVE62)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE62
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL62
0;JMP
(X_AND_Y_NEGATIVE62)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL62
D;JGT
@R15
M=0
@END_BOOL62
0;JMP
(END_BOOL62)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.max$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.max$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.max$IF_TRUE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.max$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.max:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.min:
(Math.min)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE63
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE63
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL63
D;JLT
@R15
M=0
@END_BOOL63
0;JMP
(X_NEGATIVE_Y_POSITIVE63)
@R15
M=-1
@END_BOOL63
0;JMP
(Y_NEGATIVE63)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE63
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL63
0;JMP
(X_AND_Y_NEGATIVE63)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL63
D;JLT
@R15
M=0
@END_BOOL63
0;JMP
(END_BOOL63)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.min$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.min$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.min$IF_TRUE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.min$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.min:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Memory.init:
(Memory.init)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Memory.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2048:
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 14334:
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2049:
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2050:
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Memory.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Memory.peek:
(Memory.peek)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Memory.peek:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Memory.poke:
(Memory.poke)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Memory.poke:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Memory.alloc:
(Memory.alloc)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE64
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE64
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL64
D;JLT
@R15
M=0
@END_BOOL64
0;JMP
(X_NEGATIVE_Y_POSITIVE64)
@R15
M=-1
@END_BOOL64
0;JMP
(Y_NEGATIVE64)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE64
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL64
0;JMP
(X_AND_Y_NEGATIVE64)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL64
D;JLT
@R15
M=0
@END_BOOL64
0;JMP
(END_BOOL64)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Memory.alloc$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Memory.alloc$IF_TRUE0)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Memory.alloc$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc$ret.1)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Memory.alloc$IF_FALSE0)
// C_PUSH constant 2048:
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Memory.alloc$WHILE_EXP0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE65
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE65
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL65
D;JLT
@R15
M=0
@END_BOOL65
0;JMP
(X_NEGATIVE_Y_POSITIVE65)
@R15
M=-1
@END_BOOL65
0;JMP
(Y_NEGATIVE65)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE65
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL65
0;JMP
(X_AND_Y_NEGATIVE65)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL65
D;JLT
@R15
M=0
@END_BOOL65
0;JMP
(END_BOOL65)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Memory.alloc$WHILE_END0
D;JNE
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Memory.alloc$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Memory.alloc$WHILE_END0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16379:
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE66
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE66
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL66
D;JGT
@R15
M=0
@END_BOOL66
0;JMP
(X_NEGATIVE_Y_POSITIVE66)
@R15
M=0
@END_BOOL66
0;JMP
(Y_NEGATIVE66)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE66
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL66
0;JMP
(X_AND_Y_NEGATIVE66)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL66
D;JGT
@R15
M=0
@END_BOOL66
0;JMP
(END_BOOL66)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Memory.alloc$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Memory.alloc$IF_TRUE1)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Memory.alloc$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Memory.alloc$IF_FALSE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE67
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE67
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL67
D;JGT
@R15
M=0
@END_BOOL67
0;JMP
(X_NEGATIVE_Y_POSITIVE67)
@R15
M=0
@END_BOOL67
0;JMP
(Y_NEGATIVE67)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE67
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL67
0;JMP
(X_AND_Y_NEGATIVE67)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL67
D;JGT
@R15
M=0
@END_BOOL67
0;JMP
(END_BOOL67)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Memory.alloc$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Memory.alloc$IF_TRUE2)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL68
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL68)
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Memory.alloc$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Memory.alloc$IF_TRUE3)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3:
@Memory.alloc$IF_END3
0;JMP
// label IF_FALSE3:
(Memory.alloc$IF_FALSE3)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END3:
(Memory.alloc$IF_END3)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Memory.alloc$IF_FALSE2)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return Memory.alloc:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Memory.deAlloc:
(Memory.deAlloc)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL69
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL69)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Memory.deAlloc$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Memory.deAlloc$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Memory.deAlloc$IF_END0
0;JMP
// label IF_FALSE0:
(Memory.deAlloc$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL70
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL70)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Memory.deAlloc$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Memory.deAlloc$IF_TRUE1)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Memory.deAlloc$IF_END1
0;JMP
// label IF_FALSE1:
(Memory.deAlloc$IF_FALSE1)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Memory.deAlloc$IF_END1)
// label IF_END0:
(Memory.deAlloc$IF_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Memory.deAlloc:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.init:
(Output.init)
// C_PUSH constant 16384:
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 4:
@Output.4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Output.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Output.init$ret.1)
// C_POP static 3:
@Output.3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.initMap:
@Output.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.initMap
0;JMP
(Output.init$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.createShiftedMap:
@Output.init$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.createShiftedMap
0;JMP
(Output.init$ret.3)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.initMap:
(Output.initMap)
// C_PUSH constant 127:
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Output.initMap$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.initMap$ret.4)
// C_POP static 5:
@Output.5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 34:
@34
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 20:
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.9)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 36:
@36
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.10)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 37:
@37
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 49:
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.11)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 38:
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.12)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 39:
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.13)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 40:
@40
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.14)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 41:
@41
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 42:
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.16)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 43:
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.17)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.18)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.19)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.20)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 47:
@47
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.21)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.22)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 49:
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.23)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 50:
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.24)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.25)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 52:
@52
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 26:
@26
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 25:
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 60:
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.26)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 53:
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.27)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.28)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 55:
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 49:
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.29)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 56:
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.30)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 57:
@57
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 62:
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.31)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 58:
@58
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.32)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.33)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 60:
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.34)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 61:
@61
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.35)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 62:
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.36)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 64:
@64
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.37)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.38)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 65:
@65
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.39)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 66:
@66
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.40)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 67:
@67
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.41)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 68:
@68
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.42)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 69:
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.43)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 70:
@70
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.44)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 71:
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.45)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 72:
@72
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.46)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.47)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 74:
@74
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 60:
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.48)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 75:
@75
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.49)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 76:
@76
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.50
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.50)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 77:
@77
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.51
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.51)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 78:
@78
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 55:
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 55:
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.52
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.52)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.53
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.53)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 80:
@80
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.54
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.54)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 81:
@81
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.55
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.55)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.56
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.56)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 83:
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.57
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.57)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 84:
@84
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.58
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.58)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 85:
@85
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.59
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.59)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 86:
@86
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.60
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.60)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 87:
@87
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.61
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.61)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 88:
@88
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.62
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.62)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 89:
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.63
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.63)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 90:
@90
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 49:
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.64
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.64)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 91:
@91
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.65
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.65)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 92:
@92
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.66
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.66)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 93:
@93
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.67
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.67)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 94:
@94
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.68
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.68)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 95:
@95
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.69
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.69)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 96:
@96
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.70
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.70)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.71
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.71)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 98:
@98
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.72
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.72)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 99:
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.73
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.73)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 60:
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.74
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.74)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.75
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.75)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 38:
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.76
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.76)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 62:
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.77
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.77)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 55:
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.78
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.78)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.79
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.79)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 106:
@106
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 56:
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.80
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.80)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 107:
@107
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.81
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.81)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.82
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.82)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 29:
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 43:
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 43:
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 43:
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 43:
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.83
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.83)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 29:
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.84
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.84)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.85
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.85)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 112:
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.86
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.86)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 113:
@113
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 62:
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.87
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.87)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 29:
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 55:
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.88
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.88)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.89
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.89)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.90
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.90)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.91
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.91)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 118:
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.92
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.92)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.93
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.93)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 120:
@120
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.94
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.94)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 62:
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.95
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.95)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 122:
@122
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.96
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.96)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 123:
@123
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 56:
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 56:
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.97
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.97)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 124:
@124
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.98
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.98)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 125:
@125
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 56:
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.99
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.99)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 126:
@126
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 38:
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 25:
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.100
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.100)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.initMap:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.create:
(Output.create)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Output.create$ret.101
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.create$ret.101)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 5:
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 6:
@ARG
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 7:
@ARG
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 8:
@ARG
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 9:
@ARG
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 10:
@ARG
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 11:
@ARG
D=M
@11
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.create:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.createShiftedMap:
(Output.createShiftedMap)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 127:
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Output.createShiftedMap$ret.102
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.createShiftedMap$ret.102)
// C_POP static 6:
@Output.6
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Output.createShiftedMap$WHILE_EXP0)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 127:
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE71
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE71
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL71
D;JLT
@R15
M=0
@END_BOOL71
0;JMP
(X_NEGATIVE_Y_POSITIVE71)
@R15
M=-1
@END_BOOL71
0;JMP
(Y_NEGATIVE71)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE71
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL71
0;JMP
(X_AND_Y_NEGATIVE71)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL71
D;JLT
@R15
M=0
@END_BOOL71
0;JMP
(END_BOOL71)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Output.createShiftedMap$WHILE_END0
D;JNE
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Output.createShiftedMap$ret.103
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.createShiftedMap$ret.103)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Output.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Output.createShiftedMap$WHILE_EXP1)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE72
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE72
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL72
D;JLT
@R15
M=0
@END_BOOL72
0;JMP
(X_NEGATIVE_Y_POSITIVE72)
@R15
M=-1
@END_BOOL72
0;JMP
(Y_NEGATIVE72)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE72
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL72
0;JMP
(X_AND_Y_NEGATIVE72)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL72
D;JLT
@R15
M=0
@END_BOOL72
0;JMP
(END_BOOL72)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Output.createShiftedMap$WHILE_END1
D;JNE
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 256:
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Output.createShiftedMap$ret.104
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.createShiftedMap$ret.104)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Output.createShiftedMap$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Output.createShiftedMap$WHILE_END1)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL73
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL73)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.createShiftedMap$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.createShiftedMap$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.createShiftedMap$IF_TRUE0)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Output.createShiftedMap$IF_END0
0;JMP
// label IF_FALSE0:
(Output.createShiftedMap$IF_FALSE0)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Output.createShiftedMap$IF_END0)
// goto WHILE_EXP0:
@Output.createShiftedMap$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Output.createShiftedMap$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.createShiftedMap:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.getMap:
(Output.getMap)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE74
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE74
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL74
D;JLT
@R15
M=0
@END_BOOL74
0;JMP
(X_NEGATIVE_Y_POSITIVE74)
@R15
M=-1
@END_BOOL74
0;JMP
(Y_NEGATIVE74)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE74
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL74
0;JMP
(X_AND_Y_NEGATIVE74)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL74
D;JLT
@R15
M=0
@END_BOOL74
0;JMP
(END_BOOL74)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 126:
@126
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE75
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE75
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL75
D;JGT
@R15
M=0
@END_BOOL75
0;JMP
(X_NEGATIVE_Y_POSITIVE75)
@R15
M=0
@END_BOOL75
0;JMP
(Y_NEGATIVE75)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE75
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL75
0;JMP
(X_AND_Y_NEGATIVE75)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL75
D;JGT
@R15
M=0
@END_BOOL75
0;JMP
(END_BOOL75)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.getMap$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.getMap$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.getMap$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Output.getMap$IF_FALSE0)
// C_PUSH static 2:
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Output.getMap$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Output.getMap$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Output.getMap$IF_TRUE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Output.getMap$IF_END1
0;JMP
// label IF_FALSE1:
(Output.getMap$IF_FALSE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Output.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Output.getMap$IF_END1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Output.getMap:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.drawChar:
(Output.drawChar)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.getMap:
@Output.drawChar$ret.105
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.getMap
0;JMP
(Output.drawChar$ret.105)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Output.drawChar$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE76
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE76
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL76
D;JLT
@R15
M=0
@END_BOOL76
0;JMP
(X_NEGATIVE_Y_POSITIVE76)
@R15
M=-1
@END_BOOL76
0;JMP
(Y_NEGATIVE76)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE76
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL76
0;JMP
(X_AND_Y_NEGATIVE76)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL76
D;JLT
@R15
M=0
@END_BOOL76
0;JMP
(END_BOOL76)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Output.drawChar$WHILE_END0
D;JNE
// C_PUSH static 2:
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.drawChar$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.drawChar$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.drawChar$IF_TRUE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 4:
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 256:
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Output.drawChar$IF_END0
0;JMP
// label IF_FALSE0:
(Output.drawChar$IF_FALSE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 4:
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Output.drawChar$IF_END0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 4:
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Output.drawChar$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Output.drawChar$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.drawChar:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.moveCursor:
(Output.moveCursor)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE77
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE77
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL77
D;JLT
@R15
M=0
@END_BOOL77
0;JMP
(X_NEGATIVE_Y_POSITIVE77)
@R15
M=-1
@END_BOOL77
0;JMP
(Y_NEGATIVE77)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE77
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL77
0;JMP
(X_AND_Y_NEGATIVE77)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL77
D;JLT
@R15
M=0
@END_BOOL77
0;JMP
(END_BOOL77)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 22:
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE78
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE78
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL78
D;JGT
@R15
M=0
@END_BOOL78
0;JMP
(X_NEGATIVE_Y_POSITIVE78)
@R15
M=0
@END_BOOL78
0;JMP
(Y_NEGATIVE78)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE78
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL78
0;JMP
(X_AND_Y_NEGATIVE78)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL78
D;JGT
@R15
M=0
@END_BOOL78
0;JMP
(END_BOOL78)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE79
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE79
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL79
D;JLT
@R15
M=0
@END_BOOL79
0;JMP
(X_NEGATIVE_Y_POSITIVE79)
@R15
M=-1
@END_BOOL79
0;JMP
(Y_NEGATIVE79)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE79
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL79
0;JMP
(X_AND_Y_NEGATIVE79)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL79
D;JLT
@R15
M=0
@END_BOOL79
0;JMP
(END_BOOL79)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE80
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE80
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL80
D;JGT
@R15
M=0
@END_BOOL80
0;JMP
(X_NEGATIVE_Y_POSITIVE80)
@R15
M=0
@END_BOOL80
0;JMP
(Y_NEGATIVE80)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE80
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL80
0;JMP
(X_AND_Y_NEGATIVE80)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL80
D;JGT
@R15
M=0
@END_BOOL80
0;JMP
(END_BOOL80)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.moveCursor$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.moveCursor$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.moveCursor$IF_TRUE0)
// C_PUSH constant 20:
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Output.moveCursor$ret.106
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Output.moveCursor$ret.106)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Output.moveCursor$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Output.moveCursor$ret.107
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Output.moveCursor$ret.107)
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 352:
@352
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Output.moveCursor$ret.108
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.moveCursor$ret.108)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Output.moveCursor$ret.109
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.moveCursor$ret.109)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL81
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL81)
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.drawChar:
@Output.moveCursor$ret.110
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.moveCursor$ret.110)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.moveCursor:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.printChar:
(Output.printChar)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.newLine:
@Output.printChar$ret.111
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.newLine
0;JMP
(Output.printChar$ret.111)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL82
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL82)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.printChar$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.printChar$IF_TRUE0)
// call Output.println:
@Output.printChar$ret.112
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.printChar$ret.112)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Output.printChar$IF_END0
0;JMP
// label IF_FALSE0:
(Output.printChar$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.backSpace:
@Output.printChar$ret.113
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Output.printChar$ret.113)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL83
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL83)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Output.printChar$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Output.printChar$IF_TRUE1)
// call Output.backSpace:
@Output.printChar$ret.114
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.backSpace
0;JMP
(Output.printChar$ret.114)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Output.printChar$IF_END1
0;JMP
// label IF_FALSE1:
(Output.printChar$IF_FALSE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.drawChar:
@Output.printChar$ret.115
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.printChar$ret.115)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 2:
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Output.printChar$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Output.printChar$IF_TRUE2)
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Output.printChar$IF_FALSE2)
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL84
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL84)
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Output.printChar$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Output.printChar$IF_TRUE3)
// call Output.println:
@Output.printChar$ret.116
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.printChar$ret.116)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3:
@Output.printChar$IF_END3
0;JMP
// label IF_FALSE3:
(Output.printChar$IF_FALSE3)
// C_PUSH static 2:
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END3:
(Output.printChar$IF_END3)
// label IF_END1:
(Output.printChar$IF_END1)
// label IF_END0:
(Output.printChar$IF_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.printChar:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.printString:
(Output.printString)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.length:
@Output.printString$ret.117
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.length
0;JMP
(Output.printString$ret.117)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Output.printString$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE85
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE85
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL85
D;JLT
@R15
M=0
@END_BOOL85
0;JMP
(X_NEGATIVE_Y_POSITIVE85)
@R15
M=-1
@END_BOOL85
0;JMP
(Y_NEGATIVE85)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE85
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL85
0;JMP
(X_AND_Y_NEGATIVE85)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL85
D;JLT
@R15
M=0
@END_BOOL85
0;JMP
(END_BOOL85)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Output.printString$WHILE_END0
D;JNE
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.charAt:
@Output.printString$ret.118
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.charAt
0;JMP
(Output.printString$ret.118)
// call Output.printChar:
@Output.printString$ret.119
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Output.printString$ret.119)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Output.printString$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Output.printString$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.printString:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.printInt:
(Output.printInt)
// C_PUSH static 3:
@Output.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.setInt:
@Output.printInt$ret.120
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.setInt
0;JMP
(Output.printInt$ret.120)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 3:
@Output.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Output.printInt$ret.121
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Output.printInt$ret.121)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.printInt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.println:
(Output.println)
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 352:
@352
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 8128:
@8128
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL86
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL86)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.println$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.println$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.println$IF_TRUE0)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Output.println$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.println:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.backSpace:
(Output.backSpace)
// C_PUSH static 2:
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.backSpace$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.backSpace$IF_TRUE0)
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE87
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE87
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL87
D;JGT
@R15
M=0
@END_BOOL87
0;JMP
(X_NEGATIVE_Y_POSITIVE87)
@R15
M=0
@END_BOOL87
0;JMP
(Y_NEGATIVE87)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE87
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL87
0;JMP
(X_AND_Y_NEGATIVE87)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL87
D;JGT
@R15
M=0
@END_BOOL87
0;JMP
(END_BOOL87)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Output.backSpace$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Output.backSpace$IF_TRUE1)
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Output.backSpace$IF_END1
0;JMP
// label IF_FALSE1:
(Output.backSpace$IF_FALSE1)
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL88
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL88)
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Output.backSpace$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Output.backSpace$IF_TRUE2)
// C_PUSH constant 8128:
@8128
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Output.backSpace$IF_FALSE2)
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 321:
@321
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Output.backSpace$IF_END1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Output.backSpace$IF_END0
0;JMP
// label IF_FALSE0:
(Output.backSpace$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Output.backSpace$IF_END0)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.drawChar:
@Output.backSpace$ret.122
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.backSpace$ret.122)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.backSpace:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton PongGame.new:
(PongGame.new)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc:
@PongGame.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(PongGame.new$ret.1)
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Screen.clearScreen:
@PongGame.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.clearScreen
0;JMP
(PongGame.new$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 6:
@THIS
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 230:
@230
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 229:
@229
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Bat.new:
@PongGame.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.new
0;JMP
(PongGame.new$ret.3)
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 253:
@253
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 222:
@222
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 229:
@229
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Ball.new:
@PongGame.new$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@11
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.new
0;JMP
(PongGame.new$ret.4)
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 400:
@400
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Ball.setDestination:
@PongGame.new$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.setDestination
0;JMP
(PongGame.new$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 238:
@238
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 240:
@240
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawRectangle:
@PongGame.new$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(PongGame.new$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 22:
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.moveCursor:
@PongGame.new$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(PongGame.new$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@PongGame.new$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(PongGame.new$ret.8)
// C_PUSH constant 83:
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.new$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.9)
// C_PUSH constant 99:
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.new$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.10)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.new$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.11)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.new$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.12)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.new$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.13)
// C_PUSH constant 58:
@58
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.new$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.14)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.new$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.15)
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.new$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.16)
// call Output.printString:
@PongGame.new$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(PongGame.new$ret.17)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 3:
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 4:
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 5:
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return PongGame.new:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton PongGame.dispose:
(PongGame.dispose)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.dispose:
@PongGame.dispose$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.dispose
0;JMP
(PongGame.dispose$ret.18)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc:
@PongGame.dispose$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(PongGame.dispose$ret.19)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return PongGame.dispose:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton PongGame.newInstance:
(PongGame.newInstance)
// call PongGame.new:
@PongGame.newInstance$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.new
0;JMP
(PongGame.newInstance$ret.20)
// C_POP static 0:
@PongGame.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return PongGame.newInstance:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton PongGame.checkClearBoard:
(PongGame.checkClearBoard)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// return PongGame.checkClearBoard:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton PongGame.checkBoard:
(PongGame.checkBoard)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call PongGame.checkClearBoard:
@PongGame.checkBoard$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.checkClearBoard
0;JMP
(PongGame.checkBoard$ret.21)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return PongGame.checkBoard:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton PongGame.getInstance:
(PongGame.getInstance)
// C_PUSH static 0:
@PongGame.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// return PongGame.getInstance:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton PongGame.run:
(PongGame.run)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(PongGame.run$WHILE_EXP0)
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@PongGame.run$WHILE_END0
D;JNE
// label WHILE_EXP1:
(PongGame.run$WHILE_EXP1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL89
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL89)
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@PongGame.run$WHILE_END1
D;JNE
// call Keyboard.keyPressed:
@PongGame.run$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(PongGame.run$ret.22)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.move:
@PongGame.run$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.move
0;JMP
(PongGame.run$ret.23)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call PongGame.moveBall:
@PongGame.run$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.moveBall
0;JMP
(PongGame.run$ret.24)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@PongGame.run$WHILE_EXP1
0;JMP
// label WHILE_END1:
(PongGame.run$WHILE_END1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 130:
@130
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL90
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL90)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@PongGame.run$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@PongGame.run$IF_FALSE0
0;JMP
// label IF_TRUE0:
(PongGame.run$IF_TRUE0)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Bat.setDirection:
@PongGame.run$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setDirection
0;JMP
(PongGame.run$ret.25)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@PongGame.run$IF_END0
0;JMP
// label IF_FALSE0:
(PongGame.run$IF_FALSE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 132:
@132
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL91
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL91)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@PongGame.run$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@PongGame.run$IF_FALSE1
0;JMP
// label IF_TRUE1:
(PongGame.run$IF_TRUE1)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Bat.setDirection:
@PongGame.run$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setDirection
0;JMP
(PongGame.run$ret.26)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@PongGame.run$IF_END1
0;JMP
// label IF_FALSE1:
(PongGame.run$IF_FALSE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 140:
@140
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL92
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL92)
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@PongGame.run$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@PongGame.run$IF_FALSE2
0;JMP
// label IF_TRUE2:
(PongGame.run$IF_TRUE2)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP this 3:
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(PongGame.run$IF_FALSE2)
// label IF_END1:
(PongGame.run$IF_END1)
// label IF_END0:
(PongGame.run$IF_END0)
// label WHILE_EXP2:
(PongGame.run$WHILE_EXP2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL93
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL93)
// not
@SP
A=M-1
M=!M
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END2:
@SP
AM=M-1
D=M
@PongGame.run$WHILE_END2
D;JNE
// call Keyboard.keyPressed:
@PongGame.run$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(PongGame.run$ret.27)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.move:
@PongGame.run$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.move
0;JMP
(PongGame.run$ret.28)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call PongGame.moveBall:
@PongGame.run$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.moveBall
0;JMP
(PongGame.run$ret.29)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP2:
@PongGame.run$WHILE_EXP2
0;JMP
// label WHILE_END2:
(PongGame.run$WHILE_END2)
// goto WHILE_EXP0:
@PongGame.run$WHILE_EXP0
0;JMP
// label WHILE_END0:
(PongGame.run$WHILE_END0)
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@PongGame.run$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@PongGame.run$IF_FALSE3
0;JMP
// label IF_TRUE3:
(PongGame.run$IF_TRUE3)
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.moveCursor:
@PongGame.run$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(PongGame.run$ret.30)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@PongGame.run$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(PongGame.run$ret.31)
// C_PUSH constant 71:
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.run$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.32)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.run$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.33)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.run$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.34)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.run$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.35)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.run$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.36)
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.run$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.37)
// C_PUSH constant 118:
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.run$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.38)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.run$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.39)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@PongGame.run$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.40)
// call Output.printString:
@PongGame.run$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(PongGame.run$ret.41)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(PongGame.run$IF_FALSE3)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return PongGame.run:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton PongGame.moveBall:
(PongGame.moveBall)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Ball.move:
@PongGame.moveBall$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.move
0;JMP
(PongGame.moveBall$ret.42)
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE94
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE94
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL94
D;JGT
@R15
M=0
@END_BOOL94
0;JMP
(X_NEGATIVE_Y_POSITIVE94)
@R15
M=0
@END_BOOL94
0;JMP
(Y_NEGATIVE94)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE94
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL94
0;JMP
(X_AND_Y_NEGATIVE94)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL94
D;JGT
@R15
M=0
@END_BOOL94
0;JMP
(END_BOOL94)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL95
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL95)
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@PongGame.moveBall$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@PongGame.moveBall$IF_FALSE0
0;JMP
// label IF_TRUE0:
(PongGame.moveBall$IF_TRUE0)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 5:
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.getLeft:
@PongGame.moveBall$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.getLeft
0;JMP
(PongGame.moveBall$ret.43)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.getRight:
@PongGame.moveBall$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.getRight
0;JMP
(PongGame.moveBall$ret.44)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Ball.getLeft:
@PongGame.moveBall$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.getLeft
0;JMP
(PongGame.moveBall$ret.45)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Ball.getRight:
@PongGame.moveBall$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.getRight
0;JMP
(PongGame.moveBall$ret.46)
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL96
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL96)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@PongGame.moveBall$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@PongGame.moveBall$IF_FALSE1
0;JMP
// label IF_TRUE1:
(PongGame.moveBall$IF_TRUE1)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE97
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE97
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL97
D;JGT
@R15
M=0
@END_BOOL97
0;JMP
(X_NEGATIVE_Y_POSITIVE97)
@R15
M=0
@END_BOOL97
0;JMP
(Y_NEGATIVE97)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE97
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL97
0;JMP
(X_AND_Y_NEGATIVE97)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL97
D;JGT
@R15
M=0
@END_BOOL97
0;JMP
(END_BOOL97)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE98
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE98
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL98
D;JLT
@R15
M=0
@END_BOOL98
0;JMP
(X_NEGATIVE_Y_POSITIVE98)
@R15
M=-1
@END_BOOL98
0;JMP
(Y_NEGATIVE98)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE98
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL98
0;JMP
(X_AND_Y_NEGATIVE98)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL98
D;JLT
@R15
M=0
@END_BOOL98
0;JMP
(END_BOOL98)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_POP this 3:
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@PongGame.moveBall$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@PongGame.moveBall$IF_FALSE2
0;JMP
// label IF_TRUE2:
(PongGame.moveBall$IF_TRUE2)
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE99
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE99
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL99
D;JLT
@R15
M=0
@END_BOOL99
0;JMP
(X_NEGATIVE_Y_POSITIVE99)
@R15
M=-1
@END_BOOL99
0;JMP
(Y_NEGATIVE99)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE99
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL99
0;JMP
(X_AND_Y_NEGATIVE99)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL99
D;JLT
@R15
M=0
@END_BOOL99
0;JMP
(END_BOOL99)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@PongGame.moveBall$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@PongGame.moveBall$IF_FALSE3
0;JMP
// label IF_TRUE3:
(PongGame.moveBall$IF_TRUE3)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3:
@PongGame.moveBall$IF_END3
0;JMP
// label IF_FALSE3:
(PongGame.moveBall$IF_FALSE3)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE100
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE100
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL100
D;JGT
@R15
M=0
@END_BOOL100
0;JMP
(X_NEGATIVE_Y_POSITIVE100)
@R15
M=0
@END_BOOL100
0;JMP
(Y_NEGATIVE100)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE100
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL100
0;JMP
(X_AND_Y_NEGATIVE100)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL100
D;JGT
@R15
M=0
@END_BOOL100
0;JMP
(END_BOOL100)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@PongGame.moveBall$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@PongGame.moveBall$IF_FALSE4
0;JMP
// label IF_TRUE4:
(PongGame.moveBall$IF_TRUE4)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE4:
(PongGame.moveBall$IF_FALSE4)
// label IF_END3:
(PongGame.moveBall$IF_END3)
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 6:
@THIS
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Bat.setWidth:
@PongGame.moveBall$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setWidth
0;JMP
(PongGame.moveBall$ret.47)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 4:
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 4:
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 22:
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.moveCursor:
@PongGame.moveBall$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(PongGame.moveBall$ret.48)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 4:
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printInt:
@PongGame.moveBall$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0;JMP
(PongGame.moveBall$ret.49)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(PongGame.moveBall$IF_FALSE2)
// label IF_FALSE1:
(PongGame.moveBall$IF_FALSE1)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Ball.bounce:
@PongGame.moveBall$ret.50
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.bounce
0;JMP
(PongGame.moveBall$ret.50)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(PongGame.moveBall$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return PongGame.moveBall:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.init:
(Screen.init)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16384:
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 1:
@Screen.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP static 2:
@Screen.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 17:
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Screen.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Screen.init$ret.1)
// C_POP static 0:
@Screen.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Screen.init$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE101
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE101
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL101
D;JLT
@R15
M=0
@END_BOOL101
0;JMP
(X_NEGATIVE_Y_POSITIVE101)
@R15
M=-1
@END_BOOL101
0;JMP
(Y_NEGATIVE101)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE101
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL101
0;JMP
(X_AND_Y_NEGATIVE101)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL101
D;JLT
@R15
M=0
@END_BOOL101
0;JMP
(END_BOOL101)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.init$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.init$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.init$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.clearScreen:
(Screen.clearScreen)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// label WHILE_EXP0:
(Screen.clearScreen$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 8192:
@8192
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE102
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE102
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL102
D;JLT
@R15
M=0
@END_BOOL102
0;JMP
(X_NEGATIVE_Y_POSITIVE102)
@R15
M=-1
@END_BOOL102
0;JMP
(Y_NEGATIVE102)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE102
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL102
0;JMP
(X_AND_Y_NEGATIVE102)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL102
D;JLT
@R15
M=0
@END_BOOL102
0;JMP
(END_BOOL102)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.clearScreen$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.clearScreen$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.clearScreen$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.clearScreen:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.updateLocation:
(Screen.updateLocation)
// C_PUSH static 2:
@Screen.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.updateLocation$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.updateLocation$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.updateLocation$IF_TRUE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Screen.updateLocation$IF_END0
0;JMP
// label IF_FALSE0:
(Screen.updateLocation$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Screen.updateLocation$IF_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.updateLocation:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.setColor:
(Screen.setColor)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 2:
@Screen.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.setColor:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawPixel:
(Screen.drawPixel)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE103
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE103
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL103
D;JLT
@R15
M=0
@END_BOOL103
0;JMP
(X_NEGATIVE_Y_POSITIVE103)
@R15
M=-1
@END_BOOL103
0;JMP
(Y_NEGATIVE103)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE103
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL103
0;JMP
(X_AND_Y_NEGATIVE103)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL103
D;JLT
@R15
M=0
@END_BOOL103
0;JMP
(END_BOOL103)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE104
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE104
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL104
D;JGT
@R15
M=0
@END_BOOL104
0;JMP
(X_NEGATIVE_Y_POSITIVE104)
@R15
M=0
@END_BOOL104
0;JMP
(Y_NEGATIVE104)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE104
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL104
0;JMP
(X_AND_Y_NEGATIVE104)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL104
D;JGT
@R15
M=0
@END_BOOL104
0;JMP
(END_BOOL104)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE105
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE105
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL105
D;JLT
@R15
M=0
@END_BOOL105
0;JMP
(X_NEGATIVE_Y_POSITIVE105)
@R15
M=-1
@END_BOOL105
0;JMP
(Y_NEGATIVE105)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE105
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL105
0;JMP
(X_AND_Y_NEGATIVE105)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL105
D;JLT
@R15
M=0
@END_BOOL105
0;JMP
(END_BOOL105)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE106
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE106
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL106
D;JGT
@R15
M=0
@END_BOOL106
0;JMP
(X_NEGATIVE_Y_POSITIVE106)
@R15
M=0
@END_BOOL106
0;JMP
(Y_NEGATIVE106)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE106
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL106
0;JMP
(X_AND_Y_NEGATIVE106)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL106
D;JGT
@R15
M=0
@END_BOOL106
0;JMP
(END_BOOL106)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawPixel$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawPixel$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawPixel$IF_TRUE0)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Screen.drawPixel$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawPixel$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Screen.drawPixel$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Screen.drawPixel$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawPixel$ret.3)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawPixel$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawPixel$ret.4)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawPixel$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawPixel$ret.5)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.updateLocation:
@Screen.drawPixel$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawPixel$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawPixel:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawConditional:
(Screen.drawConditional)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawConditional$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawConditional$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawConditional$IF_TRUE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawPixel:
@Screen.drawConditional$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Screen.drawConditional$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Screen.drawConditional$IF_END0
0;JMP
// label IF_FALSE0:
(Screen.drawConditional$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawPixel:
@Screen.drawConditional$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Screen.drawConditional$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Screen.drawConditional$IF_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawConditional:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawLine:
(Screen.drawLine)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE107
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE107
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL107
D;JLT
@R15
M=0
@END_BOOL107
0;JMP
(X_NEGATIVE_Y_POSITIVE107)
@R15
M=-1
@END_BOOL107
0;JMP
(Y_NEGATIVE107)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE107
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL107
0;JMP
(X_AND_Y_NEGATIVE107)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL107
D;JLT
@R15
M=0
@END_BOOL107
0;JMP
(END_BOOL107)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE108
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE108
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL108
D;JGT
@R15
M=0
@END_BOOL108
0;JMP
(X_NEGATIVE_Y_POSITIVE108)
@R15
M=0
@END_BOOL108
0;JMP
(Y_NEGATIVE108)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE108
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL108
0;JMP
(X_AND_Y_NEGATIVE108)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL108
D;JGT
@R15
M=0
@END_BOOL108
0;JMP
(END_BOOL108)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE109
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE109
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL109
D;JLT
@R15
M=0
@END_BOOL109
0;JMP
(X_NEGATIVE_Y_POSITIVE109)
@R15
M=-1
@END_BOOL109
0;JMP
(Y_NEGATIVE109)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE109
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL109
0;JMP
(X_AND_Y_NEGATIVE109)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL109
D;JLT
@R15
M=0
@END_BOOL109
0;JMP
(END_BOOL109)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE110
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE110
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL110
D;JGT
@R15
M=0
@END_BOOL110
0;JMP
(X_NEGATIVE_Y_POSITIVE110)
@R15
M=0
@END_BOOL110
0;JMP
(Y_NEGATIVE110)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE110
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL110
0;JMP
(X_AND_Y_NEGATIVE110)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL110
D;JGT
@R15
M=0
@END_BOOL110
0;JMP
(END_BOOL110)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawLine$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawLine$IF_TRUE0)
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Screen.drawLine$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawLine$ret.9)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Screen.drawLine$IF_FALSE0)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.abs:
@Screen.drawLine$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Screen.drawLine$ret.10)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.abs:
@Screen.drawLine$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Screen.drawLine$ret.11)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE111
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE111
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL111
D;JLT
@R15
M=0
@END_BOOL111
0;JMP
(X_NEGATIVE_Y_POSITIVE111)
@R15
M=-1
@END_BOOL111
0;JMP
(Y_NEGATIVE111)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE111
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL111
0;JMP
(X_AND_Y_NEGATIVE111)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL111
D;JLT
@R15
M=0
@END_BOOL111
0;JMP
(END_BOOL111)
@R15
D=M
@SP
A=M-1
M=D
// C_POP local 6:
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE112
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE112
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL112
D;JLT
@R15
M=0
@END_BOOL112
0;JMP
(X_NEGATIVE_Y_POSITIVE112)
@R15
M=-1
@END_BOOL112
0;JMP
(Y_NEGATIVE112)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE112
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL112
0;JMP
(X_AND_Y_NEGATIVE112)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL112
D;JLT
@R15
M=0
@END_BOOL112
0;JMP
(END_BOOL112)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE113
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE113
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL113
D;JLT
@R15
M=0
@END_BOOL113
0;JMP
(X_NEGATIVE_Y_POSITIVE113)
@R15
M=-1
@END_BOOL113
0;JMP
(Y_NEGATIVE113)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE113
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL113
0;JMP
(X_AND_Y_NEGATIVE113)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL113
D;JLT
@R15
M=0
@END_BOOL113
0;JMP
(END_BOOL113)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Screen.drawLine$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Screen.drawLine$IF_TRUE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 2:
@ARG
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 3:
@ARG
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Screen.drawLine$IF_FALSE1)
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Screen.drawLine$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Screen.drawLine$IF_TRUE2)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 8:
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE114
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE114
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL114
D;JGT
@R15
M=0
@END_BOOL114
0;JMP
(X_NEGATIVE_Y_POSITIVE114)
@R15
M=0
@END_BOOL114
0;JMP
(Y_NEGATIVE114)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE114
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL114
0;JMP
(X_AND_Y_NEGATIVE114)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL114
D;JGT
@R15
M=0
@END_BOOL114
0;JMP
(END_BOOL114)
@R15
D=M
@SP
A=M-1
M=D
// C_POP local 7:
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END2:
@Screen.drawLine$IF_END2
0;JMP
// label IF_FALSE2:
(Screen.drawLine$IF_FALSE2)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 8:
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE115
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE115
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL115
D;JGT
@R15
M=0
@END_BOOL115
0;JMP
(X_NEGATIVE_Y_POSITIVE115)
@R15
M=0
@END_BOOL115
0;JMP
(Y_NEGATIVE115)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE115
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL115
0;JMP
(X_AND_Y_NEGATIVE115)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL115
D;JGT
@R15
M=0
@END_BOOL115
0;JMP
(END_BOOL115)
@R15
D=M
@SP
A=M-1
M=D
// C_POP local 7:
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END2:
(Screen.drawLine$IF_END2)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawLine$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine$ret.12)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawLine$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine$ret.13)
// C_POP local 9:
@LCL
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.multiply:
@Screen.drawLine$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine$ret.14)
// C_POP local 10:
@LCL
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawConditional:
@Screen.drawLine$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0;JMP
(Screen.drawLine$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Screen.drawLine$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE116
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE116
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL116
D;JLT
@R15
M=0
@END_BOOL116
0;JMP
(X_NEGATIVE_Y_POSITIVE116)
@R15
M=-1
@END_BOOL116
0;JMP
(Y_NEGATIVE116)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE116
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL116
0;JMP
(X_AND_Y_NEGATIVE116)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL116
D;JLT
@R15
M=0
@END_BOOL116
0;JMP
(END_BOOL116)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.drawLine$WHILE_END0
D;JNE
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE117
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE117
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL117
D;JLT
@R15
M=0
@END_BOOL117
0;JMP
(X_NEGATIVE_Y_POSITIVE117)
@R15
M=-1
@END_BOOL117
0;JMP
(Y_NEGATIVE117)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE117
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL117
0;JMP
(X_AND_Y_NEGATIVE117)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL117
D;JLT
@R15
M=0
@END_BOOL117
0;JMP
(END_BOOL117)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Screen.drawLine$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Screen.drawLine$IF_TRUE3)
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 9:
@LCL
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3:
@Screen.drawLine$IF_END3
0;JMP
// label IF_FALSE3:
(Screen.drawLine$IF_FALSE3)
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 10:
@LCL
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@Screen.drawLine$IF_FALSE4
0;JMP
// label IF_TRUE4:
(Screen.drawLine$IF_TRUE4)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END4:
@Screen.drawLine$IF_END4
0;JMP
// label IF_FALSE4:
(Screen.drawLine$IF_FALSE4)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END4:
(Screen.drawLine$IF_END4)
// label IF_END3:
(Screen.drawLine$IF_END3)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawConditional:
@Screen.drawLine$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0;JMP
(Screen.drawLine$ret.16)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.drawLine$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.drawLine$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawLine:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawRectangle:
(Screen.drawRectangle)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE118
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE118
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL118
D;JGT
@R15
M=0
@END_BOOL118
0;JMP
(X_NEGATIVE_Y_POSITIVE118)
@R15
M=0
@END_BOOL118
0;JMP
(Y_NEGATIVE118)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE118
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL118
0;JMP
(X_AND_Y_NEGATIVE118)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL118
D;JGT
@R15
M=0
@END_BOOL118
0;JMP
(END_BOOL118)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE119
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE119
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL119
D;JGT
@R15
M=0
@END_BOOL119
0;JMP
(X_NEGATIVE_Y_POSITIVE119)
@R15
M=0
@END_BOOL119
0;JMP
(Y_NEGATIVE119)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE119
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL119
0;JMP
(X_AND_Y_NEGATIVE119)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL119
D;JGT
@R15
M=0
@END_BOOL119
0;JMP
(END_BOOL119)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE120
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE120
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL120
D;JLT
@R15
M=0
@END_BOOL120
0;JMP
(X_NEGATIVE_Y_POSITIVE120)
@R15
M=-1
@END_BOOL120
0;JMP
(Y_NEGATIVE120)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE120
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL120
0;JMP
(X_AND_Y_NEGATIVE120)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL120
D;JLT
@R15
M=0
@END_BOOL120
0;JMP
(END_BOOL120)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE121
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE121
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL121
D;JGT
@R15
M=0
@END_BOOL121
0;JMP
(X_NEGATIVE_Y_POSITIVE121)
@R15
M=0
@END_BOOL121
0;JMP
(Y_NEGATIVE121)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE121
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL121
0;JMP
(X_AND_Y_NEGATIVE121)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL121
D;JGT
@R15
M=0
@END_BOOL121
0;JMP
(END_BOOL121)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE122
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE122
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL122
D;JLT
@R15
M=0
@END_BOOL122
0;JMP
(X_NEGATIVE_Y_POSITIVE122)
@R15
M=-1
@END_BOOL122
0;JMP
(Y_NEGATIVE122)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE122
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL122
0;JMP
(X_AND_Y_NEGATIVE122)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL122
D;JLT
@R15
M=0
@END_BOOL122
0;JMP
(END_BOOL122)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE123
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE123
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL123
D;JGT
@R15
M=0
@END_BOOL123
0;JMP
(X_NEGATIVE_Y_POSITIVE123)
@R15
M=0
@END_BOOL123
0;JMP
(Y_NEGATIVE123)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE123
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL123
0;JMP
(X_AND_Y_NEGATIVE123)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL123
D;JGT
@R15
M=0
@END_BOOL123
0;JMP
(END_BOOL123)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawRectangle$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawRectangle$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawRectangle$IF_TRUE0)
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Screen.drawRectangle$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawRectangle$ret.17)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Screen.drawRectangle$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Screen.drawRectangle$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawRectangle$ret.18)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawRectangle$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle$ret.19)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 7:
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Screen.drawRectangle$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawRectangle$ret.20)
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawRectangle$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle$ret.21)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 8:
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// not
@SP
A=M-1
M=!M
// C_POP local 6:
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawRectangle$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle$ret.22)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Screen.drawRectangle$WHILE_EXP0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE124
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE124
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL124
D;JGT
@R15
M=0
@END_BOOL124
0;JMP
(X_NEGATIVE_Y_POSITIVE124)
@R15
M=0
@END_BOOL124
0;JMP
(Y_NEGATIVE124)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE124
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL124
0;JMP
(X_AND_Y_NEGATIVE124)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL124
D;JGT
@R15
M=0
@END_BOOL124
0;JMP
(END_BOOL124)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.drawRectangle$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL125
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL125)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Screen.drawRectangle$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Screen.drawRectangle$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Screen.drawRectangle$IF_TRUE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// call Screen.updateLocation:
@Screen.drawRectangle$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.23)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Screen.drawRectangle$IF_END1
0;JMP
// label IF_FALSE1:
(Screen.drawRectangle$IF_FALSE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.updateLocation:
@Screen.drawRectangle$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.24)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Screen.drawRectangle$WHILE_EXP1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE126
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE126
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL126
D;JLT
@R15
M=0
@END_BOOL126
0;JMP
(X_NEGATIVE_Y_POSITIVE126)
@R15
M=-1
@END_BOOL126
0;JMP
(Y_NEGATIVE126)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE126
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL126
0;JMP
(X_AND_Y_NEGATIVE126)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL126
D;JLT
@R15
M=0
@END_BOOL126
0;JMP
(END_BOOL126)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Screen.drawRectangle$WHILE_END1
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Screen.updateLocation:
@Screen.drawRectangle$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.25)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Screen.drawRectangle$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Screen.drawRectangle$WHILE_END1)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.updateLocation:
@Screen.drawRectangle$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.26)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Screen.drawRectangle$IF_END1)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.drawRectangle$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.drawRectangle$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawRectangle:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawHorizontal:
(Screen.drawHorizontal)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.min:
@Screen.drawHorizontal$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.min
0;JMP
(Screen.drawHorizontal$ret.27)
// C_POP local 7:
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.max:
@Screen.drawHorizontal$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.max
0;JMP
(Screen.drawHorizontal$ret.28)
// C_POP local 8:
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE127
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE127
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL127
D;JGT
@R15
M=0
@END_BOOL127
0;JMP
(X_NEGATIVE_Y_POSITIVE127)
@R15
M=0
@END_BOOL127
0;JMP
(Y_NEGATIVE127)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE127
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL127
0;JMP
(X_AND_Y_NEGATIVE127)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL127
D;JGT
@R15
M=0
@END_BOOL127
0;JMP
(END_BOOL127)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 256:
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE128
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE128
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL128
D;JLT
@R15
M=0
@END_BOOL128
0;JMP
(X_NEGATIVE_Y_POSITIVE128)
@R15
M=-1
@END_BOOL128
0;JMP
(Y_NEGATIVE128)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE128
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL128
0;JMP
(X_AND_Y_NEGATIVE128)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL128
D;JLT
@R15
M=0
@END_BOOL128
0;JMP
(END_BOOL128)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 512:
@512
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE129
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE129
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL129
D;JLT
@R15
M=0
@END_BOOL129
0;JMP
(X_NEGATIVE_Y_POSITIVE129)
@R15
M=-1
@END_BOOL129
0;JMP
(Y_NEGATIVE129)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE129
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL129
0;JMP
(X_AND_Y_NEGATIVE129)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL129
D;JLT
@R15
M=0
@END_BOOL129
0;JMP
(END_BOOL129)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE130
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE130
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL130
D;JGT
@R15
M=0
@END_BOOL130
0;JMP
(X_NEGATIVE_Y_POSITIVE130)
@R15
M=0
@END_BOOL130
0;JMP
(Y_NEGATIVE130)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE130
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL130
0;JMP
(X_AND_Y_NEGATIVE130)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL130
D;JGT
@R15
M=0
@END_BOOL130
0;JMP
(END_BOOL130)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawHorizontal$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawHorizontal$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawHorizontal$IF_TRUE0)
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.max:
@Screen.drawHorizontal$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.max
0;JMP
(Screen.drawHorizontal$ret.29)
// C_POP local 7:
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.min:
@Screen.drawHorizontal$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.min
0;JMP
(Screen.drawHorizontal$ret.30)
// C_POP local 8:
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Screen.drawHorizontal$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawHorizontal$ret.31)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawHorizontal$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal$ret.32)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 9:
@LCL
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Screen.drawHorizontal$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawHorizontal$ret.33)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawHorizontal$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal$ret.34)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 10:
@LCL
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 9:
@LCL
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// not
@SP
A=M-1
M=!M
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 10:
@LCL
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawHorizontal$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal$ret.35)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 6:
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL131
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL131)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Screen.drawHorizontal$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Screen.drawHorizontal$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Screen.drawHorizontal$IF_TRUE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// call Screen.updateLocation:
@Screen.drawHorizontal$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.36)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Screen.drawHorizontal$IF_END1
0;JMP
// label IF_FALSE1:
(Screen.drawHorizontal$IF_FALSE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.updateLocation:
@Screen.drawHorizontal$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.37)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Screen.drawHorizontal$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE132
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE132
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL132
D;JLT
@R15
M=0
@END_BOOL132
0;JMP
(X_NEGATIVE_Y_POSITIVE132)
@R15
M=-1
@END_BOOL132
0;JMP
(Y_NEGATIVE132)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE132
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL132
0;JMP
(X_AND_Y_NEGATIVE132)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL132
D;JLT
@R15
M=0
@END_BOOL132
0;JMP
(END_BOOL132)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.drawHorizontal$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Screen.updateLocation:
@Screen.drawHorizontal$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.38)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.drawHorizontal$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.drawHorizontal$WHILE_END0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.updateLocation:
@Screen.drawHorizontal$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.39)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Screen.drawHorizontal$IF_END1)
// label IF_FALSE0:
(Screen.drawHorizontal$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawHorizontal:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawSymetric:
(Screen.drawSymetric)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Screen.drawHorizontal:
@Screen.drawSymetric$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.40)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Screen.drawHorizontal:
@Screen.drawSymetric$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.41)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawHorizontal:
@Screen.drawSymetric$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.42)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawHorizontal:
@Screen.drawSymetric$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.43)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawSymetric:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawCircle:
(Screen.drawCircle)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE133
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE133
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL133
D;JLT
@R15
M=0
@END_BOOL133
0;JMP
(X_NEGATIVE_Y_POSITIVE133)
@R15
M=-1
@END_BOOL133
0;JMP
(Y_NEGATIVE133)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE133
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL133
0;JMP
(X_AND_Y_NEGATIVE133)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL133
D;JLT
@R15
M=0
@END_BOOL133
0;JMP
(END_BOOL133)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE134
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE134
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL134
D;JGT
@R15
M=0
@END_BOOL134
0;JMP
(X_NEGATIVE_Y_POSITIVE134)
@R15
M=0
@END_BOOL134
0;JMP
(Y_NEGATIVE134)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE134
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL134
0;JMP
(X_AND_Y_NEGATIVE134)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL134
D;JGT
@R15
M=0
@END_BOOL134
0;JMP
(END_BOOL134)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE135
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE135
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL135
D;JLT
@R15
M=0
@END_BOOL135
0;JMP
(X_NEGATIVE_Y_POSITIVE135)
@R15
M=-1
@END_BOOL135
0;JMP
(Y_NEGATIVE135)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE135
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL135
0;JMP
(X_AND_Y_NEGATIVE135)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL135
D;JLT
@R15
M=0
@END_BOOL135
0;JMP
(END_BOOL135)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE136
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE136
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL136
D;JGT
@R15
M=0
@END_BOOL136
0;JMP
(X_NEGATIVE_Y_POSITIVE136)
@R15
M=0
@END_BOOL136
0;JMP
(Y_NEGATIVE136)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE136
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL136
0;JMP
(X_AND_Y_NEGATIVE136)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL136
D;JGT
@R15
M=0
@END_BOOL136
0;JMP
(END_BOOL136)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawCircle$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawCircle$IF_TRUE0)
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Screen.drawCircle$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawCircle$ret.44)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Screen.drawCircle$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE137
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE137
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL137
D;JLT
@R15
M=0
@END_BOOL137
0;JMP
(X_NEGATIVE_Y_POSITIVE137)
@R15
M=-1
@END_BOOL137
0;JMP
(Y_NEGATIVE137)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE137
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL137
0;JMP
(X_AND_Y_NEGATIVE137)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL137
D;JLT
@R15
M=0
@END_BOOL137
0;JMP
(END_BOOL137)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE138
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE138
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL138
D;JGT
@R15
M=0
@END_BOOL138
0;JMP
(X_NEGATIVE_Y_POSITIVE138)
@R15
M=0
@END_BOOL138
0;JMP
(Y_NEGATIVE138)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE138
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL138
0;JMP
(X_AND_Y_NEGATIVE138)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL138
D;JGT
@R15
M=0
@END_BOOL138
0;JMP
(END_BOOL138)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE139
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE139
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL139
D;JLT
@R15
M=0
@END_BOOL139
0;JMP
(X_NEGATIVE_Y_POSITIVE139)
@R15
M=-1
@END_BOOL139
0;JMP
(Y_NEGATIVE139)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE139
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL139
0;JMP
(X_AND_Y_NEGATIVE139)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL139
D;JLT
@R15
M=0
@END_BOOL139
0;JMP
(END_BOOL139)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE140
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE140
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL140
D;JGT
@R15
M=0
@END_BOOL140
0;JMP
(X_NEGATIVE_Y_POSITIVE140)
@R15
M=0
@END_BOOL140
0;JMP
(Y_NEGATIVE140)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE140
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL140
0;JMP
(X_AND_Y_NEGATIVE140)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL140
D;JGT
@R15
M=0
@END_BOOL140
0;JMP
(END_BOOL140)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Screen.drawCircle$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Screen.drawCircle$IF_TRUE1)
// C_PUSH constant 13:
@13
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Screen.drawCircle$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawCircle$ret.45)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Screen.drawCircle$IF_FALSE1)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawSymetric:
@Screen.drawCircle$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0;JMP
(Screen.drawCircle$ret.46)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Screen.drawCircle$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE141
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE141
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL141
D;JGT
@R15
M=0
@END_BOOL141
0;JMP
(X_NEGATIVE_Y_POSITIVE141)
@R15
M=0
@END_BOOL141
0;JMP
(Y_NEGATIVE141)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE141
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL141
0;JMP
(X_AND_Y_NEGATIVE141)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL141
D;JGT
@R15
M=0
@END_BOOL141
0;JMP
(END_BOOL141)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.drawCircle$WHILE_END0
D;JNE
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE142
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE142
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL142
D;JLT
@R15
M=0
@END_BOOL142
0;JMP
(X_NEGATIVE_Y_POSITIVE142)
@R15
M=-1
@END_BOOL142
0;JMP
(Y_NEGATIVE142)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE142
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL142
0;JMP
(X_AND_Y_NEGATIVE142)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL142
D;JLT
@R15
M=0
@END_BOOL142
0;JMP
(END_BOOL142)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Screen.drawCircle$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Screen.drawCircle$IF_TRUE2)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawCircle$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawCircle$ret.47)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END2:
@Screen.drawCircle$IF_END2
0;JMP
// label IF_FALSE2:
(Screen.drawCircle$IF_FALSE2)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.multiply:
@Screen.drawCircle$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawCircle$ret.48)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END2:
(Screen.drawCircle$IF_END2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawSymetric:
@Screen.drawCircle$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0;JMP
(Screen.drawCircle$ret.49)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.drawCircle$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.drawCircle$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawCircle:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.new:
(String.new)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc:
@String.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(String.new$ret.1)
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE143
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE143
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL143
D;JLT
@R15
M=0
@END_BOOL143
0;JMP
(X_NEGATIVE_Y_POSITIVE143)
@R15
M=-1
@END_BOOL143
0;JMP
(Y_NEGATIVE143)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE143
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL143
0;JMP
(X_AND_Y_NEGATIVE143)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL143
D;JLT
@R15
M=0
@END_BOOL143
0;JMP
(END_BOOL143)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.new$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.new$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.new$IF_TRUE0)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.new$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.new$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE144
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE144
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL144
D;JGT
@R15
M=0
@END_BOOL144
0;JMP
(X_NEGATIVE_Y_POSITIVE144)
@R15
M=0
@END_BOOL144
0;JMP
(Y_NEGATIVE144)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE144
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL144
0;JMP
(X_AND_Y_NEGATIVE144)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL144
D;JGT
@R15
M=0
@END_BOOL144
0;JMP
(END_BOOL144)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@String.new$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@String.new$IF_FALSE1
0;JMP
// label IF_TRUE1:
(String.new$IF_TRUE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@String.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(String.new$ret.3)
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(String.new$IF_FALSE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return String.new:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.dispose:
(String.dispose)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE145
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE145
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL145
D;JGT
@R15
M=0
@END_BOOL145
0;JMP
(X_NEGATIVE_Y_POSITIVE145)
@R15
M=0
@END_BOOL145
0;JMP
(Y_NEGATIVE145)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE145
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL145
0;JMP
(X_AND_Y_NEGATIVE145)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL145
D;JGT
@R15
M=0
@END_BOOL145
0;JMP
(END_BOOL145)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.dispose$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.dispose$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.dispose$IF_TRUE0)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Array.dispose:
@String.dispose$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(String.dispose$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.dispose$IF_FALSE0)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc:
@String.dispose$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(String.dispose$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.dispose:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.length:
(String.length)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return String.length:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.charAt:
(String.charAt)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE146
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE146
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL146
D;JLT
@R15
M=0
@END_BOOL146
0;JMP
(X_NEGATIVE_Y_POSITIVE146)
@R15
M=-1
@END_BOOL146
0;JMP
(Y_NEGATIVE146)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE146
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL146
0;JMP
(X_AND_Y_NEGATIVE146)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL146
D;JLT
@R15
M=0
@END_BOOL146
0;JMP
(END_BOOL146)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE147
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE147
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL147
D;JGT
@R15
M=0
@END_BOOL147
0;JMP
(X_NEGATIVE_Y_POSITIVE147)
@R15
M=0
@END_BOOL147
0;JMP
(Y_NEGATIVE147)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE147
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL147
0;JMP
(X_AND_Y_NEGATIVE147)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL147
D;JGT
@R15
M=0
@END_BOOL147
0;JMP
(END_BOOL147)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL148
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL148)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.charAt$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.charAt$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.charAt$IF_TRUE0)
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.charAt$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.charAt$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.charAt$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return String.charAt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.setCharAt:
(String.setCharAt)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE149
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE149
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL149
D;JLT
@R15
M=0
@END_BOOL149
0;JMP
(X_NEGATIVE_Y_POSITIVE149)
@R15
M=-1
@END_BOOL149
0;JMP
(Y_NEGATIVE149)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE149
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL149
0;JMP
(X_AND_Y_NEGATIVE149)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL149
D;JLT
@R15
M=0
@END_BOOL149
0;JMP
(END_BOOL149)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE150
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE150
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL150
D;JGT
@R15
M=0
@END_BOOL150
0;JMP
(X_NEGATIVE_Y_POSITIVE150)
@R15
M=0
@END_BOOL150
0;JMP
(Y_NEGATIVE150)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE150
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL150
0;JMP
(X_AND_Y_NEGATIVE150)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL150
D;JGT
@R15
M=0
@END_BOOL150
0;JMP
(END_BOOL150)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL151
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL151)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.setCharAt$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.setCharAt$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.setCharAt$IF_TRUE0)
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.setCharAt$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setCharAt$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.setCharAt$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.setCharAt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.appendChar:
(String.appendChar)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL152
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL152)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.appendChar$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.appendChar$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.appendChar$IF_TRUE0)
// C_PUSH constant 17:
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.appendChar$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.appendChar$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.appendChar$IF_FALSE0)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return String.appendChar:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.eraseLastChar:
(String.eraseLastChar)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL153
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL153)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.eraseLastChar$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.eraseLastChar$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.eraseLastChar$IF_TRUE0)
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.eraseLastChar$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.eraseLastChar$ret.9)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.eraseLastChar$IF_FALSE0)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.eraseLastChar:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.intValue:
(String.intValue)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL154
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL154)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.intValue$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.intValue$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.intValue:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// label IF_FALSE0:
(String.intValue$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL155
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL155)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@String.intValue$IF_FALSE1
0;JMP
// label IF_TRUE1:
(String.intValue$IF_TRUE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(String.intValue$IF_FALSE1)
// label WHILE_EXP0:
(String.intValue$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE156
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE156
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL156
D;JLT
@R15
M=0
@END_BOOL156
0;JMP
(X_NEGATIVE_Y_POSITIVE156)
@R15
M=-1
@END_BOOL156
0;JMP
(Y_NEGATIVE156)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE156
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL156
0;JMP
(X_AND_Y_NEGATIVE156)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL156
D;JLT
@R15
M=0
@END_BOOL156
0;JMP
(END_BOOL156)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@String.intValue$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE157
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE157
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL157
D;JLT
@R15
M=0
@END_BOOL157
0;JMP
(X_NEGATIVE_Y_POSITIVE157)
@R15
M=-1
@END_BOOL157
0;JMP
(Y_NEGATIVE157)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE157
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL157
0;JMP
(X_AND_Y_NEGATIVE157)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL157
D;JLT
@R15
M=0
@END_BOOL157
0;JMP
(END_BOOL157)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE158
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE158
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL158
D;JGT
@R15
M=0
@END_BOOL158
0;JMP
(X_NEGATIVE_Y_POSITIVE158)
@R15
M=0
@END_BOOL158
0;JMP
(Y_NEGATIVE158)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE158
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL158
0;JMP
(X_AND_Y_NEGATIVE158)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL158
D;JGT
@R15
M=0
@END_BOOL158
0;JMP
(END_BOOL158)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// not
@SP
A=M-1
M=!M
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@String.intValue$IF_FALSE2
0;JMP
// label IF_TRUE2:
(String.intValue$IF_TRUE2)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@String.intValue$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(String.intValue$ret.10)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(String.intValue$IF_FALSE2)
// goto WHILE_EXP0:
@String.intValue$WHILE_EXP0
0;JMP
// label WHILE_END0:
(String.intValue$WHILE_END0)
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@String.intValue$IF_FALSE3
0;JMP
// label IF_TRUE3:
(String.intValue$IF_TRUE3)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(String.intValue$IF_FALSE3)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return String.intValue:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.setInt:
(String.setInt)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL159
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL159)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.setInt$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.setInt$IF_TRUE0)
// C_PUSH constant 19:
@19
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.setInt$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setInt$ret.11)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.setInt$IF_FALSE0)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@String.setInt$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(String.setInt$ret.12)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE160
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE160
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL160
D;JLT
@R15
M=0
@END_BOOL160
0;JMP
(X_NEGATIVE_Y_POSITIVE160)
@R15
M=-1
@END_BOOL160
0;JMP
(Y_NEGATIVE160)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE160
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL160
0;JMP
(X_AND_Y_NEGATIVE160)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL160
D;JLT
@R15
M=0
@END_BOOL160
0;JMP
(END_BOOL160)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@String.setInt$IF_FALSE1
0;JMP
// label IF_TRUE1:
(String.setInt$IF_TRUE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(String.setInt$IF_FALSE1)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(String.setInt$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE161
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE161
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL161
D;JGT
@R15
M=0
@END_BOOL161
0;JMP
(X_NEGATIVE_Y_POSITIVE161)
@R15
M=0
@END_BOOL161
0;JMP
(Y_NEGATIVE161)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE161
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL161
0;JMP
(X_AND_Y_NEGATIVE161)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL161
D;JGT
@R15
M=0
@END_BOOL161
0;JMP
(END_BOOL161)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@String.setInt$WHILE_END0
D;JNE
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@String.setInt$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(String.setInt$ret.13)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@String.setInt$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(String.setInt$ret.14)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@String.setInt$WHILE_EXP0
0;JMP
// label WHILE_END0:
(String.setInt$WHILE_END0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@String.setInt$IF_FALSE2
0;JMP
// label IF_TRUE2:
(String.setInt$IF_TRUE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(String.setInt$IF_FALSE2)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE162
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE162
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL162
D;JLT
@R15
M=0
@END_BOOL162
0;JMP
(X_NEGATIVE_Y_POSITIVE162)
@R15
M=-1
@END_BOOL162
0;JMP
(Y_NEGATIVE162)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE162
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL162
0;JMP
(X_AND_Y_NEGATIVE162)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL162
D;JLT
@R15
M=0
@END_BOOL162
0;JMP
(END_BOOL162)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@String.setInt$IF_FALSE3
0;JMP
// label IF_TRUE3:
(String.setInt$IF_TRUE3)
// C_PUSH constant 19:
@19
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.setInt$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setInt$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(String.setInt$IF_FALSE3)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL163
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL163)
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@String.setInt$IF_FALSE4
0;JMP
// label IF_TRUE4:
(String.setInt$IF_TRUE4)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END4:
@String.setInt$IF_END4
0;JMP
// label IF_FALSE4:
(String.setInt$IF_FALSE4)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(String.setInt$WHILE_EXP1)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE164
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE164
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL164
D;JLT
@R15
M=0
@END_BOOL164
0;JMP
(X_NEGATIVE_Y_POSITIVE164)
@R15
M=-1
@END_BOOL164
0;JMP
(Y_NEGATIVE164)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE164
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL164
0;JMP
(X_AND_Y_NEGATIVE164)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL164
D;JLT
@R15
M=0
@END_BOOL164
0;JMP
(END_BOOL164)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@String.setInt$WHILE_END1
D;JNE
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@String.setInt$WHILE_EXP1
0;JMP
// label WHILE_END1:
(String.setInt$WHILE_END1)
// label IF_END4:
(String.setInt$IF_END4)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Array.dispose:
@String.setInt$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(String.setInt$ret.16)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.setInt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.newLine:
(String.newLine)
// C_PUSH constant 128:
@128
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.newLine:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.backSpace:
(String.backSpace)
// C_PUSH constant 129:
@129
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.backSpace:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.doubleQuote:
(String.doubleQuote)
// C_PUSH constant 34:
@34
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.doubleQuote:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Sys.init:
(Sys.init)
// call Memory.init:
@Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Sys.init$ret.1)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Math.init:
@Sys.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Sys.init$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Screen.init:
@Sys.init$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.init
0;JMP
(Sys.init$ret.3)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.init:
@Sys.init$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.init
0;JMP
(Sys.init$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Keyboard.init:
@Sys.init$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.init
0;JMP
(Sys.init$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Main.main:
@Sys.init$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Sys.init$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.halt:
@Sys.init$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.init$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Sys.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Sys.halt:
(Sys.halt)
// label WHILE_EXP0:
(Sys.halt$WHILE_EXP0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Sys.halt$WHILE_END0
D;JNE
// goto WHILE_EXP0:
@Sys.halt$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Sys.halt$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Sys.halt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Sys.wait:
(Sys.wait)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE165
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE165
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL165
D;JLT
@R15
M=0
@END_BOOL165
0;JMP
(X_NEGATIVE_Y_POSITIVE165)
@R15
M=-1
@END_BOOL165
0;JMP
(Y_NEGATIVE165)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE165
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL165
0;JMP
(X_AND_Y_NEGATIVE165)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL165
D;JLT
@R15
M=0
@END_BOOL165
0;JMP
(END_BOOL165)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Sys.wait$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Sys.wait$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Sys.wait$IF_TRUE0)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Sys.wait$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.wait$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Sys.wait$IF_FALSE0)
// label WHILE_EXP0:
(Sys.wait$WHILE_EXP0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE166
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE166
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL166
D;JGT
@R15
M=0
@END_BOOL166
0;JMP
(X_NEGATIVE_Y_POSITIVE166)
@R15
M=0
@END_BOOL166
0;JMP
(Y_NEGATIVE166)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE166
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL166
0;JMP
(X_AND_Y_NEGATIVE166)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL166
D;JGT
@R15
M=0
@END_BOOL166
0;JMP
(END_BOOL166)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END0
D;JNE
// C_PUSH constant 50:
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Sys.wait$WHILE_EXP1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE167
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE167
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL167
D;JGT
@R15
M=0
@END_BOOL167
0;JMP
(X_NEGATIVE_Y_POSITIVE167)
@R15
M=0
@END_BOOL167
0;JMP
(Y_NEGATIVE167)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE167
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL167
0;JMP
(X_AND_Y_NEGATIVE167)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL167
D;JGT
@R15
M=0
@END_BOOL167
0;JMP
(END_BOOL167)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END1
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Sys.wait$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Sys.wait$WHILE_END1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Sys.wait$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Sys.wait$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Sys.wait:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Sys.error:
(Sys.error)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Sys.error$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Sys.error$ret.9)
// C_PUSH constant 69:
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Sys.error$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error$ret.10)
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Sys.error$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error$ret.11)
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Sys.error$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error$ret.12)
// call Output.printString:
@Sys.error$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Sys.error$ret.13)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printInt:
@Sys.error$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0;JMP
(Sys.error$ret.14)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.halt:
@Sys.error$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.error$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Sys.error:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
