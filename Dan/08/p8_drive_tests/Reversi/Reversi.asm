@256
D=A
@SP
M=D
// call Sys.init:
@$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
($ret.1)
// funciton Array.new:
(Array.new)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE1
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE1
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL1
D;JGT
@R15
M=0
@END_BOOL1
0;JMP
(X_NEGATIVE_Y_POSITIVE1)
@R15
M=0
@END_BOOL1
0;JMP
(Y_NEGATIVE1)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE1
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL1
0;JMP
(X_AND_Y_NEGATIVE1)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL1
D;JGT
@R15
M=0
@END_BOOL1
0;JMP
(END_BOOL1)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Array.new$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Array.new$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Array.new$IF_TRUE0)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Array.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Array.new$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Array.new$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc:
@Array.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Array.new$ret.3)
// return Array.new:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Array.dispose:
(Array.dispose)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc:
@Array.dispose$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Array.dispose$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Array.dispose:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.new:
(Board.new)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc:
@Board.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Board.new$ret.1)
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Board.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Board.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 1:
@Board.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 2:
@Board.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 3:
@Board.3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 4:
@Board.4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 7:
@Board.7
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 7:
@Board.7
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Board.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Board.new$ret.2)
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Board.new$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE2
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE2
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL2
D;JLT
@R15
M=0
@END_BOOL2
0;JMP
(X_NEGATIVE_Y_POSITIVE2)
@R15
M=-1
@END_BOOL2
0;JMP
(Y_NEGATIVE2)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE2
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL2
0;JMP
(X_AND_Y_NEGATIVE2)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL2
D;JLT
@R15
M=0
@END_BOOL2
0;JMP
(END_BOOL2)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Board.new$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Board.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Board.new$ret.3)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Board.new$WHILE_EXP1)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE3
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE3
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL3
D;JLT
@R15
M=0
@END_BOOL3
0;JMP
(X_NEGATIVE_Y_POSITIVE3)
@R15
M=-1
@END_BOOL3
0;JMP
(Y_NEGATIVE3)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE3
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL3
0;JMP
(X_AND_Y_NEGATIVE3)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL3
D;JLT
@R15
M=0
@END_BOOL3
0;JMP
(END_BOOL3)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Board.new$WHILE_END1
D;JNE
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 7:
@Board.7
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Board.new$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Board.new$WHILE_END1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Board.new$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Board.new$WHILE_END0)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Board.new:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.setCell:
(Board.setCell)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Board.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL4
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL4)
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.setCell$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.setCell$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.setCell$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor:
@Board.setCell$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.setCell$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.setCell$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.setCell$ret.5)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Board.setCell$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Board.setCell$ret.6)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.setCell$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.setCell$ret.7)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Board.setCell$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Board.setCell$ret.8)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 4:
@Board.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawCircle:
@Board.setCell$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawCircle
0;JMP
(Board.setCell$ret.9)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Board.setCell$IF_FALSE0)
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Board.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL5
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL5)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Board.setCell$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Board.setCell$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Board.setCell$IF_TRUE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.setColor:
@Board.setCell$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.setCell$ret.10)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.setCell$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.setCell$ret.11)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Board.setCell$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Board.setCell$ret.12)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.setCell$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.setCell$ret.13)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Board.setCell$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Board.setCell$ret.14)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 4:
@Board.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Screen.drawCircle:
@Board.setCell$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawCircle
0;JMP
(Board.setCell$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Board.setCell$IF_FALSE1)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.setCell:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.initGrid:
(Board.initGrid)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.initGrid$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.initGrid$ret.16)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Board.initGrid$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Board.initGrid$ret.17)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor:
@Board.initGrid$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.initGrid$ret.18)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Board.initGrid$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE6
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE6
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL6
D;JLT
@R15
M=0
@END_BOOL6
0;JMP
(X_NEGATIVE_Y_POSITIVE6)
@R15
M=-1
@END_BOOL6
0;JMP
(Y_NEGATIVE6)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE6
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL6
0;JMP
(X_AND_Y_NEGATIVE6)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL6
D;JLT
@R15
M=0
@END_BOOL6
0;JMP
(END_BOOL6)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Board.initGrid$WHILE_END0
D;JNE
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.initGrid$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.initGrid$ret.19)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.initGrid$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.initGrid$ret.20)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.initGrid$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.initGrid$ret.21)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.initGrid$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.initGrid$ret.22)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.initGrid$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.initGrid$ret.23)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.initGrid$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.initGrid$ret.24)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Board.initGrid$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Board.initGrid$WHILE_END0)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 5:
@Board.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setCell:
@Board.initGrid$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setCell
0;JMP
(Board.initGrid$ret.25)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Board.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setCell:
@Board.initGrid$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setCell
0;JMP
(Board.initGrid$ret.26)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 6:
@Board.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setCell:
@Board.initGrid$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setCell
0;JMP
(Board.initGrid$ret.27)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Board.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setCell:
@Board.initGrid$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setCell
0;JMP
(Board.initGrid$ret.28)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Board.drawSelected:
@Board.initGrid$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.drawSelected
0;JMP
(Board.initGrid$ret.29)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.initGrid$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.initGrid$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.initGrid$IF_TRUE0)
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.initGrid$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.initGrid$ret.30)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Board.initGrid$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Board.initGrid$ret.31)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor:
@Board.initGrid$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.initGrid$ret.32)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Board.initGrid$WHILE_EXP1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE7
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE7
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL7
D;JLT
@R15
M=0
@END_BOOL7
0;JMP
(X_NEGATIVE_Y_POSITIVE7)
@R15
M=-1
@END_BOOL7
0;JMP
(Y_NEGATIVE7)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE7
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL7
0;JMP
(X_AND_Y_NEGATIVE7)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL7
D;JLT
@R15
M=0
@END_BOOL7
0;JMP
(END_BOOL7)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Board.initGrid$WHILE_END1
D;JNE
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.initGrid$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.initGrid$ret.33)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.initGrid$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.initGrid$ret.34)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.initGrid$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.initGrid$ret.35)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.initGrid$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.initGrid$ret.36)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.initGrid$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.initGrid$ret.37)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.initGrid$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.initGrid$ret.38)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Board.initGrid$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Board.initGrid$WHILE_END1)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 5:
@Board.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setCell:
@Board.initGrid$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setCell
0;JMP
(Board.initGrid$ret.39)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Board.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setCell:
@Board.initGrid$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setCell
0;JMP
(Board.initGrid$ret.40)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 6:
@Board.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setCell:
@Board.initGrid$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setCell
0;JMP
(Board.initGrid$ret.41)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Board.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setCell:
@Board.initGrid$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setCell
0;JMP
(Board.initGrid$ret.42)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Board.drawSelected:
@Board.initGrid$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.drawSelected
0;JMP
(Board.initGrid$ret.43)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Board.initGrid$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.initGrid:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.getSelectedRow:
(Board.getSelectedRow)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Board.getSelectedRow:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.getSelectedCol:
(Board.getSelectedCol)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Board.getSelectedCol:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.isEmpty:
(Board.isEmpty)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 7:
@Board.7
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL8
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL8)
// return Board.isEmpty:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.setConsts:
(Board.setConsts)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 5:
@Board.5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 6:
@Board.6
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 8:
@Board.8
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 9:
@Board.9
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 5:
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 11:
@Board.11
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 6:
@ARG
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 10:
@Board.10
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.setConsts:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.reverseDir:
(Board.reverseDir)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Board.reverseDir$WHILE_EXP0)
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Board.reverseDir$WHILE_END0
D;JNE
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 6:
@ARG
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 5:
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE9
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE9
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL9
D;JLT
@R15
M=0
@END_BOOL9
0;JMP
(X_NEGATIVE_Y_POSITIVE9)
@R15
M=-1
@END_BOOL9
0;JMP
(Y_NEGATIVE9)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE9
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL9
0;JMP
(X_AND_Y_NEGATIVE9)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL9
D;JLT
@R15
M=0
@END_BOOL9
0;JMP
(END_BOOL9)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE10
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE10
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL10
D;JGT
@R15
M=0
@END_BOOL10
0;JMP
(X_NEGATIVE_Y_POSITIVE10)
@R15
M=0
@END_BOOL10
0;JMP
(Y_NEGATIVE10)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE10
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL10
0;JMP
(X_AND_Y_NEGATIVE10)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL10
D;JGT
@R15
M=0
@END_BOOL10
0;JMP
(END_BOOL10)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE11
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE11
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL11
D;JLT
@R15
M=0
@END_BOOL11
0;JMP
(X_NEGATIVE_Y_POSITIVE11)
@R15
M=-1
@END_BOOL11
0;JMP
(Y_NEGATIVE11)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE11
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL11
0;JMP
(X_AND_Y_NEGATIVE11)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL11
D;JLT
@R15
M=0
@END_BOOL11
0;JMP
(END_BOOL11)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE12
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE12
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL12
D;JGT
@R15
M=0
@END_BOOL12
0;JMP
(X_NEGATIVE_Y_POSITIVE12)
@R15
M=0
@END_BOOL12
0;JMP
(Y_NEGATIVE12)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE12
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL12
0;JMP
(X_AND_Y_NEGATIVE12)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL12
D;JGT
@R15
M=0
@END_BOOL12
0;JMP
(END_BOOL12)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.reverseDir$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.reverseDir$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.reverseDir$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Board.reverseDir$IF_END0
0;JMP
// label IF_FALSE0:
(Board.reverseDir$IF_FALSE0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 6:
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 7:
@Board.7
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL13
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL13)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Board.reverseDir$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Board.reverseDir$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Board.reverseDir$IF_TRUE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Board.reverseDir$IF_END1
0;JMP
// label IF_FALSE1:
(Board.reverseDir$IF_FALSE1)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL14
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL14)
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Board.reverseDir$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Board.reverseDir$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Board.reverseDir$IF_TRUE2)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END2:
@Board.reverseDir$IF_END2
0;JMP
// label IF_FALSE2:
(Board.reverseDir$IF_FALSE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END2:
(Board.reverseDir$IF_END2)
// label IF_END1:
(Board.reverseDir$IF_END1)
// label IF_END0:
(Board.reverseDir$IF_END0)
// goto WHILE_EXP0:
@Board.reverseDir$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Board.reverseDir$WHILE_END0)
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE15
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE15
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL15
D;JGT
@R15
M=0
@END_BOOL15
0;JMP
(X_NEGATIVE_Y_POSITIVE15)
@R15
M=0
@END_BOOL15
0;JMP
(Y_NEGATIVE15)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE15
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL15
0;JMP
(X_AND_Y_NEGATIVE15)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL15
D;JGT
@R15
M=0
@END_BOOL15
0;JMP
(END_BOOL15)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Board.reverseDir$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Board.reverseDir$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Board.reverseDir$IF_TRUE3)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 6:
@ARG
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 5:
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Board.reverseDir$WHILE_EXP1)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL16
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL16)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL17
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL17)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Board.reverseDir$WHILE_END1
D;JNE
// C_PUSH constant 150:
@150
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Board.reverseDir$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Board.reverseDir$ret.44)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setCell:
@Board.reverseDir$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setCell
0;JMP
(Board.reverseDir$ret.45)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 6:
@ARG
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 5:
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Board.reverseDir$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Board.reverseDir$WHILE_END1)
// label IF_FALSE3:
(Board.reverseDir$IF_FALSE3)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Board.reverseDir:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.reverse:
(Board.reverse)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 7:
@Board.7
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL18
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL18)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.reverse$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.reverse$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.reverse$IF_TRUE0)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Board.reverseDir:
@Board.reverse$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.46)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Board.reverseDir:
@Board.reverse$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.47)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverseDir:
@Board.reverse$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.48)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverseDir:
@Board.reverse$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.49)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverseDir:
@Board.reverse$ret.50
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.50)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverseDir:
@Board.reverse$ret.51
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.51)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverseDir:
@Board.reverse$ret.52
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.52)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Board.reverseDir:
@Board.reverse$ret.53
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.53)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Board.reverse$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Board.reverse$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Board.reverse$IF_TRUE1)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Board.reverseDir:
@Board.reverse$ret.54
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.54)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Board.reverseDir:
@Board.reverse$ret.55
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.55)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverseDir:
@Board.reverse$ret.56
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.56)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverseDir:
@Board.reverse$ret.57
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.57)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverseDir:
@Board.reverse$ret.58
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.58)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverseDir:
@Board.reverse$ret.59
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.59)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverseDir:
@Board.reverse$ret.60
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.60)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Board.reverseDir:
@Board.reverse$ret.61
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverseDir
0;JMP
(Board.reverse$ret.61)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Board.reverse$IF_FALSE1)
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE19
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE19
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL19
D;JGT
@R15
M=0
@END_BOOL19
0;JMP
(X_NEGATIVE_Y_POSITIVE19)
@R15
M=0
@END_BOOL19
0;JMP
(Y_NEGATIVE19)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE19
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL19
0;JMP
(X_AND_Y_NEGATIVE19)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL19
D;JGT
@R15
M=0
@END_BOOL19
0;JMP
(END_BOOL19)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Board.reverse$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Board.reverse$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Board.reverse$IF_TRUE2)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setCell:
@Board.reverse$ret.62
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setCell
0;JMP
(Board.reverse$ret.62)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Board.reverse$IF_FALSE2)
// goto IF_END0:
@Board.reverse$IF_END0
0;JMP
// label IF_FALSE0:
(Board.reverse$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Board.reverse$IF_END0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Board.reverse:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.isGameOver:
(Board.isGameOver)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Board.isGameOver$WHILE_EXP0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE20
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE20
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL20
D;JLT
@R15
M=0
@END_BOOL20
0;JMP
(X_NEGATIVE_Y_POSITIVE20)
@R15
M=-1
@END_BOOL20
0;JMP
(Y_NEGATIVE20)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE20
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL20
0;JMP
(X_AND_Y_NEGATIVE20)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL20
D;JLT
@R15
M=0
@END_BOOL20
0;JMP
(END_BOOL20)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Board.isGameOver$WHILE_END0
D;JNE
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Board.isGameOver$WHILE_EXP1)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE21
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE21
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL21
D;JLT
@R15
M=0
@END_BOOL21
0;JMP
(X_NEGATIVE_Y_POSITIVE21)
@R15
M=-1
@END_BOOL21
0;JMP
(Y_NEGATIVE21)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE21
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL21
0;JMP
(X_AND_Y_NEGATIVE21)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL21
D;JLT
@R15
M=0
@END_BOOL21
0;JMP
(END_BOOL21)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Board.isGameOver$WHILE_END1
D;JNE
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverse:
@Board.isGameOver$ret.63
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@10
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverse
0;JMP
(Board.isGameOver$ret.63)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE22
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE22
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL22
D;JGT
@R15
M=0
@END_BOOL22
0;JMP
(X_NEGATIVE_Y_POSITIVE22)
@R15
M=0
@END_BOOL22
0;JMP
(Y_NEGATIVE22)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE22
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL22
0;JMP
(X_AND_Y_NEGATIVE22)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL22
D;JGT
@R15
M=0
@END_BOOL22
0;JMP
(END_BOOL22)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.isGameOver$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.isGameOver$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.isGameOver$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Board.isGameOver$IF_FALSE0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Board.isGameOver$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Board.isGameOver$WHILE_END1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Board.isGameOver$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Board.isGameOver$WHILE_END0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Board.isGameOver:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.getWinner:
(Board.getWinner)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 7:
@Board.7
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Board.getWinner$WHILE_EXP0)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE23
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE23
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL23
D;JLT
@R15
M=0
@END_BOOL23
0;JMP
(X_NEGATIVE_Y_POSITIVE23)
@R15
M=-1
@END_BOOL23
0;JMP
(Y_NEGATIVE23)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE23
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL23
0;JMP
(X_AND_Y_NEGATIVE23)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL23
D;JLT
@R15
M=0
@END_BOOL23
0;JMP
(END_BOOL23)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Board.getWinner$WHILE_END0
D;JNE
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Board.getWinner$WHILE_EXP1)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE24
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE24
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL24
D;JLT
@R15
M=0
@END_BOOL24
0;JMP
(X_NEGATIVE_Y_POSITIVE24)
@R15
M=-1
@END_BOOL24
0;JMP
(Y_NEGATIVE24)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE24
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL24
0;JMP
(X_AND_Y_NEGATIVE24)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL24
D;JLT
@R15
M=0
@END_BOOL24
0;JMP
(END_BOOL24)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Board.getWinner$WHILE_END1
D;JNE
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Board.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL25
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL25)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.getWinner$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.getWinner$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.getWinner$IF_TRUE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Board.getWinner$IF_END0
0;JMP
// label IF_FALSE0:
(Board.getWinner$IF_FALSE0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Board.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL26
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL26)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Board.getWinner$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Board.getWinner$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Board.getWinner$IF_TRUE1)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Board.getWinner$IF_FALSE1)
// label IF_END0:
(Board.getWinner$IF_END0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Board.getWinner$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Board.getWinner$WHILE_END1)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Board.getWinner$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Board.getWinner$WHILE_END0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE27
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE27
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL27
D;JGT
@R15
M=0
@END_BOOL27
0;JMP
(X_NEGATIVE_Y_POSITIVE27)
@R15
M=0
@END_BOOL27
0;JMP
(Y_NEGATIVE27)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE27
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL27
0;JMP
(X_AND_Y_NEGATIVE27)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL27
D;JGT
@R15
M=0
@END_BOOL27
0;JMP
(END_BOOL27)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Board.getWinner$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Board.getWinner$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Board.getWinner$IF_TRUE2)
// C_PUSH static 5:
@Board.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END2:
@Board.getWinner$IF_END2
0;JMP
// label IF_FALSE2:
(Board.getWinner$IF_FALSE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE28
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE28
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL28
D;JLT
@R15
M=0
@END_BOOL28
0;JMP
(X_NEGATIVE_Y_POSITIVE28)
@R15
M=-1
@END_BOOL28
0;JMP
(Y_NEGATIVE28)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE28
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL28
0;JMP
(X_AND_Y_NEGATIVE28)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL28
D;JLT
@R15
M=0
@END_BOOL28
0;JMP
(END_BOOL28)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Board.getWinner$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Board.getWinner$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Board.getWinner$IF_TRUE3)
// C_PUSH static 6:
@Board.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(Board.getWinner$IF_FALSE3)
// label IF_END2:
(Board.getWinner$IF_END2)
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Board.getWinner:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.drawSelected:
(Board.drawSelected)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 2:
@Board.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drawSelected$ret.64
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drawSelected$ret.64)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 3:
@Board.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drawSelected$ret.65
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drawSelected$ret.65)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.setColor:
@Board.drawSelected$ret.66
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.drawSelected$ret.66)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drawSelected$ret.67
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drawSelected$ret.67)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawLine:
@Board.drawSelected$ret.68
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drawSelected$ret.68)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drawSelected$ret.69
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drawSelected$ret.69)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drawSelected$ret.70
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drawSelected$ret.70)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.drawSelected:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.moveSelected:
(Board.moveSelected)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.drawSelected:
@Board.moveSelected$ret.71
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.drawSelected
0;JMP
(Board.moveSelected$ret.71)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 8:
@Board.8
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL29
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL29)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE30
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE30
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL30
D;JGT
@R15
M=0
@END_BOOL30
0;JMP
(X_NEGATIVE_Y_POSITIVE30)
@R15
M=0
@END_BOOL30
0;JMP
(Y_NEGATIVE30)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE30
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL30
0;JMP
(X_AND_Y_NEGATIVE30)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL30
D;JGT
@R15
M=0
@END_BOOL30
0;JMP
(END_BOOL30)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.moveSelected$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.moveSelected$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.moveSelected$IF_TRUE0)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Board.moveSelected$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 9:
@Board.9
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL31
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL31)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE32
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE32
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL32
D;JLT
@R15
M=0
@END_BOOL32
0;JMP
(X_NEGATIVE_Y_POSITIVE32)
@R15
M=-1
@END_BOOL32
0;JMP
(Y_NEGATIVE32)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE32
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL32
0;JMP
(X_AND_Y_NEGATIVE32)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL32
D;JLT
@R15
M=0
@END_BOOL32
0;JMP
(END_BOOL32)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Board.moveSelected$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Board.moveSelected$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Board.moveSelected$IF_TRUE1)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Board.moveSelected$IF_FALSE1)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 10:
@Board.10
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL33
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL33)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE34
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE34
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL34
D;JGT
@R15
M=0
@END_BOOL34
0;JMP
(X_NEGATIVE_Y_POSITIVE34)
@R15
M=0
@END_BOOL34
0;JMP
(Y_NEGATIVE34)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE34
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL34
0;JMP
(X_AND_Y_NEGATIVE34)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL34
D;JGT
@R15
M=0
@END_BOOL34
0;JMP
(END_BOOL34)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Board.moveSelected$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Board.moveSelected$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Board.moveSelected$IF_TRUE2)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Board.moveSelected$IF_FALSE2)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 11:
@Board.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL35
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL35)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE36
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE36
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL36
D;JLT
@R15
M=0
@END_BOOL36
0;JMP
(X_NEGATIVE_Y_POSITIVE36)
@R15
M=-1
@END_BOOL36
0;JMP
(Y_NEGATIVE36)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE36
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL36
0;JMP
(X_AND_Y_NEGATIVE36)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL36
D;JLT
@R15
M=0
@END_BOOL36
0;JMP
(END_BOOL36)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Board.moveSelected$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Board.moveSelected$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Board.moveSelected$IF_TRUE3)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(Board.moveSelected$IF_FALSE3)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Board.drawSelected:
@Board.moveSelected$ret.72
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.drawSelected
0;JMP
(Board.moveSelected$ret.72)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.moveSelected:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.computerMove:
(Board.computerMove)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Board.computerMove$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE37
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE37
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL37
D;JLT
@R15
M=0
@END_BOOL37
0;JMP
(X_NEGATIVE_Y_POSITIVE37)
@R15
M=-1
@END_BOOL37
0;JMP
(Y_NEGATIVE37)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE37
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL37
0;JMP
(X_AND_Y_NEGATIVE37)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL37
D;JLT
@R15
M=0
@END_BOOL37
0;JMP
(END_BOOL37)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Board.computerMove$WHILE_END0
D;JNE
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Board.computerMove$WHILE_EXP1)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE38
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE38
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL38
D;JLT
@R15
M=0
@END_BOOL38
0;JMP
(X_NEGATIVE_Y_POSITIVE38)
@R15
M=-1
@END_BOOL38
0;JMP
(Y_NEGATIVE38)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE38
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL38
0;JMP
(X_AND_Y_NEGATIVE38)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL38
D;JLT
@R15
M=0
@END_BOOL38
0;JMP
(END_BOOL38)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Board.computerMove$WHILE_END1
D;JNE
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Board.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.reverse:
@Board.computerMove$ret.73
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@10
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverse
0;JMP
(Board.computerMove$ret.73)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE39
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE39
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL39
D;JGT
@R15
M=0
@END_BOOL39
0;JMP
(X_NEGATIVE_Y_POSITIVE39)
@R15
M=0
@END_BOOL39
0;JMP
(Y_NEGATIVE39)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE39
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL39
0;JMP
(X_AND_Y_NEGATIVE39)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL39
D;JGT
@R15
M=0
@END_BOOL39
0;JMP
(END_BOOL39)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.computerMove$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.computerMove$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.computerMove$IF_TRUE0)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Board.computerMove$IF_FALSE0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Board.computerMove$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Board.computerMove$WHILE_END1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Board.computerMove$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Board.computerMove$WHILE_END0)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Board.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Board.reverse:
@Board.computerMove$ret.74
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@10
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverse
0;JMP
(Board.computerMove$ret.74)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.computerMove:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.dispose:
(Board.dispose)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Board.dispose$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE40
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE40
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL40
D;JLT
@R15
M=0
@END_BOOL40
0;JMP
(X_NEGATIVE_Y_POSITIVE40)
@R15
M=-1
@END_BOOL40
0;JMP
(Y_NEGATIVE40)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE40
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL40
0;JMP
(X_AND_Y_NEGATIVE40)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL40
D;JLT
@R15
M=0
@END_BOOL40
0;JMP
(END_BOOL40)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Board.dispose$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Array.dispose:
@Board.dispose$ret.75
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(Board.dispose$ret.75)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Board.dispose$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Board.dispose$WHILE_END0)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Array.dispose:
@Board.dispose$ret.76
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(Board.dispose$ret.76)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc:
@Board.dispose$ret.77
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Board.dispose$ret.77)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.dispose:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.drwCl:
(Board.drwCl)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE41
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE41
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL41
D;JGT
@R15
M=0
@END_BOOL41
0;JMP
(X_NEGATIVE_Y_POSITIVE41)
@R15
M=0
@END_BOOL41
0;JMP
(Y_NEGATIVE41)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE41
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL41
0;JMP
(X_AND_Y_NEGATIVE41)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL41
D;JGT
@R15
M=0
@END_BOOL41
0;JMP
(END_BOOL41)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE42
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE42
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL42
D;JLT
@R15
M=0
@END_BOOL42
0;JMP
(X_NEGATIVE_Y_POSITIVE42)
@R15
M=-1
@END_BOOL42
0;JMP
(Y_NEGATIVE42)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE42
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL42
0;JMP
(X_AND_Y_NEGATIVE42)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL42
D;JLT
@R15
M=0
@END_BOOL42
0;JMP
(END_BOOL42)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE43
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE43
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL43
D;JGT
@R15
M=0
@END_BOOL43
0;JMP
(X_NEGATIVE_Y_POSITIVE43)
@R15
M=0
@END_BOOL43
0;JMP
(Y_NEGATIVE43)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE43
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL43
0;JMP
(X_AND_Y_NEGATIVE43)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL43
D;JGT
@R15
M=0
@END_BOOL43
0;JMP
(END_BOOL43)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE44
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE44
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL44
D;JLT
@R15
M=0
@END_BOOL44
0;JMP
(X_NEGATIVE_Y_POSITIVE44)
@R15
M=-1
@END_BOOL44
0;JMP
(Y_NEGATIVE44)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE44
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL44
0;JMP
(X_AND_Y_NEGATIVE44)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL44
D;JLT
@R15
M=0
@END_BOOL44
0;JMP
(END_BOOL44)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Board.drwCl$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Board.drwCl$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Board.drwCl$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.setColor:
@Board.drwCl$ret.78
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.drwCl$ret.78)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.79
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.79)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.80
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.80)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.81
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.81)
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.82
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.82)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle:
@Board.drwCl$ret.83
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Board.drwCl$ret.83)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Screen.setColor:
@Board.drwCl$ret.84
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.drwCl$ret.84)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL45
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL45)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Board.drwCl$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Board.drwCl$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Board.drwCl$IF_TRUE1)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.85
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.85)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.86
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.86)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.87
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.87)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.88
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.88)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.89
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.89)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.90
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.90)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.91
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.91)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.92
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.92)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.93
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.93)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.94
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.94)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.95
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.95)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.96
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.96)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.97
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.97)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.98
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.98)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.99
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.99)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.100
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.100)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.101
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.101)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.102
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.102)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.103
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.103)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.104
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.104)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.105
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.105)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.106
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.106)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.107
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.107)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.108
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.108)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.109
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.109)
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.110
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.110)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.111
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.111)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.112
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.112)
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.113
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.113)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.114
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.114)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.115
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.115)
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.116
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.116)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.117
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.117)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.118
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.118)
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.119
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.119)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.120
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.120)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.121
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.121)
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.122
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.122)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.123
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.123)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Board.drwCl$IF_FALSE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL46
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL46)
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Board.drwCl$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Board.drwCl$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Board.drwCl$IF_TRUE2)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.124
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.124)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.125
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.125)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.126
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.126)
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.127
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.127)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drwCl$ret.128
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drwCl$ret.128)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Board.drwCl$IF_FALSE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL47
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL47)
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Board.drwCl$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Board.drwCl$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Board.drwCl$IF_TRUE3)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.129
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.129)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.130
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.130)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.131
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.131)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.132
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.132)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.133
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.133)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.134
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.134)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.135
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.135)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.136
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.136)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.137
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.137)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.138
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.138)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.139
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.139)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.140
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.140)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.141
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.141)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.142
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.142)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.143
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.143)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.144
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.144)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.145
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.145)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.146
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.146)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.147
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.147)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.148
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.148)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.149
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.149)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.150
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.150)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.151
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.151)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.152
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.152)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.153
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.153)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.154
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.154)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.155
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.155)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.156
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.156)
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.157
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.157)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.158
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.158)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.159
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.159)
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.160
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.160)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.161
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.161)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.162
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.162)
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.163
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.163)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.164
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.164)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.165
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.165)
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.166
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.166)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.167
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.167)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.168
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.168)
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.169
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.169)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawPixel:
@Board.drwCl$ret.170
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Board.drwCl$ret.170)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.171
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.171)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.172
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.172)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.173
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.173)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.174
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.174)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drwCl$ret.175
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drwCl$ret.175)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(Board.drwCl$IF_FALSE3)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL48
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL48)
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@Board.drwCl$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@Board.drwCl$IF_FALSE4
0;JMP
// label IF_TRUE4:
(Board.drwCl$IF_TRUE4)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.176
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.176)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.177
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.177)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.178
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.178)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.179
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.179)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drwCl$ret.180
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drwCl$ret.180)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.181
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.181)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.182
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.182)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.183
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.183)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.184
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.184)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drwCl$ret.185
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drwCl$ret.185)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.186
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.186)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.187
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.187)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.188
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.188)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.189
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.189)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drwCl$ret.190
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drwCl$ret.190)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.191
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.191)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.192
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.192)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.193
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.193)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.194
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.194)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drwCl$ret.195
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drwCl$ret.195)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.196
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.196)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.197
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.197)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.198
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.198)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.199
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.199)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drwCl$ret.200
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drwCl$ret.200)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.201
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.201)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.202
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.202)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.203
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.203)
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Board.drwCl$ret.204
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Board.drwCl$ret.204)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@Board.drwCl$ret.205
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(Board.drwCl$ret.205)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE4:
(Board.drwCl$IF_FALSE4)
// label IF_FALSE0:
(Board.drwCl$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.drwCl:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Board.drawSn:
(Board.drawSn)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Board.drawSn$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE49
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE49
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL49
D;JLT
@R15
M=0
@END_BOOL49
0;JMP
(X_NEGATIVE_Y_POSITIVE49)
@R15
M=-1
@END_BOOL49
0;JMP
(Y_NEGATIVE49)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE49
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL49
0;JMP
(X_AND_Y_NEGATIVE49)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL49
D;JLT
@R15
M=0
@END_BOOL49
0;JMP
(END_BOOL49)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Board.drawSn$WHILE_END0
D;JNE
// label WHILE_EXP1:
(Board.drawSn$WHILE_EXP1)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE50
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE50
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL50
D;JLT
@R15
M=0
@END_BOOL50
0;JMP
(X_NEGATIVE_Y_POSITIVE50)
@R15
M=-1
@END_BOOL50
0;JMP
(Y_NEGATIVE50)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE50
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL50
0;JMP
(X_AND_Y_NEGATIVE50)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL50
D;JLT
@R15
M=0
@END_BOOL50
0;JMP
(END_BOOL50)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Board.drawSn$WHILE_END1
D;JNE
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Board.drawSn$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Board.drawSn$WHILE_END1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Board.drawSn$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Board.drawSn$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Board.drawSn:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Keyboard.init:
(Keyboard.init)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Keyboard.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Keyboard.keyPressed:
(Keyboard.keyPressed)
// C_PUSH constant 24576:
@24576
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.peek:
@Keyboard.keyPressed$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Keyboard.keyPressed$ret.1)
// return Keyboard.keyPressed:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Keyboard.readChar:
(Keyboard.readChar)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.printChar:
@Keyboard.readChar$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Keyboard.readChar$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL51
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL51)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE52
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE52
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL52
D;JGT
@R15
M=0
@END_BOOL52
0;JMP
(X_NEGATIVE_Y_POSITIVE52)
@R15
M=0
@END_BOOL52
0;JMP
(Y_NEGATIVE52)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE52
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL52
0;JMP
(X_AND_Y_NEGATIVE52)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL52
D;JGT
@R15
M=0
@END_BOOL52
0;JMP
(END_BOOL52)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Keyboard.readChar$WHILE_END0
D;JNE
// call Keyboard.keyPressed:
@Keyboard.readChar$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.readChar$ret.3)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE53
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE53
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL53
D;JGT
@R15
M=0
@END_BOOL53
0;JMP
(X_NEGATIVE_Y_POSITIVE53)
@R15
M=0
@END_BOOL53
0;JMP
(Y_NEGATIVE53)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE53
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL53
0;JMP
(X_AND_Y_NEGATIVE53)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL53
D;JGT
@R15
M=0
@END_BOOL53
0;JMP
(END_BOOL53)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Keyboard.readChar$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Keyboard.readChar$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Keyboard.readChar$IF_TRUE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Keyboard.readChar$IF_FALSE0)
// goto WHILE_EXP0:
@Keyboard.readChar$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Keyboard.readChar$WHILE_END0)
// call String.backSpace:
@Keyboard.readChar$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Keyboard.readChar$ret.4)
// call Output.printChar:
@Keyboard.readChar$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printChar:
@Keyboard.readChar$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Keyboard.readChar:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Keyboard.readLine:
(Keyboard.readLine)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 80:
@80
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Keyboard.readLine$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Keyboard.readLine$ret.7)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Keyboard.readLine$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Keyboard.readLine$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call String.newLine:
@Keyboard.readLine$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.newLine
0;JMP
(Keyboard.readLine$ret.9)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call String.backSpace:
@Keyboard.readLine$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Keyboard.readLine$ret.10)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Keyboard.readLine$WHILE_EXP0)
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Keyboard.readLine$WHILE_END0
D;JNE
// call Keyboard.readChar:
@Keyboard.readLine$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.readChar
0;JMP
(Keyboard.readLine$ret.11)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL54
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL54)
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Keyboard.readLine$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Keyboard.readLine$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Keyboard.readLine$IF_TRUE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL55
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL55)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Keyboard.readLine$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Keyboard.readLine$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Keyboard.readLine$IF_TRUE1)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.eraseLastChar:
@Keyboard.readLine$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.eraseLastChar
0;JMP
(Keyboard.readLine$ret.12)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Keyboard.readLine$IF_END1
0;JMP
// label IF_FALSE1:
(Keyboard.readLine$IF_FALSE1)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Keyboard.readLine$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Keyboard.readLine$ret.13)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Keyboard.readLine$IF_END1)
// label IF_FALSE0:
(Keyboard.readLine$IF_FALSE0)
// goto WHILE_EXP0:
@Keyboard.readLine$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Keyboard.readLine$WHILE_END0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Keyboard.readLine:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Keyboard.readInt:
(Keyboard.readInt)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Keyboard.readLine:
@Keyboard.readInt$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.readLine
0;JMP
(Keyboard.readInt$ret.14)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.intValue:
@Keyboard.readInt$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.intValue
0;JMP
(Keyboard.readInt$ret.15)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Keyboard.readInt$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Keyboard.readInt$ret.16)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Keyboard.readInt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Main.main:
(Main.main)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 0:
@Main.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 0:
@Main.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 5:
@Main.5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 6:
@Main.6
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 1:
@Main.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 2:
@Main.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 4:
@Main.4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 3:
@Main.3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 23:
@23
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Main.main$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Main.main$ret.1)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.2)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.3)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.4)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.5)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.6)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.7)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.8)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.9)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.10)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.11)
// C_PUSH constant 118:
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.12)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.13)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.14)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.15)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.16)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.17)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.18)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.19)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.20)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.21)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.22)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.23)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.24)
// C_POP static 7:
@Main.7
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Main.main$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Main.main$ret.25)
// C_PUSH constant 89:
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.26)
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.27)
// C_PUSH constant 85:
@85
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.28)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.29)
// C_PUSH constant 87:
@87
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.30)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.31)
// C_PUSH constant 78:
@78
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.32)
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.33)
// C_POP static 8:
@Main.8
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Main.main$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Main.main$ret.34)
// C_PUSH constant 89:
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.35)
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.36)
// C_PUSH constant 85:
@85
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.37)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.38)
// C_PUSH constant 76:
@76
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.39)
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.40)
// C_PUSH constant 83:
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.41)
// C_PUSH constant 69:
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.42)
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.43)
// C_POP static 9:
@Main.9
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Main.main$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Main.main$ret.44)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.45)
// C_PUSH constant 84:
@84
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.46)
// C_PUSH constant 39:
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.47)
// C_PUSH constant 83:
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.48)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.49)
// C_PUSH constant 65:
@65
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.50
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.50)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.51
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.51)
// C_PUSH constant 84:
@84
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.52
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.52)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.53
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.53)
// C_PUSH constant 69:
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.54
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.54)
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.main$ret.55
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.main$ret.55)
// C_POP static 10:
@Main.10
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 0:
@Main.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 128:
@128
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Main.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Board.new:
@Main.main$ret.56
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.new
0;JMP
(Main.main$ret.56)
// C_POP static 11:
@Main.11
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Main.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Main.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Main.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 2:
@Main.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 3:
@Main.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 4:
@Main.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setConsts:
@Main.main$ret.57
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setConsts
0;JMP
(Main.main$ret.57)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.initGrid:
@Main.main$ret.58
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.initGrid
0;JMP
(Main.main$ret.58)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 5:
@Main.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Main.main$WHILE_EXP0)
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.isGameOver:
@Main.main$ret.59
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.isGameOver
0;JMP
(Main.main$ret.59)
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Main.main$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Main.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL56
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL56)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Main.main$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Main.main$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Main.main$IF_TRUE0)
// call Main.playerMove:
@Main.main$ret.60
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.playerMove
0;JMP
(Main.main$ret.60)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Main.main$IF_END0
0;JMP
// label IF_FALSE0:
(Main.main$IF_FALSE0)
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.computerMove:
@Main.main$ret.61
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.computerMove
0;JMP
(Main.main$ret.61)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Main.main$IF_END0)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Main.main$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Main.main$WHILE_END0)
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.getWinner:
@Main.main$ret.62
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.getWinner
0;JMP
(Main.main$ret.62)
// call Main.printGameOver:
@Main.main$ret.63
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.printGameOver
0;JMP
(Main.main$ret.63)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.dispose:
@Main.main$ret.64
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.dispose
0;JMP
(Main.main$ret.64)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 7:
@Main.7
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Main.main$ret.65
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Main.main$ret.65)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 8:
@Main.8
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Main.main$ret.66
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Main.main$ret.66)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 9:
@Main.9
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Main.main$ret.67
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Main.main$ret.67)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 10:
@Main.10
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Main.main$ret.68
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Main.main$ret.68)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Main.main:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Main.playerMove:
(Main.playerMove)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Main.playerMove$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Main.playerMove$WHILE_END0
D;JNE
// call Keyboard.keyPressed:
@Main.playerMove$ret.69
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Main.playerMove$ret.69)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Main.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL57
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL57)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Main.playerMove$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Main.playerMove$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Main.playerMove$IF_TRUE0)
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Main.playerMove$ret.70
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.playerMove$ret.70)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Main.playerMove$ret.71
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.playerMove$ret.71)
// call Sys.wait:
@Main.playerMove$ret.72
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Main.playerMove$ret.72)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.getSelectedRow:
@Main.playerMove$ret.73
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.getSelectedRow
0;JMP
(Main.playerMove$ret.73)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.getSelectedCol:
@Main.playerMove$ret.74
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.getSelectedCol
0;JMP
(Main.playerMove$ret.74)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Main.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// call Board.reverse:
@Main.playerMove$ret.75
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@10
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.reverse
0;JMP
(Main.playerMove$ret.75)
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE58
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE58
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL58
D;JGT
@R15
M=0
@END_BOOL58
0;JMP
(X_NEGATIVE_Y_POSITIVE58)
@R15
M=0
@END_BOOL58
0;JMP
(Y_NEGATIVE58)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE58
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL58
0;JMP
(X_AND_Y_NEGATIVE58)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL58
D;JGT
@R15
M=0
@END_BOOL58
0;JMP
(END_BOOL58)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Main.playerMove$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Main.playerMove$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Main.playerMove$IF_TRUE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Main.playerMove$IF_END1
0;JMP
// label IF_FALSE1:
(Main.playerMove$IF_FALSE1)
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 36:
@36
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.moveCursor:
@Main.playerMove$ret.76
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(Main.playerMove$ret.76)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 7:
@Main.7
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Main.playerMove$ret.77
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Main.playerMove$ret.77)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Main.playerMove$IF_END1)
// goto IF_END0:
@Main.playerMove$IF_END0
0;JMP
// label IF_FALSE0:
(Main.playerMove$IF_FALSE0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Main.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL59
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL59)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 2:
@Main.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL60
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL60)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 3:
@Main.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL61
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL61)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 4:
@Main.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL62
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL62)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Main.playerMove$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Main.playerMove$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Main.playerMove$IF_TRUE2)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Main.playerMove$ret.78
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.playerMove$ret.78)
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Sys.wait:
@Main.playerMove$ret.79
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Main.playerMove$ret.79)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.moveSelected:
@Main.playerMove$ret.80
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.moveSelected
0;JMP
(Main.playerMove$ret.80)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Main.playerMove$IF_FALSE2)
// label IF_END0:
(Main.playerMove$IF_END0)
// goto WHILE_EXP0:
@Main.playerMove$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Main.playerMove$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.setColor:
@Main.playerMove$ret.81
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Main.playerMove$ret.81)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 288:
@288
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 490:
@490
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 125:
@125
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawRectangle:
@Main.playerMove$ret.82
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Main.playerMove$ret.82)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Main.playerMove:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Main.printGameOver:
(Main.printGameOver)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Main.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL63
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL63)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Main.printGameOver$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Main.printGameOver$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Main.printGameOver$IF_TRUE0)
// C_PUSH static 8:
@Main.8
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Main.printGameOver$IF_END0
0;JMP
// label IF_FALSE0:
(Main.printGameOver$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Main.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL64
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL64)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Main.printGameOver$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Main.printGameOver$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Main.printGameOver$IF_TRUE1)
// C_PUSH static 9:
@Main.9
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Main.printGameOver$IF_END1
0;JMP
// label IF_FALSE1:
(Main.printGameOver$IF_FALSE1)
// C_PUSH static 10:
@Main.10
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Main.printGameOver$IF_END1)
// label IF_END0:
(Main.printGameOver$IF_END0)
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 42:
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.moveCursor:
@Main.printGameOver$ret.83
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(Main.printGameOver$ret.83)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Main.printGameOver$ret.84
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Main.printGameOver$ret.84)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Main.printGameOver$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Main.printGameOver$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Main.printGameOver$IF_TRUE2)
// C_PUSH constant 1900:
@1900
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.sqrt:
@Main.printGameOver$ret.85
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.sqrt
0;JMP
(Main.printGameOver$ret.85)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.peek:
@Main.printGameOver$ret.86
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Main.printGameOver$ret.86)
// C_POP static 0:
@Main.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Main.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.poke:
@Main.printGameOver$ret.87
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.printGameOver$ret.87)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 0:
@Main.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 0:
@Main.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 5:
@Main.5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 6:
@Main.6
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 1:
@Main.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 2:
@Main.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 4:
@Main.4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 3:
@Main.3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 23:
@23
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Main.printGameOver$ret.88
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Main.printGameOver$ret.88)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.89
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.89)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.90
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.90)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.91
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.91)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.92
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.92)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.93
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.93)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.94
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.94)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.95
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.95)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.96
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.96)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.97
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.97)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.98
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.98)
// C_PUSH constant 118:
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.99
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.99)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.100
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.100)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.101
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.101)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.102
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.102)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.103
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.103)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.104
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.104)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.105
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.105)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.106
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.106)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.107
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.107)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.108
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.108)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.109
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.109)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.110
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.110)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.111
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.111)
// C_POP static 7:
@Main.7
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Main.printGameOver$ret.112
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Main.printGameOver$ret.112)
// C_PUSH constant 89:
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.113
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.113)
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.114
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.114)
// C_PUSH constant 85:
@85
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.115
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.115)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.116
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.116)
// C_PUSH constant 87:
@87
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.117
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.117)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.118
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.118)
// C_PUSH constant 78:
@78
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.119
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.119)
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.120
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.120)
// C_POP static 8:
@Main.8
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Main.printGameOver$ret.121
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Main.printGameOver$ret.121)
// C_PUSH constant 89:
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.122
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.122)
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.123
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.123)
// C_PUSH constant 85:
@85
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.124
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.124)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.125
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.125)
// C_PUSH constant 76:
@76
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.126
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.126)
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.127
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.127)
// C_PUSH constant 83:
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.128
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.128)
// C_PUSH constant 69:
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.129
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.129)
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.130
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.130)
// C_POP static 9:
@Main.9
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Main.printGameOver$ret.131
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Main.printGameOver$ret.131)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.132
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.132)
// C_PUSH constant 84:
@84
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.133
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.133)
// C_PUSH constant 39:
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.134
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.134)
// C_PUSH constant 83:
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.135
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.135)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.136
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.136)
// C_PUSH constant 65:
@65
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.137
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.137)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.138
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.138)
// C_PUSH constant 84:
@84
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.139
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.139)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.140
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.140)
// C_PUSH constant 69:
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.141
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.141)
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Main.printGameOver$ret.142
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Main.printGameOver$ret.142)
// C_POP static 10:
@Main.10
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 0:
@Main.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 128:
@128
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Main.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Board.new:
@Main.printGameOver$ret.143
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.new
0;JMP
(Main.printGameOver$ret.143)
// C_POP static 11:
@Main.11
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Main.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Main.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Main.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 2:
@Main.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 3:
@Main.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 4:
@Main.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.setConsts:
@Main.printGameOver$ret.144
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@12
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.setConsts
0;JMP
(Main.printGameOver$ret.144)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.initGrid:
@Main.printGameOver$ret.145
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.initGrid
0;JMP
(Main.printGameOver$ret.145)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Main.printGameOver$WHILE_EXP0)
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Board.isGameOver:
@Main.printGameOver$ret.146
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.isGameOver
0;JMP
(Main.printGameOver$ret.146)
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Main.printGameOver$WHILE_END0
D;JNE
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Main.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL65
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL65)
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Main.printGameOver$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Main.printGameOver$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Main.printGameOver$IF_TRUE3)
// call Main.playerMove:
@Main.printGameOver$ret.147
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.playerMove
0;JMP
(Main.printGameOver$ret.147)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3:
@Main.printGameOver$IF_END3
0;JMP
// label IF_FALSE3:
(Main.printGameOver$IF_FALSE3)
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.computerMove:
@Main.printGameOver$ret.148
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.computerMove
0;JMP
(Main.printGameOver$ret.148)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END3:
(Main.printGameOver$IF_END3)
// goto WHILE_EXP0:
@Main.printGameOver$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Main.printGameOver$WHILE_END0)
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.getWinner:
@Main.printGameOver$ret.149
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.getWinner
0;JMP
(Main.printGameOver$ret.149)
// call Main.printGameOver:
@Main.printGameOver$ret.150
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.printGameOver
0;JMP
(Main.printGameOver$ret.150)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 11:
@Main.11
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Board.dispose:
@Main.printGameOver$ret.151
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.dispose
0;JMP
(Main.printGameOver$ret.151)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 7:
@Main.7
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Main.printGameOver$ret.152
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Main.printGameOver$ret.152)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 8:
@Main.8
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Main.printGameOver$ret.153
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Main.printGameOver$ret.153)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 9:
@Main.9
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Main.printGameOver$ret.154
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Main.printGameOver$ret.154)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 10:
@Main.10
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Main.printGameOver$ret.155
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Main.printGameOver$ret.155)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Main.printGameOver$IF_FALSE2)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Main.printGameOver:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.init:
(Math.init)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Math.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init$ret.1)
// C_POP static 1:
@Math.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Math.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init$ret.2)
// C_POP static 0:
@Math.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Math.init$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE66
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE66
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL66
D;JLT
@R15
M=0
@END_BOOL66
0;JMP
(X_NEGATIVE_Y_POSITIVE66)
@R15
M=-1
@END_BOOL66
0;JMP
(Y_NEGATIVE66)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE66
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL66
0;JMP
(X_AND_Y_NEGATIVE66)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL66
D;JLT
@R15
M=0
@END_BOOL66
0;JMP
(END_BOOL66)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Math.init$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Math.init$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Math.init$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Math.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.abs:
(Math.abs)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE67
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE67
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL67
D;JLT
@R15
M=0
@END_BOOL67
0;JMP
(X_NEGATIVE_Y_POSITIVE67)
@R15
M=-1
@END_BOOL67
0;JMP
(Y_NEGATIVE67)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE67
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL67
0;JMP
(X_AND_Y_NEGATIVE67)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL67
D;JLT
@R15
M=0
@END_BOOL67
0;JMP
(END_BOOL67)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.abs$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.abs$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.abs$IF_TRUE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.abs$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.abs:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.multiply:
(Math.multiply)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE68
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE68
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL68
D;JLT
@R15
M=0
@END_BOOL68
0;JMP
(X_NEGATIVE_Y_POSITIVE68)
@R15
M=-1
@END_BOOL68
0;JMP
(Y_NEGATIVE68)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE68
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL68
0;JMP
(X_AND_Y_NEGATIVE68)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL68
D;JLT
@R15
M=0
@END_BOOL68
0;JMP
(END_BOOL68)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE69
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE69
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL69
D;JGT
@R15
M=0
@END_BOOL69
0;JMP
(X_NEGATIVE_Y_POSITIVE69)
@R15
M=0
@END_BOOL69
0;JMP
(Y_NEGATIVE69)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE69
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL69
0;JMP
(X_AND_Y_NEGATIVE69)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL69
D;JGT
@R15
M=0
@END_BOOL69
0;JMP
(END_BOOL69)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE70
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE70
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL70
D;JGT
@R15
M=0
@END_BOOL70
0;JMP
(X_NEGATIVE_Y_POSITIVE70)
@R15
M=0
@END_BOOL70
0;JMP
(Y_NEGATIVE70)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE70
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL70
0;JMP
(X_AND_Y_NEGATIVE70)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL70
D;JGT
@R15
M=0
@END_BOOL70
0;JMP
(END_BOOL70)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE71
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE71
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL71
D;JLT
@R15
M=0
@END_BOOL71
0;JMP
(X_NEGATIVE_Y_POSITIVE71)
@R15
M=-1
@END_BOOL71
0;JMP
(Y_NEGATIVE71)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE71
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL71
0;JMP
(X_AND_Y_NEGATIVE71)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL71
D;JLT
@R15
M=0
@END_BOOL71
0;JMP
(END_BOOL71)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs:
@Math.multiply$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply$ret.3)
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs:
@Math.multiply$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply$ret.4)
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE72
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE72
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL72
D;JLT
@R15
M=0
@END_BOOL72
0;JMP
(X_NEGATIVE_Y_POSITIVE72)
@R15
M=-1
@END_BOOL72
0;JMP
(Y_NEGATIVE72)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE72
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL72
0;JMP
(X_AND_Y_NEGATIVE72)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL72
D;JLT
@R15
M=0
@END_BOOL72
0;JMP
(END_BOOL72)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.multiply$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.multiply$IF_TRUE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.multiply$IF_FALSE0)
// label WHILE_EXP0:
(Math.multiply$WHILE_EXP0)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE73
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE73
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL73
D;JLT
@R15
M=0
@END_BOOL73
0;JMP
(X_NEGATIVE_Y_POSITIVE73)
@R15
M=-1
@END_BOOL73
0;JMP
(Y_NEGATIVE73)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE73
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL73
0;JMP
(X_AND_Y_NEGATIVE73)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL73
D;JLT
@R15
M=0
@END_BOOL73
0;JMP
(END_BOOL73)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Math.multiply$WHILE_END0
D;JNE
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE74
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE74
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL74
D;JGT
@R15
M=0
@END_BOOL74
0;JMP
(X_NEGATIVE_Y_POSITIVE74)
@R15
M=0
@END_BOOL74
0;JMP
(Y_NEGATIVE74)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE74
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL74
0;JMP
(X_AND_Y_NEGATIVE74)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL74
D;JGT
@R15
M=0
@END_BOOL74
0;JMP
(END_BOOL74)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Math.multiply$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Math.multiply$IF_TRUE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Math.multiply$IF_FALSE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Math.multiply$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Math.multiply$WHILE_END0)
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Math.multiply$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Math.multiply$IF_TRUE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Math.multiply$IF_FALSE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.multiply:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.divide:
(Math.divide)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL75
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL75)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.divide$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.divide$IF_TRUE0)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Math.divide$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.divide$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.divide$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE76
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE76
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL76
D;JLT
@R15
M=0
@END_BOOL76
0;JMP
(X_NEGATIVE_Y_POSITIVE76)
@R15
M=-1
@END_BOOL76
0;JMP
(Y_NEGATIVE76)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE76
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL76
0;JMP
(X_AND_Y_NEGATIVE76)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL76
D;JLT
@R15
M=0
@END_BOOL76
0;JMP
(END_BOOL76)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE77
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE77
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL77
D;JGT
@R15
M=0
@END_BOOL77
0;JMP
(X_NEGATIVE_Y_POSITIVE77)
@R15
M=0
@END_BOOL77
0;JMP
(Y_NEGATIVE77)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE77
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL77
0;JMP
(X_AND_Y_NEGATIVE77)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL77
D;JGT
@R15
M=0
@END_BOOL77
0;JMP
(END_BOOL77)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE78
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE78
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL78
D;JGT
@R15
M=0
@END_BOOL78
0;JMP
(X_NEGATIVE_Y_POSITIVE78)
@R15
M=0
@END_BOOL78
0;JMP
(Y_NEGATIVE78)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE78
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL78
0;JMP
(X_AND_Y_NEGATIVE78)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL78
D;JGT
@R15
M=0
@END_BOOL78
0;JMP
(END_BOOL78)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE79
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE79
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL79
D;JLT
@R15
M=0
@END_BOOL79
0;JMP
(X_NEGATIVE_Y_POSITIVE79)
@R15
M=-1
@END_BOOL79
0;JMP
(Y_NEGATIVE79)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE79
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL79
0;JMP
(X_AND_Y_NEGATIVE79)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL79
D;JLT
@R15
M=0
@END_BOOL79
0;JMP
(END_BOOL79)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs:
@Math.divide$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.abs:
@Math.divide$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide$ret.7)
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Math.divide$WHILE_EXP0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Math.divide$WHILE_END0
D;JNE
// C_PUSH constant 32767:
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE80
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE80
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL80
D;JLT
@R15
M=0
@END_BOOL80
0;JMP
(X_NEGATIVE_Y_POSITIVE80)
@R15
M=-1
@END_BOOL80
0;JMP
(Y_NEGATIVE80)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE80
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL80
0;JMP
(X_AND_Y_NEGATIVE80)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL80
D;JLT
@R15
M=0
@END_BOOL80
0;JMP
(END_BOOL80)
@R15
D=M
@SP
A=M-1
M=D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Math.divide$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Math.divide$IF_TRUE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE81
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE81
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL81
D;JGT
@R15
M=0
@END_BOOL81
0;JMP
(X_NEGATIVE_Y_POSITIVE81)
@R15
M=0
@END_BOOL81
0;JMP
(Y_NEGATIVE81)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE81
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL81
0;JMP
(X_AND_Y_NEGATIVE81)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL81
D;JGT
@R15
M=0
@END_BOOL81
0;JMP
(END_BOOL81)
@R15
D=M
@SP
A=M-1
M=D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Math.divide$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Math.divide$IF_TRUE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Math.divide$IF_FALSE2)
// label IF_FALSE1:
(Math.divide$IF_FALSE1)
// goto WHILE_EXP0:
@Math.divide$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Math.divide$WHILE_END0)
// label WHILE_EXP1:
(Math.divide$WHILE_EXP1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE82
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE82
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL82
D;JGT
@R15
M=0
@END_BOOL82
0;JMP
(X_NEGATIVE_Y_POSITIVE82)
@R15
M=0
@END_BOOL82
0;JMP
(Y_NEGATIVE82)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE82
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL82
0;JMP
(X_AND_Y_NEGATIVE82)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL82
D;JGT
@R15
M=0
@END_BOOL82
0;JMP
(END_BOOL82)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Math.divide$WHILE_END1
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE83
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE83
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL83
D;JGT
@R15
M=0
@END_BOOL83
0;JMP
(X_NEGATIVE_Y_POSITIVE83)
@R15
M=0
@END_BOOL83
0;JMP
(Y_NEGATIVE83)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE83
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL83
0;JMP
(X_AND_Y_NEGATIVE83)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL83
D;JGT
@R15
M=0
@END_BOOL83
0;JMP
(END_BOOL83)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Math.divide$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Math.divide$IF_TRUE3)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(Math.divide$IF_FALSE3)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Math.divide$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Math.divide$WHILE_END1)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@Math.divide$IF_FALSE4
0;JMP
// label IF_TRUE4:
(Math.divide$IF_TRUE4)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE4:
(Math.divide$IF_FALSE4)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.divide:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.sqrt:
(Math.sqrt)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE84
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE84
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL84
D;JLT
@R15
M=0
@END_BOOL84
0;JMP
(X_NEGATIVE_Y_POSITIVE84)
@R15
M=-1
@END_BOOL84
0;JMP
(Y_NEGATIVE84)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE84
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL84
0;JMP
(X_AND_Y_NEGATIVE84)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL84
D;JLT
@R15
M=0
@END_BOOL84
0;JMP
(END_BOOL84)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.sqrt$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.sqrt$IF_TRUE0)
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Math.sqrt$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.sqrt$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.sqrt$IF_FALSE0)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Math.sqrt$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE85
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE85
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL85
D;JGT
@R15
M=0
@END_BOOL85
0;JMP
(X_NEGATIVE_Y_POSITIVE85)
@R15
M=0
@END_BOOL85
0;JMP
(Y_NEGATIVE85)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE85
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL85
0;JMP
(X_AND_Y_NEGATIVE85)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL85
D;JGT
@R15
M=0
@END_BOOL85
0;JMP
(END_BOOL85)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Math.sqrt$WHILE_END0
D;JNE
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Math.sqrt$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.sqrt$ret.9)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE86
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE86
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL86
D;JGT
@R15
M=0
@END_BOOL86
0;JMP
(X_NEGATIVE_Y_POSITIVE86)
@R15
M=0
@END_BOOL86
0;JMP
(Y_NEGATIVE86)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE86
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL86
0;JMP
(X_AND_Y_NEGATIVE86)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL86
D;JGT
@R15
M=0
@END_BOOL86
0;JMP
(END_BOOL86)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE87
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE87
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL87
D;JLT
@R15
M=0
@END_BOOL87
0;JMP
(X_NEGATIVE_Y_POSITIVE87)
@R15
M=-1
@END_BOOL87
0;JMP
(Y_NEGATIVE87)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE87
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL87
0;JMP
(X_AND_Y_NEGATIVE87)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL87
D;JLT
@R15
M=0
@END_BOOL87
0;JMP
(END_BOOL87)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Math.sqrt$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Math.sqrt$IF_TRUE1)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Math.sqrt$IF_FALSE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Math.sqrt$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Math.sqrt$WHILE_END0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.sqrt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.max:
(Math.max)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE88
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE88
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL88
D;JGT
@R15
M=0
@END_BOOL88
0;JMP
(X_NEGATIVE_Y_POSITIVE88)
@R15
M=0
@END_BOOL88
0;JMP
(Y_NEGATIVE88)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE88
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL88
0;JMP
(X_AND_Y_NEGATIVE88)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL88
D;JGT
@R15
M=0
@END_BOOL88
0;JMP
(END_BOOL88)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.max$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.max$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.max$IF_TRUE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.max$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.max:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Math.min:
(Math.min)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE89
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE89
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL89
D;JLT
@R15
M=0
@END_BOOL89
0;JMP
(X_NEGATIVE_Y_POSITIVE89)
@R15
M=-1
@END_BOOL89
0;JMP
(Y_NEGATIVE89)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE89
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL89
0;JMP
(X_AND_Y_NEGATIVE89)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL89
D;JLT
@R15
M=0
@END_BOOL89
0;JMP
(END_BOOL89)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Math.min$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Math.min$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Math.min$IF_TRUE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Math.min$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Math.min:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Memory.init:
(Memory.init)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Memory.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2048:
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 14334:
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2049:
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2050:
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Memory.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Memory.peek:
(Memory.peek)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Memory.peek:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Memory.poke:
(Memory.poke)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Memory.poke:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Memory.alloc:
(Memory.alloc)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE90
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE90
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL90
D;JLT
@R15
M=0
@END_BOOL90
0;JMP
(X_NEGATIVE_Y_POSITIVE90)
@R15
M=-1
@END_BOOL90
0;JMP
(Y_NEGATIVE90)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE90
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL90
0;JMP
(X_AND_Y_NEGATIVE90)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL90
D;JLT
@R15
M=0
@END_BOOL90
0;JMP
(END_BOOL90)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Memory.alloc$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Memory.alloc$IF_TRUE0)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Memory.alloc$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc$ret.1)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Memory.alloc$IF_FALSE0)
// C_PUSH constant 2048:
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Memory.alloc$WHILE_EXP0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE91
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE91
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL91
D;JLT
@R15
M=0
@END_BOOL91
0;JMP
(X_NEGATIVE_Y_POSITIVE91)
@R15
M=-1
@END_BOOL91
0;JMP
(Y_NEGATIVE91)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE91
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL91
0;JMP
(X_AND_Y_NEGATIVE91)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL91
D;JLT
@R15
M=0
@END_BOOL91
0;JMP
(END_BOOL91)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Memory.alloc$WHILE_END0
D;JNE
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Memory.alloc$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Memory.alloc$WHILE_END0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16379:
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE92
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE92
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL92
D;JGT
@R15
M=0
@END_BOOL92
0;JMP
(X_NEGATIVE_Y_POSITIVE92)
@R15
M=0
@END_BOOL92
0;JMP
(Y_NEGATIVE92)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE92
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL92
0;JMP
(X_AND_Y_NEGATIVE92)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL92
D;JGT
@R15
M=0
@END_BOOL92
0;JMP
(END_BOOL92)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Memory.alloc$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Memory.alloc$IF_TRUE1)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Memory.alloc$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Memory.alloc$IF_FALSE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE93
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE93
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL93
D;JGT
@R15
M=0
@END_BOOL93
0;JMP
(X_NEGATIVE_Y_POSITIVE93)
@R15
M=0
@END_BOOL93
0;JMP
(Y_NEGATIVE93)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE93
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL93
0;JMP
(X_AND_Y_NEGATIVE93)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL93
D;JGT
@R15
M=0
@END_BOOL93
0;JMP
(END_BOOL93)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Memory.alloc$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Memory.alloc$IF_TRUE2)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL94
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL94)
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Memory.alloc$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Memory.alloc$IF_TRUE3)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3:
@Memory.alloc$IF_END3
0;JMP
// label IF_FALSE3:
(Memory.alloc$IF_FALSE3)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END3:
(Memory.alloc$IF_END3)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Memory.alloc$IF_FALSE2)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return Memory.alloc:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Memory.deAlloc:
(Memory.deAlloc)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL95
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL95)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Memory.deAlloc$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Memory.deAlloc$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Memory.deAlloc$IF_END0
0;JMP
// label IF_FALSE0:
(Memory.deAlloc$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL96
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL96)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Memory.deAlloc$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Memory.deAlloc$IF_TRUE1)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Memory.deAlloc$IF_END1
0;JMP
// label IF_FALSE1:
(Memory.deAlloc$IF_FALSE1)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Memory.deAlloc$IF_END1)
// label IF_END0:
(Memory.deAlloc$IF_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Memory.deAlloc:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton MovingObject.new:
(MovingObject.new)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc:
@MovingObject.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(MovingObject.new$ret.1)
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 6:
@THIS
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 3:
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP this 5:
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 4:
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return MovingObject.new:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton MovingObject.draw:
(MovingObject.draw)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(MovingObject.draw$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE97
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE97
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL97
D;JLT
@R15
M=0
@END_BOOL97
0;JMP
(X_NEGATIVE_Y_POSITIVE97)
@R15
M=-1
@END_BOOL97
0;JMP
(Y_NEGATIVE97)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE97
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL97
0;JMP
(X_AND_Y_NEGATIVE97)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL97
D;JLT
@R15
M=0
@END_BOOL97
0;JMP
(END_BOOL97)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@MovingObject.draw$WHILE_END0
D;JNE
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE98
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE98
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL98
D;JGT
@R15
M=0
@END_BOOL98
0;JMP
(X_NEGATIVE_Y_POSITIVE98)
@R15
M=0
@END_BOOL98
0;JMP
(Y_NEGATIVE98)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE98
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL98
0;JMP
(X_AND_Y_NEGATIVE98)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL98
D;JGT
@R15
M=0
@END_BOOL98
0;JMP
(END_BOOL98)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE99
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE99
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL99
D;JLT
@R15
M=0
@END_BOOL99
0;JMP
(X_NEGATIVE_Y_POSITIVE99)
@R15
M=-1
@END_BOOL99
0;JMP
(Y_NEGATIVE99)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE99
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL99
0;JMP
(X_AND_Y_NEGATIVE99)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL99
D;JLT
@R15
M=0
@END_BOOL99
0;JMP
(END_BOOL99)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@MovingObject.draw$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@MovingObject.draw$IF_FALSE0
0;JMP
// label IF_TRUE0:
(MovingObject.draw$IF_TRUE0)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL100
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL100)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@MovingObject.draw$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@MovingObject.draw$IF_FALSE1
0;JMP
// label IF_TRUE1:
(MovingObject.draw$IF_TRUE1)
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.2)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.3)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.4)
// C_PUSH constant 13:
@13
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.5)
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawRectangle:
@MovingObject.draw$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(MovingObject.draw$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.7)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.8)
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawCircle:
@MovingObject.draw$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawCircle
0;JMP
(MovingObject.draw$ret.9)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(MovingObject.draw$IF_FALSE1)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL101
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL101)
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@MovingObject.draw$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@MovingObject.draw$IF_FALSE2
0;JMP
// label IF_TRUE2:
(MovingObject.draw$IF_TRUE2)
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.10)
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.11)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.12)
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.13)
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@MovingObject.draw$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(MovingObject.draw$ret.14)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.15)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.16)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.17)
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.18)
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@MovingObject.draw$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(MovingObject.draw$ret.19)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.20)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.21)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.22)
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.23)
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@MovingObject.draw$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(MovingObject.draw$ret.24)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.25)
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.26)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.27)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@MovingObject.draw$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(MovingObject.draw$ret.28)
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine:
@MovingObject.draw$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0;JMP
(MovingObject.draw$ret.29)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(MovingObject.draw$IF_FALSE2)
// label IF_FALSE0:
(MovingObject.draw$IF_FALSE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@MovingObject.draw$WHILE_EXP0
0;JMP
// label WHILE_END0:
(MovingObject.draw$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return MovingObject.draw:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton MovingObject.isTurn:
(MovingObject.isTurn)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 4:
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 3:
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL102
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL102)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@MovingObject.isTurn$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@MovingObject.isTurn$IF_FALSE0
0;JMP
// label IF_TRUE0:
(MovingObject.isTurn$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 4:
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// return MovingObject.isTurn:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// label IF_FALSE0:
(MovingObject.isTurn$IF_FALSE0)
// C_PUSH this 4:
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 4:
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return MovingObject.isTurn:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton MovingObject.reset:
(MovingObject.reset)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 3:
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL103
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL103)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@MovingObject.reset$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@MovingObject.reset$IF_FALSE0
0;JMP
// label IF_TRUE0:
(MovingObject.reset$IF_TRUE0)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP this 5:
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(MovingObject.reset$IF_FALSE0)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL104
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL104)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@MovingObject.reset$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@MovingObject.reset$IF_FALSE1
0;JMP
// label IF_TRUE1:
(MovingObject.reset$IF_TRUE1)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 5:
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(MovingObject.reset$IF_FALSE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return MovingObject.reset:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton MovingObject.advance:
(MovingObject.advance)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 5:
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL105
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL105)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@MovingObject.advance$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@MovingObject.advance$IF_FALSE0
0;JMP
// label IF_TRUE0:
(MovingObject.advance$IF_TRUE0)
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE106
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE106
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL106
D;JGT
@R15
M=0
@END_BOOL106
0;JMP
(X_NEGATIVE_Y_POSITIVE106)
@R15
M=0
@END_BOOL106
0;JMP
(Y_NEGATIVE106)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE106
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL106
0;JMP
(X_AND_Y_NEGATIVE106)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL106
D;JGT
@R15
M=0
@END_BOOL106
0;JMP
(END_BOOL106)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@MovingObject.advance$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@MovingObject.advance$IF_FALSE1
0;JMP
// label IF_TRUE1:
(MovingObject.advance$IF_TRUE1)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call MovingObject.reset:
@MovingObject.advance$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@MovingObject.reset
0;JMP
(MovingObject.advance$ret.30)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(MovingObject.advance$IF_FALSE1)
// label IF_FALSE0:
(MovingObject.advance$IF_FALSE0)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL107
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL107)
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@MovingObject.advance$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@MovingObject.advance$IF_FALSE2
0;JMP
// label IF_TRUE2:
(MovingObject.advance$IF_TRUE2)
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE108
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE108
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL108
D;JLT
@R15
M=0
@END_BOOL108
0;JMP
(X_NEGATIVE_Y_POSITIVE108)
@R15
M=-1
@END_BOOL108
0;JMP
(Y_NEGATIVE108)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE108
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL108
0;JMP
(X_AND_Y_NEGATIVE108)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL108
D;JLT
@R15
M=0
@END_BOOL108
0;JMP
(END_BOOL108)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@MovingObject.advance$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@MovingObject.advance$IF_FALSE3
0;JMP
// label IF_TRUE3:
(MovingObject.advance$IF_TRUE3)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call MovingObject.reset:
@MovingObject.advance$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@MovingObject.reset
0;JMP
(MovingObject.advance$ret.31)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(MovingObject.advance$IF_FALSE3)
// label IF_FALSE2:
(MovingObject.advance$IF_FALSE2)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return MovingObject.advance:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton MovingObject.tailX:
(MovingObject.tailX)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 5:
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return MovingObject.tailX:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton MovingObject.tailY:
(MovingObject.tailY)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 6:
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return MovingObject.tailY:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton MovingObject.getLength:
(MovingObject.getLength)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return MovingObject.getLength:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton MovingObject.getDirection:
(MovingObject.getDirection)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return MovingObject.getDirection:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton MovingObject.dispose:
(MovingObject.dispose)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc:
@MovingObject.dispose$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(MovingObject.dispose$ret.32)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return MovingObject.dispose:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.init:
(Output.init)
// C_PUSH constant 16384:
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 4:
@Output.4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Output.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Output.init$ret.1)
// C_POP static 3:
@Output.3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.initMap:
@Output.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.initMap
0;JMP
(Output.init$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.createShiftedMap:
@Output.init$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.createShiftedMap
0;JMP
(Output.init$ret.3)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.initMap:
(Output.initMap)
// C_PUSH constant 127:
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Output.initMap$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.initMap$ret.4)
// C_POP static 5:
@Output.5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 34:
@34
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 20:
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.9)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 36:
@36
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.10)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 37:
@37
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 49:
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.11)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 38:
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.12)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 39:
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.13)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 40:
@40
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.14)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 41:
@41
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 42:
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.16)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 43:
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.17)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.18)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.19)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.20)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 47:
@47
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.21)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.22)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 49:
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.23)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 50:
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.24)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.25)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 52:
@52
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 26:
@26
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 25:
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 60:
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.26)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 53:
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.27)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.28)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 55:
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 49:
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.29)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 56:
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.30)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 57:
@57
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 62:
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.31)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 58:
@58
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.32)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.33)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 60:
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.34)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 61:
@61
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.35)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 62:
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.36)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 64:
@64
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.37)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.38)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 65:
@65
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.39)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 66:
@66
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.40)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 67:
@67
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.41)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 68:
@68
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.42)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 69:
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.43)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 70:
@70
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.44)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 71:
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.45)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 72:
@72
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.46)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.47)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 74:
@74
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 60:
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.48)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 75:
@75
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.49)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 76:
@76
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.50
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.50)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 77:
@77
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.51
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.51)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 78:
@78
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 55:
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 55:
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.52
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.52)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.53
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.53)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 80:
@80
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.54
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.54)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 81:
@81
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.55
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.55)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.56
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.56)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 83:
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.57
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.57)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 84:
@84
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.58
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.58)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 85:
@85
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.59
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.59)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 86:
@86
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.60
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.60)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 87:
@87
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.61
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.61)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 88:
@88
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.62
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.62)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 89:
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.63
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.63)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 90:
@90
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 49:
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 35:
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.64
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.64)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 91:
@91
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.65
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.65)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 92:
@92
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.66
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.66)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 93:
@93
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.67
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.67)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 94:
@94
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.68
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.68)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 95:
@95
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.69
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.69)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 96:
@96
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.70
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.70)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.71
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.71)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 98:
@98
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.72
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.72)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 99:
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.73
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.73)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 60:
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.74
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.74)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.75
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.75)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 38:
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.76
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.76)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 62:
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.77
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.77)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 55:
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.78
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.78)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.79
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.79)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 106:
@106
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 56:
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.80
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.80)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 107:
@107
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.81
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.81)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.82
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.82)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 29:
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 43:
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 43:
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 43:
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 43:
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.83
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.83)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 29:
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.84
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.84)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.85
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.85)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 112:
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.86
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.86)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 113:
@113
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 62:
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.87
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.87)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 29:
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 55:
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.88
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.88)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.89
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.89)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 28:
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.90
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.90)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.91
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.91)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 118:
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.92
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.92)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.93
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.93)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 120:
@120
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 30:
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.94
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.94)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 62:
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 24:
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.95
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.95)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 122:
@122
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 51:
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.96
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.96)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 123:
@123
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 56:
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 56:
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.97
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.97)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 124:
@124
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.98
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.98)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 125:
@125
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 56:
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.99
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.99)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 126:
@126
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 38:
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 25:
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.create:
@Output.initMap$ret.100
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.100)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.initMap:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.create:
(Output.create)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Output.create$ret.101
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.create$ret.101)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 4:
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 4:
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 5:
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 6:
@ARG
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 7:
@ARG
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 8:
@ARG
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 9:
@ARG
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 10:
@ARG
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 11:
@ARG
D=M
@11
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.create:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.createShiftedMap:
(Output.createShiftedMap)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 127:
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Output.createShiftedMap$ret.102
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.createShiftedMap$ret.102)
// C_POP static 6:
@Output.6
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Output.createShiftedMap$WHILE_EXP0)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 127:
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE109
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE109
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL109
D;JLT
@R15
M=0
@END_BOOL109
0;JMP
(X_NEGATIVE_Y_POSITIVE109)
@R15
M=-1
@END_BOOL109
0;JMP
(Y_NEGATIVE109)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE109
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL109
0;JMP
(X_AND_Y_NEGATIVE109)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL109
D;JLT
@R15
M=0
@END_BOOL109
0;JMP
(END_BOOL109)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Output.createShiftedMap$WHILE_END0
D;JNE
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Output.createShiftedMap$ret.103
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.createShiftedMap$ret.103)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Output.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Output.createShiftedMap$WHILE_EXP1)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE110
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE110
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL110
D;JLT
@R15
M=0
@END_BOOL110
0;JMP
(X_NEGATIVE_Y_POSITIVE110)
@R15
M=-1
@END_BOOL110
0;JMP
(Y_NEGATIVE110)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE110
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL110
0;JMP
(X_AND_Y_NEGATIVE110)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL110
D;JLT
@R15
M=0
@END_BOOL110
0;JMP
(END_BOOL110)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Output.createShiftedMap$WHILE_END1
D;JNE
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 256:
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Output.createShiftedMap$ret.104
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.createShiftedMap$ret.104)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Output.createShiftedMap$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Output.createShiftedMap$WHILE_END1)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL111
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL111)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.createShiftedMap$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.createShiftedMap$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.createShiftedMap$IF_TRUE0)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Output.createShiftedMap$IF_END0
0;JMP
// label IF_FALSE0:
(Output.createShiftedMap$IF_FALSE0)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Output.createShiftedMap$IF_END0)
// goto WHILE_EXP0:
@Output.createShiftedMap$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Output.createShiftedMap$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.createShiftedMap:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.getMap:
(Output.getMap)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE112
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE112
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL112
D;JLT
@R15
M=0
@END_BOOL112
0;JMP
(X_NEGATIVE_Y_POSITIVE112)
@R15
M=-1
@END_BOOL112
0;JMP
(Y_NEGATIVE112)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE112
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL112
0;JMP
(X_AND_Y_NEGATIVE112)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL112
D;JLT
@R15
M=0
@END_BOOL112
0;JMP
(END_BOOL112)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 126:
@126
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE113
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE113
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL113
D;JGT
@R15
M=0
@END_BOOL113
0;JMP
(X_NEGATIVE_Y_POSITIVE113)
@R15
M=0
@END_BOOL113
0;JMP
(Y_NEGATIVE113)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE113
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL113
0;JMP
(X_AND_Y_NEGATIVE113)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL113
D;JGT
@R15
M=0
@END_BOOL113
0;JMP
(END_BOOL113)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.getMap$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.getMap$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.getMap$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Output.getMap$IF_FALSE0)
// C_PUSH static 2:
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Output.getMap$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Output.getMap$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Output.getMap$IF_TRUE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 5:
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Output.getMap$IF_END1
0;JMP
// label IF_FALSE1:
(Output.getMap$IF_FALSE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 6:
@Output.6
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Output.getMap$IF_END1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return Output.getMap:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.drawChar:
(Output.drawChar)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.getMap:
@Output.drawChar$ret.105
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.getMap
0;JMP
(Output.drawChar$ret.105)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Output.drawChar$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 11:
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE114
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE114
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL114
D;JLT
@R15
M=0
@END_BOOL114
0;JMP
(X_NEGATIVE_Y_POSITIVE114)
@R15
M=-1
@END_BOOL114
0;JMP
(Y_NEGATIVE114)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE114
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL114
0;JMP
(X_AND_Y_NEGATIVE114)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL114
D;JLT
@R15
M=0
@END_BOOL114
0;JMP
(END_BOOL114)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Output.drawChar$WHILE_END0
D;JNE
// C_PUSH static 2:
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.drawChar$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.drawChar$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.drawChar$IF_TRUE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 4:
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 256:
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Output.drawChar$IF_END0
0;JMP
// label IF_FALSE0:
(Output.drawChar$IF_FALSE0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 4:
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Output.drawChar$IF_END0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 4:
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Output.drawChar$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Output.drawChar$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.drawChar:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.moveCursor:
(Output.moveCursor)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE115
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE115
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL115
D;JLT
@R15
M=0
@END_BOOL115
0;JMP
(X_NEGATIVE_Y_POSITIVE115)
@R15
M=-1
@END_BOOL115
0;JMP
(Y_NEGATIVE115)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE115
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL115
0;JMP
(X_AND_Y_NEGATIVE115)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL115
D;JLT
@R15
M=0
@END_BOOL115
0;JMP
(END_BOOL115)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 22:
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE116
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE116
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL116
D;JGT
@R15
M=0
@END_BOOL116
0;JMP
(X_NEGATIVE_Y_POSITIVE116)
@R15
M=0
@END_BOOL116
0;JMP
(Y_NEGATIVE116)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE116
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL116
0;JMP
(X_AND_Y_NEGATIVE116)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL116
D;JGT
@R15
M=0
@END_BOOL116
0;JMP
(END_BOOL116)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE117
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE117
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL117
D;JLT
@R15
M=0
@END_BOOL117
0;JMP
(X_NEGATIVE_Y_POSITIVE117)
@R15
M=-1
@END_BOOL117
0;JMP
(Y_NEGATIVE117)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE117
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL117
0;JMP
(X_AND_Y_NEGATIVE117)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL117
D;JLT
@R15
M=0
@END_BOOL117
0;JMP
(END_BOOL117)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE118
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE118
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL118
D;JGT
@R15
M=0
@END_BOOL118
0;JMP
(X_NEGATIVE_Y_POSITIVE118)
@R15
M=0
@END_BOOL118
0;JMP
(Y_NEGATIVE118)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE118
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL118
0;JMP
(X_AND_Y_NEGATIVE118)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL118
D;JGT
@R15
M=0
@END_BOOL118
0;JMP
(END_BOOL118)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.moveCursor$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.moveCursor$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.moveCursor$IF_TRUE0)
// C_PUSH constant 20:
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Output.moveCursor$ret.106
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Output.moveCursor$ret.106)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Output.moveCursor$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Output.moveCursor$ret.107
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Output.moveCursor$ret.107)
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 352:
@352
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Output.moveCursor$ret.108
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.moveCursor$ret.108)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Output.moveCursor$ret.109
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.moveCursor$ret.109)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL119
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL119)
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.drawChar:
@Output.moveCursor$ret.110
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.moveCursor$ret.110)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.moveCursor:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.printChar:
(Output.printChar)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.newLine:
@Output.printChar$ret.111
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.newLine
0;JMP
(Output.printChar$ret.111)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL120
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL120)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.printChar$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.printChar$IF_TRUE0)
// call Output.println:
@Output.printChar$ret.112
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.printChar$ret.112)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Output.printChar$IF_END0
0;JMP
// label IF_FALSE0:
(Output.printChar$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.backSpace:
@Output.printChar$ret.113
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Output.printChar$ret.113)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL121
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL121)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Output.printChar$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Output.printChar$IF_TRUE1)
// call Output.backSpace:
@Output.printChar$ret.114
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.backSpace
0;JMP
(Output.printChar$ret.114)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Output.printChar$IF_END1
0;JMP
// label IF_FALSE1:
(Output.printChar$IF_FALSE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.drawChar:
@Output.printChar$ret.115
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.printChar$ret.115)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 2:
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Output.printChar$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Output.printChar$IF_TRUE2)
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Output.printChar$IF_FALSE2)
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL122
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL122)
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Output.printChar$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Output.printChar$IF_TRUE3)
// call Output.println:
@Output.printChar$ret.116
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.printChar$ret.116)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3:
@Output.printChar$IF_END3
0;JMP
// label IF_FALSE3:
(Output.printChar$IF_FALSE3)
// C_PUSH static 2:
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END3:
(Output.printChar$IF_END3)
// label IF_END1:
(Output.printChar$IF_END1)
// label IF_END0:
(Output.printChar$IF_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.printChar:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.printString:
(Output.printString)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.length:
@Output.printString$ret.117
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.length
0;JMP
(Output.printString$ret.117)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Output.printString$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE123
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE123
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL123
D;JLT
@R15
M=0
@END_BOOL123
0;JMP
(X_NEGATIVE_Y_POSITIVE123)
@R15
M=-1
@END_BOOL123
0;JMP
(Y_NEGATIVE123)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE123
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL123
0;JMP
(X_AND_Y_NEGATIVE123)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL123
D;JLT
@R15
M=0
@END_BOOL123
0;JMP
(END_BOOL123)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Output.printString$WHILE_END0
D;JNE
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.charAt:
@Output.printString$ret.118
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.charAt
0;JMP
(Output.printString$ret.118)
// call Output.printChar:
@Output.printString$ret.119
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Output.printString$ret.119)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Output.printString$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Output.printString$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.printString:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.printInt:
(Output.printInt)
// C_PUSH static 3:
@Output.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.setInt:
@Output.printInt$ret.120
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.setInt
0;JMP
(Output.printInt$ret.120)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 3:
@Output.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Output.printInt$ret.121
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Output.printInt$ret.121)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.printInt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.println:
(Output.println)
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 352:
@352
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 8128:
@8128
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL124
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL124)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.println$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.println$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.println$IF_TRUE0)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Output.println$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.println:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Output.backSpace:
(Output.backSpace)
// C_PUSH static 2:
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Output.backSpace$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Output.backSpace$IF_TRUE0)
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE125
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE125
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL125
D;JGT
@R15
M=0
@END_BOOL125
0;JMP
(X_NEGATIVE_Y_POSITIVE125)
@R15
M=0
@END_BOOL125
0;JMP
(Y_NEGATIVE125)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE125
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL125
0;JMP
(X_AND_Y_NEGATIVE125)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL125
D;JGT
@R15
M=0
@END_BOOL125
0;JMP
(END_BOOL125)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Output.backSpace$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Output.backSpace$IF_TRUE1)
// C_PUSH static 0:
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Output.backSpace$IF_END1
0;JMP
// label IF_FALSE1:
(Output.backSpace$IF_FALSE1)
// C_PUSH constant 31:
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 0:
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL126
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL126)
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Output.backSpace$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Output.backSpace$IF_TRUE2)
// C_PUSH constant 8128:
@8128
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(Output.backSpace$IF_FALSE2)
// C_PUSH static 1:
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 321:
@321
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP static 1:
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Output.backSpace$IF_END1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Output.backSpace$IF_END0
0;JMP
// label IF_FALSE0:
(Output.backSpace$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP static 2:
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Output.backSpace$IF_END0)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Output.drawChar:
@Output.backSpace$ret.122
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.backSpace$ret.122)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Output.backSpace:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Scenes.intro:
(Scenes.intro)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.clearScreen:
@Scenes.intro$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.clearScreen
0;JMP
(Scenes.intro$ret.1)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.intro$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.intro$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 26:
@26
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.intro$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.intro$ret.3)
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.4)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.5)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.6)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.7)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.8)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.9)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.10)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.11)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.12)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.13)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.14)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.15)
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.16)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.17)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.18)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.19)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.20)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.21)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.22)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.23)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.24)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.25)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.26)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.27)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.28)
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.29)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.intro$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.intro$ret.30)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.intro$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.intro$ret.31)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2000:
@2000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.intro$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.intro$ret.32)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 23:
@23
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.intro$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.intro$ret.33)
// C_PUSH constant 76:
@76
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.34)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.35)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.36)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.37)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.38)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.39)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.40)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.41)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.42)
// C_PUSH constant 112:
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.43)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.44)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.45)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.46)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.47)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.48)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.49)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.50
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.50)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.51
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.51)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.52
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.52)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.53
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.53)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.54
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.54)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.55
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.55)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.56
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.56)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.intro$ret.57
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.intro$ret.57)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.intro$ret.58
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.intro$ret.58)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 3000:
@3000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.intro$ret.59
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.intro$ret.59)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.intro$ret.60
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.intro$ret.60)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Screen.clearScreen:
@Scenes.intro$ret.61
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.clearScreen
0;JMP
(Scenes.intro$ret.61)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.intro$ret.62
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.intro$ret.62)
// C_PUSH constant 87:
@87
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.63
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.63)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.64
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.64)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.65
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.65)
// C_PUSH constant 99:
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.66
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.66)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.67
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.67)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.68
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.68)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.69
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.69)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.70
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.70)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.71
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.71)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.72
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.72)
// C_PUSH constant 58:
@58
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.73
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.73)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.74
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.74)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.75
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.75)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.76
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.76)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.77
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.77)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.78
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.78)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.79
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.79)
// C_PUSH constant 78:
@78
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.80
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.80)
// C_PUSH constant 65:
@65
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.81
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.81)
// C_PUSH constant 78:
@78
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.82
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.82)
// C_PUSH constant 68:
@68
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.83
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.83)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.84
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.84)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.85
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.85)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.86
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.86)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.87
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.87)
// C_PUSH constant 70:
@70
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.88
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.88)
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.89
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.89)
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.90
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.90)
// C_PUSH constant 71:
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.91
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.91)
// C_PUSH constant 71:
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.92
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.92)
// C_PUSH constant 69:
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.93
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.93)
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.94
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.94)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.intro$ret.95
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.intro$ret.95)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.intro$ret.96
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.intro$ret.96)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.intro$ret.97
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.intro$ret.97)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2000:
@2000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.intro$ret.98
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.intro$ret.98)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.intro$ret.99
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.intro$ret.99)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.intro$ret.100
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.intro$ret.100)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.intro$ret.101
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.intro$ret.101)
// C_PUSH constant 85:
@85
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.102
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.102)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.103
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.103)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.104
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.104)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.105
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.105)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.106
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.106)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.107
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.107)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.108
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.108)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.109
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.109)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.110
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.110)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.111
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.111)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.112
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.112)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.113
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.113)
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.114
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.114)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.115
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.115)
// C_PUSH constant 107:
@107
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.116
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.116)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.117
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.117)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.118
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.118)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.119
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.119)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.120
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.120)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.121
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.121)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.122
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.122)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.123
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.123)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.124
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.124)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.125
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.125)
// C_PUSH constant 118:
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.126
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.126)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.127
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.127)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.128
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.128)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.129
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.129)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.130
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.130)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.131
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.131)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.132
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.132)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.133
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.133)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.134
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.134)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.135
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.135)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.136
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.136)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.137
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.137)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.138
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.138)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.139
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.139)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.140
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.140)
// C_PUSH constant 54:
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.141
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.141)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.142
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.142)
// C_PUSH constant 112:
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.143
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.143)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.144
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.144)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.145
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.145)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.146
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.146)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.147
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.147)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.148
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.148)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.149
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.149)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.intro$ret.150
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.intro$ret.150)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1000:
@1000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.intro$ret.151
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.intro$ret.151)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.intro$ret.152
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.intro$ret.152)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.intro$ret.153
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.intro$ret.153)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.intro$ret.154
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.intro$ret.154)
// C_PUSH constant 68:
@68
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.155
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.155)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.156
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.156)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.157
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.157)
// C_PUSH constant 39:
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.158
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.158)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.159
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.159)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.160
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.160)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.161
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.161)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.162
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.162)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.163
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.163)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.164
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.164)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.165
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.165)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.166
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.166)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.167
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.167)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.168
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.168)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.169
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.169)
// C_PUSH constant 118:
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.170
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.170)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.171
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.171)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.172
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.172)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.173
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.173)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.174
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.174)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.175
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.175)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.176
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.176)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.177
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.177)
// C_PUSH constant 39:
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.178
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.178)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.179
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.179)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.180
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.180)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.181
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.181)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.182
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.182)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.183
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.183)
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.184
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.184)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.185
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.185)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.186
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.186)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.intro$ret.187
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.intro$ret.187)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1000:
@1000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.intro$ret.188
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.intro$ret.188)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.intro$ret.189
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.intro$ret.189)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.intro$ret.190
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.intro$ret.190)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 59:
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.intro$ret.191
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.intro$ret.191)
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.192
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.192)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.193
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.193)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.194
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.194)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.195
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.195)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.196
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.196)
// C_PUSH constant 98:
@98
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.197
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.197)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.198
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.198)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.199
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.199)
// C_PUSH constant 58:
@58
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.200
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.200)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.201
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.201)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.202
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.202)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.203
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.203)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.204
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.204)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.205
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.205)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.206
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.206)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.207
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.207)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.208
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.208)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.209
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.209)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.210
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.210)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.211
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.211)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.212
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.212)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.213
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.213)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.214
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.214)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.215
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.215)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.216
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.216)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.217
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.217)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.218
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.218)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.219
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.219)
// C_PUSH constant 39:
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.220
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.220)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.221
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.221)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.222
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.222)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.223
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.223)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.224
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.224)
// C_PUSH constant 99:
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.225
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.225)
// C_PUSH constant 99:
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.226
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.226)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.227
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.227)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.228
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.228)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.229
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.229)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.230
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.230)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.231
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.231)
// C_PUSH constant 98:
@98
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.232
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.232)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.233
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.233)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.234
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.234)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.235
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.235)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.236
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.236)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.237
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.237)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.238
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.238)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.239
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.239)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.240
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.240)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.241
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.241)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.242
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.242)
// C_PUSH constant 112:
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.243
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.243)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.244
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.244)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.245
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.245)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.246
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.246)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.247
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.247)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.248
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.248)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.249
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.249)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.250
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.250)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.intro$ret.251
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.intro$ret.251)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1000:
@1000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.intro$ret.252
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.intro$ret.252)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.intro$ret.253
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.intro$ret.253)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.intro$ret.254
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.intro$ret.254)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.intro$ret.255
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.intro$ret.255)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 27:
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.intro$ret.256
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.intro$ret.256)
// C_PUSH constant 112:
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.257
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.257)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.258
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.258)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.259
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.259)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.260
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.260)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.261
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.261)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.262
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.262)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.263
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.263)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.264
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.264)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.265
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.265)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.266
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.266)
// C_PUSH constant 107:
@107
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.267
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.267)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.268
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.268)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.269
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.269)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.270
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.270)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.271
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.271)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.272
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.272)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.273
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.273)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.274
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.274)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.275
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.275)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.276
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.276)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.277
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.277)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.278
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.278)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.279
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.279)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.280
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.280)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.281
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.281)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.282
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.282)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.intro$ret.283
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.intro$ret.283)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.intro$ret.284
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.intro$ret.284)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1000:
@1000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.intro$ret.285
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.intro$ret.285)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.intro$ret.286
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.intro$ret.286)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.intro$ret.287
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.intro$ret.287)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Scenes.intro$WHILE_EXP0)
// call Keyboard.keyPressed:
@Scenes.intro$ret.288
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Scenes.intro$ret.288)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL127
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL127)
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Scenes.intro$WHILE_END0
D;JNE
// goto WHILE_EXP0:
@Scenes.intro$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Scenes.intro$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Scenes.intro:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Scenes.failed:
(Scenes.failed)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.clearScreen:
@Scenes.failed$ret.289
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.clearScreen
0;JMP
(Scenes.failed$ret.289)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.failed$ret.290
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.failed$ret.290)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.failed$ret.291
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.failed$ret.291)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.292
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.292)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.293
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.293)
// C_PUSH constant 89:
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.294
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.294)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.295
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.295)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.296
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.296)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.297
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.297)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.298
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.298)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.299
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.299)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.300
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.300)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.301
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.301)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.302
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.302)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.303
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.303)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.304
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.304)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.305
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.305)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.306
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.306)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.failed$ret.307
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.failed$ret.307)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.failed$ret.308
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.failed$ret.308)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 3000:
@3000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.failed$ret.309
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.failed$ret.309)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 29:
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.failed$ret.310
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.failed$ret.310)
// C_PUSH constant 66:
@66
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.311
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.311)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.312
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.312)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.313
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.313)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.314
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.314)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.315
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.315)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.316
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.316)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.317
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.317)
// C_PUSH constant 98:
@98
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.318
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.318)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.319
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.319)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.320
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.320)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.321
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.321)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.322
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.322)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.323
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.323)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.324
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.324)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.325
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.325)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.326
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.326)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.327
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.327)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.328
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.328)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.329
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.329)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.330
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.330)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.331
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.331)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.332
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.332)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.333
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.333)
// C_PUSH constant 112:
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.334
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.334)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.335
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.335)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.336
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.336)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.337
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.337)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.338
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.338)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.339
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.339)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.failed$ret.340
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.failed$ret.340)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.failed$ret.341
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.failed$ret.341)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 3000:
@3000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.failed$ret.342
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.failed$ret.342)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.failed$ret.343
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.failed$ret.343)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 50:
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.failed$ret.344
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.failed$ret.344)
// C_PUSH constant 78:
@78
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.345
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.345)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.346
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.346)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.347
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.347)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.348
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.348)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.349
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.349)
// C_PUSH constant 99:
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.350
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.350)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.351
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.351)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.352
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.352)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.353
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.353)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.354
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.354)
// C_PUSH constant 99:
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.355
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.355)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.356
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.356)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.357
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.357)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.358
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.358)
// C_PUSH constant 99:
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.359
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.359)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.360
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.360)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.361
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.361)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.362
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.362)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.363
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.363)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.364
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.364)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.365
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.365)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.366
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.366)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.367
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.367)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.368
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.368)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.369
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.369)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.370
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.370)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.371
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.371)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.372
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.372)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.373
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.373)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.374
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.374)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.375
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.375)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.376
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.376)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.377
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.377)
// C_PUSH constant 98:
@98
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.378
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.378)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.379
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.379)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.380
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.380)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.381
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.381)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.382
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.382)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.383
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.383)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.384
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.384)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.385
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.385)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.386
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.386)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.387
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.387)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.388
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.388)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.389
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.389)
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.390
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.390)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.391
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.391)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.392
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.392)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.393
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.393)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.394
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.394)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.failed$ret.395
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.failed$ret.395)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.failed$ret.396
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.failed$ret.396)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2000:
@2000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.failed$ret.397
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.failed$ret.397)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.failed$ret.398
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.failed$ret.398)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.failed$ret.399
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.failed$ret.399)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 53:
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.failed$ret.400
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.failed$ret.400)
// C_PUSH constant 72:
@72
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.401
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.401)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.402
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.402)
// C_PUSH constant 112:
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.403
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.403)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.404
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.404)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.405
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.405)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.406
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.406)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.407
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.407)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.408
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.408)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.409
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.409)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.410
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.410)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.411
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.411)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.412
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.412)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.413
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.413)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.414
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.414)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.415
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.415)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.416
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.416)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.417
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.417)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.418
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.418)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.419
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.419)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.420
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.420)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.421
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.421)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.422
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.422)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.423
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.423)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.424
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.424)
// C_PUSH constant 70:
@70
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.425
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.425)
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.426
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.426)
// C_PUSH constant 79:
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.427
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.427)
// C_PUSH constant 71:
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.428
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.428)
// C_PUSH constant 71:
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.429
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.429)
// C_PUSH constant 69:
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.430
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.430)
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.431
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.431)
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.432
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.432)
// C_PUSH constant 50:
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.433
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.433)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.434
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.434)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.435
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.435)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.436
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.436)
// C_PUSH constant 118:
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.437
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.437)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.438
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.438)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.439
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.439)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.440
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.440)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.441
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.441)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.442
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.442)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.443
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.443)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.444
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.444)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.445
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.445)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.446
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.446)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.447
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.447)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.448
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.448)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.449
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.449)
// C_PUSH constant 65:
@65
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.450
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.450)
// C_PUSH constant 76:
@76
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.451
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.451)
// C_PUSH constant 85:
@85
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.452
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.452)
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.453
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.453)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.failed$ret.454
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.failed$ret.454)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1000:
@1000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.failed$ret.455
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.failed$ret.455)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.failed$ret.456
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.failed$ret.456)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.failed$ret.457
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.failed$ret.457)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 39:
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.failed$ret.458
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.failed$ret.458)
// C_PUSH constant 84:
@84
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.459
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.459)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.460
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.460)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.461
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.461)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.462
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.462)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.463
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.463)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.464
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.464)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.465
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.465)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.466
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.466)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.467
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.467)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.468
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.468)
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.469
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.469)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.470
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.470)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.471
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.471)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.472
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.472)
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.473
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.473)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.474
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.474)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.475
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.475)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.476
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.476)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.477
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.477)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.478
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.478)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.479
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.479)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.480
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.480)
// C_PUSH constant 98:
@98
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.481
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.481)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.482
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.482)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.483
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.483)
// C_PUSH constant 83:
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.484
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.484)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.485
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.485)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.486
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.486)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.487
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.487)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.488
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.488)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.489
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.489)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.490
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.490)
// C_PUSH constant 65:
@65
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.491
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.491)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.492
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.492)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.493
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.493)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.494
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.494)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.495
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.495)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.496
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.496)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.failed$ret.497
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.failed$ret.497)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.failed$ret.498
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.failed$ret.498)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1000:
@1000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.failed$ret.499
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.failed$ret.499)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.failed$ret.500
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.failed$ret.500)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Scenes.failed$WHILE_EXP0)
// call Keyboard.keyPressed:
@Scenes.failed$ret.501
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Scenes.failed$ret.501)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL128
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL128)
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Scenes.failed$WHILE_END0
D;JNE
// goto WHILE_EXP0:
@Scenes.failed$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Scenes.failed$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Scenes.failed:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Scenes.succeeded:
(Scenes.succeeded)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Screen.clearScreen:
@Scenes.succeeded$ret.502
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.clearScreen
0;JMP
(Scenes.succeeded$ret.502)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.succeeded$ret.503
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.succeeded$ret.503)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.succeeded$ret.504
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.succeeded$ret.504)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.505
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.505)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.506
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.506)
// C_PUSH constant 89:
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.507
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.507)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.508
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.508)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.509
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.509)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.510
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.510)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.511
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.511)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.512
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.512)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.513
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.513)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.514
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.514)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.515
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.515)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.516
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.516)
// C_PUSH constant 87:
@87
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.517
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.517)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.518
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.518)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.519
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.519)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.520
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.520)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.succeeded$ret.521
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.succeeded$ret.521)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.succeeded$ret.522
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.succeeded$ret.522)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 3000:
@3000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.succeeded$ret.523
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.succeeded$ret.523)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 36:
@36
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.succeeded$ret.524
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.succeeded$ret.524)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.525
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.525)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.526
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.526)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.527
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.527)
// C_PUSH constant 73:
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.528
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.528)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.529
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.529)
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.530
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.530)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.531
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.531)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.532
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.532)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.533
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.533)
// C_PUSH constant 39:
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.534
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.534)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.535
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.535)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.536
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.536)
// C_PUSH constant 112:
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.537
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.537)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.538
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.538)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.539
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.539)
// C_PUSH constant 112:
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.540
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.540)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.541
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.541)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.542
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.542)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.543
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.543)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.544
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.544)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.545
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.545)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.546
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.546)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.547
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.547)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.548
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.548)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.549
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.549)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.550
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.550)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.551
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.551)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.552
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.552)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.553
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.553)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.554
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.554)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.555
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.555)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.556
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.556)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.557
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.557)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.558
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.558)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.559
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.559)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.560
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.560)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.succeeded$ret.561
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.succeeded$ret.561)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.succeeded$ret.562
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.succeeded$ret.562)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 3000:
@3000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.succeeded$ret.563
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.succeeded$ret.563)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.succeeded$ret.564
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.succeeded$ret.564)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 22:
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.succeeded$ret.565
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.succeeded$ret.565)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.566
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.566)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.567
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.567)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.568
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.568)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.569
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.569)
// C_PUSH constant 67:
@67
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.570
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.570)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.571
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.571)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.572
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.572)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.573
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.573)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.574
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.574)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.575
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.575)
// C_PUSH constant 100:
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.576
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.576)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.577
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.577)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.578
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.578)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.579
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.579)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.580
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.580)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.581
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.581)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.582
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.582)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.583
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.583)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.584
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.584)
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.585
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.585)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.586
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.586)
// C_PUSH constant 46:
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.587
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.587)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.succeeded$ret.588
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.succeeded$ret.588)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.succeeded$ret.589
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.succeeded$ret.589)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2000:
@2000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.succeeded$ret.590
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.succeeded$ret.590)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.succeeded$ret.591
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.succeeded$ret.591)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.succeeded$ret.592
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.succeeded$ret.592)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 57:
@57
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.succeeded$ret.593
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.succeeded$ret.593)
// C_PUSH constant 89:
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.594
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.594)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.595
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.595)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.596
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.596)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.597
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.597)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.598
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.598)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.599
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.599)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.600
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.600)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.601
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.601)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.602
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.602)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.603
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.603)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.604
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.604)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.605
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.605)
// C_PUSH constant 118:
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.606
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.606)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.607
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.607)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.608
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.608)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.609
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.609)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.610
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.610)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.611
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.611)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.612
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.612)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.613
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.613)
// C_PUSH constant 107:
@107
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.614
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.614)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.615
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.615)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.616
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.616)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.617
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.617)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.618
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.618)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.619
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.619)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.620
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.620)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.621
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.621)
// C_PUSH constant 102:
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.622
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.622)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.623
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.623)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.624
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.624)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.625
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.625)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.626
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.626)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.627
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.627)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.628
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.628)
// C_PUSH constant 33:
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.629
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.629)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.630
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.630)
// C_PUSH constant 40:
@40
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.631
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.631)
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.632
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.632)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.633
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.633)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.634
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.634)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.635
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.635)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.636
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.636)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.637
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.637)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.638
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.638)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.639
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.639)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.640
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.640)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.641
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.641)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.642
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.642)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.643
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.643)
// C_PUSH constant 44:
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.644
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.644)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.645
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.645)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.646
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.646)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.647
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.647)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.648
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.648)
// C_PUSH constant 63:
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.649
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.649)
// C_PUSH constant 41:
@41
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.650
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.650)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.succeeded$ret.651
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.succeeded$ret.651)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1000:
@1000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.succeeded$ret.652
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.succeeded$ret.652)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.succeeded$ret.653
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.succeeded$ret.653)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println:
@Scenes.succeeded$ret.654
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Scenes.succeeded$ret.654)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 39:
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Scenes.succeeded$ret.655
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Scenes.succeeded$ret.655)
// C_PUSH constant 84:
@84
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.656
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.656)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.657
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.657)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.658
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.658)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.659
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.659)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.660
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.660)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.661
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.661)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.662
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.662)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.663
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.663)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.664
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.664)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.665
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.665)
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.666
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.666)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.667
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.667)
// C_PUSH constant 115:
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.668
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.668)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.669
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.669)
// C_PUSH constant 119:
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.670
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.670)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.671
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.671)
// C_PUSH constant 105:
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.672
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.672)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.673
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.673)
// C_PUSH constant 116:
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.674
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.674)
// C_PUSH constant 101:
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.675
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.675)
// C_PUSH constant 110:
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.676
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.676)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.677
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.677)
// C_PUSH constant 98:
@98
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.678
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.678)
// C_PUSH constant 121:
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.679
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.679)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.680
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.680)
// C_PUSH constant 83:
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.681
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.681)
// C_PUSH constant 104:
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.682
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.682)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.683
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.683)
// C_PUSH constant 117:
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.684
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.684)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.685
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.685)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.686
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.686)
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.687
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.687)
// C_PUSH constant 65:
@65
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.688
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.688)
// C_PUSH constant 108:
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.689
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.689)
// C_PUSH constant 109:
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.690
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.690)
// C_PUSH constant 97:
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.691
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.691)
// C_PUSH constant 103:
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.692
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.692)
// C_PUSH constant 111:
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.693
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.693)
// C_PUSH constant 114:
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Scenes.succeeded$ret.694
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Scenes.succeeded$ret.694)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printString:
@Scenes.succeeded$ret.695
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Scenes.succeeded$ret.695)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1000:
@1000
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.wait:
@Scenes.succeeded$ret.696
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.wait
0;JMP
(Scenes.succeeded$ret.696)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call String.dispose:
@Scenes.succeeded$ret.697
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Scenes.succeeded$ret.697)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Scenes.succeeded$WHILE_EXP0)
// call Keyboard.keyPressed:
@Scenes.succeeded$ret.698
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Scenes.succeeded$ret.698)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL129
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL129)
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Scenes.succeeded$WHILE_END0
D;JNE
// goto WHILE_EXP0:
@Scenes.succeeded$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Scenes.succeeded$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Scenes.succeeded:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.init:
(Screen.init)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16384:
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 1:
@Screen.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP static 2:
@Screen.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 17:
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@Screen.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Screen.init$ret.1)
// C_POP static 0:
@Screen.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Screen.init$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE130
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE130
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL130
D;JLT
@R15
M=0
@END_BOOL130
0;JMP
(X_NEGATIVE_Y_POSITIVE130)
@R15
M=-1
@END_BOOL130
0;JMP
(Y_NEGATIVE130)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE130
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL130
0;JMP
(X_AND_Y_NEGATIVE130)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL130
D;JLT
@R15
M=0
@END_BOOL130
0;JMP
(END_BOOL130)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.init$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.init$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.init$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.clearScreen:
(Screen.clearScreen)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// label WHILE_EXP0:
(Screen.clearScreen$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 8192:
@8192
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE131
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE131
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL131
D;JLT
@R15
M=0
@END_BOOL131
0;JMP
(X_NEGATIVE_Y_POSITIVE131)
@R15
M=-1
@END_BOOL131
0;JMP
(Y_NEGATIVE131)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE131
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL131
0;JMP
(X_AND_Y_NEGATIVE131)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL131
D;JLT
@R15
M=0
@END_BOOL131
0;JMP
(END_BOOL131)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.clearScreen$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.clearScreen$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.clearScreen$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.clearScreen:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.updateLocation:
(Screen.updateLocation)
// C_PUSH static 2:
@Screen.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.updateLocation$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.updateLocation$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.updateLocation$IF_TRUE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Screen.updateLocation$IF_END0
0;JMP
// label IF_FALSE0:
(Screen.updateLocation$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 1:
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Screen.updateLocation$IF_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.updateLocation:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.setColor:
(Screen.setColor)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP static 2:
@Screen.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.setColor:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawPixel:
(Screen.drawPixel)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE132
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE132
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL132
D;JLT
@R15
M=0
@END_BOOL132
0;JMP
(X_NEGATIVE_Y_POSITIVE132)
@R15
M=-1
@END_BOOL132
0;JMP
(Y_NEGATIVE132)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE132
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL132
0;JMP
(X_AND_Y_NEGATIVE132)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL132
D;JLT
@R15
M=0
@END_BOOL132
0;JMP
(END_BOOL132)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE133
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE133
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL133
D;JGT
@R15
M=0
@END_BOOL133
0;JMP
(X_NEGATIVE_Y_POSITIVE133)
@R15
M=0
@END_BOOL133
0;JMP
(Y_NEGATIVE133)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE133
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL133
0;JMP
(X_AND_Y_NEGATIVE133)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL133
D;JGT
@R15
M=0
@END_BOOL133
0;JMP
(END_BOOL133)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE134
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE134
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL134
D;JLT
@R15
M=0
@END_BOOL134
0;JMP
(X_NEGATIVE_Y_POSITIVE134)
@R15
M=-1
@END_BOOL134
0;JMP
(Y_NEGATIVE134)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE134
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL134
0;JMP
(X_AND_Y_NEGATIVE134)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL134
D;JLT
@R15
M=0
@END_BOOL134
0;JMP
(END_BOOL134)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE135
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE135
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL135
D;JGT
@R15
M=0
@END_BOOL135
0;JMP
(X_NEGATIVE_Y_POSITIVE135)
@R15
M=0
@END_BOOL135
0;JMP
(Y_NEGATIVE135)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE135
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL135
0;JMP
(X_AND_Y_NEGATIVE135)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL135
D;JGT
@R15
M=0
@END_BOOL135
0;JMP
(END_BOOL135)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawPixel$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawPixel$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawPixel$IF_TRUE0)
// C_PUSH constant 7:
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Screen.drawPixel$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawPixel$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Screen.drawPixel$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Screen.drawPixel$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawPixel$ret.3)
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawPixel$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawPixel$ret.4)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawPixel$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawPixel$ret.5)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.updateLocation:
@Screen.drawPixel$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawPixel$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawPixel:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawConditional:
(Screen.drawConditional)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawConditional$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawConditional$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawConditional$IF_TRUE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawPixel:
@Screen.drawConditional$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Screen.drawConditional$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END0:
@Screen.drawConditional$IF_END0
0;JMP
// label IF_FALSE0:
(Screen.drawConditional$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawPixel:
@Screen.drawConditional$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Screen.drawConditional$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END0:
(Screen.drawConditional$IF_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawConditional:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawLine:
(Screen.drawLine)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE136
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE136
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL136
D;JLT
@R15
M=0
@END_BOOL136
0;JMP
(X_NEGATIVE_Y_POSITIVE136)
@R15
M=-1
@END_BOOL136
0;JMP
(Y_NEGATIVE136)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE136
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL136
0;JMP
(X_AND_Y_NEGATIVE136)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL136
D;JLT
@R15
M=0
@END_BOOL136
0;JMP
(END_BOOL136)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE137
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE137
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL137
D;JGT
@R15
M=0
@END_BOOL137
0;JMP
(X_NEGATIVE_Y_POSITIVE137)
@R15
M=0
@END_BOOL137
0;JMP
(Y_NEGATIVE137)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE137
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL137
0;JMP
(X_AND_Y_NEGATIVE137)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL137
D;JGT
@R15
M=0
@END_BOOL137
0;JMP
(END_BOOL137)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE138
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE138
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL138
D;JLT
@R15
M=0
@END_BOOL138
0;JMP
(X_NEGATIVE_Y_POSITIVE138)
@R15
M=-1
@END_BOOL138
0;JMP
(Y_NEGATIVE138)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE138
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL138
0;JMP
(X_AND_Y_NEGATIVE138)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL138
D;JLT
@R15
M=0
@END_BOOL138
0;JMP
(END_BOOL138)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE139
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE139
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL139
D;JGT
@R15
M=0
@END_BOOL139
0;JMP
(X_NEGATIVE_Y_POSITIVE139)
@R15
M=0
@END_BOOL139
0;JMP
(Y_NEGATIVE139)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE139
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL139
0;JMP
(X_AND_Y_NEGATIVE139)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL139
D;JGT
@R15
M=0
@END_BOOL139
0;JMP
(END_BOOL139)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawLine$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawLine$IF_TRUE0)
// C_PUSH constant 8:
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Screen.drawLine$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawLine$ret.9)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Screen.drawLine$IF_FALSE0)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.abs:
@Screen.drawLine$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Screen.drawLine$ret.10)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.abs:
@Screen.drawLine$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Screen.drawLine$ret.11)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE140
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE140
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL140
D;JLT
@R15
M=0
@END_BOOL140
0;JMP
(X_NEGATIVE_Y_POSITIVE140)
@R15
M=-1
@END_BOOL140
0;JMP
(Y_NEGATIVE140)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE140
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL140
0;JMP
(X_AND_Y_NEGATIVE140)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL140
D;JLT
@R15
M=0
@END_BOOL140
0;JMP
(END_BOOL140)
@R15
D=M
@SP
A=M-1
M=D
// C_POP local 6:
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE141
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE141
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL141
D;JLT
@R15
M=0
@END_BOOL141
0;JMP
(X_NEGATIVE_Y_POSITIVE141)
@R15
M=-1
@END_BOOL141
0;JMP
(Y_NEGATIVE141)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE141
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL141
0;JMP
(X_AND_Y_NEGATIVE141)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL141
D;JLT
@R15
M=0
@END_BOOL141
0;JMP
(END_BOOL141)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE142
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE142
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL142
D;JLT
@R15
M=0
@END_BOOL142
0;JMP
(X_NEGATIVE_Y_POSITIVE142)
@R15
M=-1
@END_BOOL142
0;JMP
(Y_NEGATIVE142)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE142
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL142
0;JMP
(X_AND_Y_NEGATIVE142)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL142
D;JLT
@R15
M=0
@END_BOOL142
0;JMP
(END_BOOL142)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Screen.drawLine$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Screen.drawLine$IF_TRUE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 2:
@ARG
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 3:
@ARG
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Screen.drawLine$IF_FALSE1)
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Screen.drawLine$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Screen.drawLine$IF_TRUE2)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 8:
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE143
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE143
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL143
D;JGT
@R15
M=0
@END_BOOL143
0;JMP
(X_NEGATIVE_Y_POSITIVE143)
@R15
M=0
@END_BOOL143
0;JMP
(Y_NEGATIVE143)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE143
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL143
0;JMP
(X_AND_Y_NEGATIVE143)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL143
D;JGT
@R15
M=0
@END_BOOL143
0;JMP
(END_BOOL143)
@R15
D=M
@SP
A=M-1
M=D
// C_POP local 7:
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END2:
@Screen.drawLine$IF_END2
0;JMP
// label IF_FALSE2:
(Screen.drawLine$IF_FALSE2)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 8:
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE144
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE144
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL144
D;JGT
@R15
M=0
@END_BOOL144
0;JMP
(X_NEGATIVE_Y_POSITIVE144)
@R15
M=0
@END_BOOL144
0;JMP
(Y_NEGATIVE144)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE144
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL144
0;JMP
(X_AND_Y_NEGATIVE144)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL144
D;JGT
@R15
M=0
@END_BOOL144
0;JMP
(END_BOOL144)
@R15
D=M
@SP
A=M-1
M=D
// C_POP local 7:
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END2:
(Screen.drawLine$IF_END2)
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawLine$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine$ret.12)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawLine$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine$ret.13)
// C_POP local 9:
@LCL
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.multiply:
@Screen.drawLine$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine$ret.14)
// C_POP local 10:
@LCL
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawConditional:
@Screen.drawLine$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0;JMP
(Screen.drawLine$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Screen.drawLine$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE145
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE145
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL145
D;JLT
@R15
M=0
@END_BOOL145
0;JMP
(X_NEGATIVE_Y_POSITIVE145)
@R15
M=-1
@END_BOOL145
0;JMP
(Y_NEGATIVE145)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE145
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL145
0;JMP
(X_AND_Y_NEGATIVE145)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL145
D;JLT
@R15
M=0
@END_BOOL145
0;JMP
(END_BOOL145)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.drawLine$WHILE_END0
D;JNE
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE146
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE146
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL146
D;JLT
@R15
M=0
@END_BOOL146
0;JMP
(X_NEGATIVE_Y_POSITIVE146)
@R15
M=-1
@END_BOOL146
0;JMP
(Y_NEGATIVE146)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE146
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL146
0;JMP
(X_AND_Y_NEGATIVE146)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL146
D;JLT
@R15
M=0
@END_BOOL146
0;JMP
(END_BOOL146)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@Screen.drawLine$IF_FALSE3
0;JMP
// label IF_TRUE3:
(Screen.drawLine$IF_TRUE3)
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 9:
@LCL
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END3:
@Screen.drawLine$IF_END3
0;JMP
// label IF_FALSE3:
(Screen.drawLine$IF_FALSE3)
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 10:
@LCL
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@Screen.drawLine$IF_FALSE4
0;JMP
// label IF_TRUE4:
(Screen.drawLine$IF_TRUE4)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END4:
@Screen.drawLine$IF_END4
0;JMP
// label IF_FALSE4:
(Screen.drawLine$IF_FALSE4)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END4:
(Screen.drawLine$IF_END4)
// label IF_END3:
(Screen.drawLine$IF_END3)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawConditional:
@Screen.drawLine$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0;JMP
(Screen.drawLine$ret.16)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.drawLine$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.drawLine$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawLine:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawRectangle:
(Screen.drawRectangle)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE147
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE147
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL147
D;JGT
@R15
M=0
@END_BOOL147
0;JMP
(X_NEGATIVE_Y_POSITIVE147)
@R15
M=0
@END_BOOL147
0;JMP
(Y_NEGATIVE147)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE147
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL147
0;JMP
(X_AND_Y_NEGATIVE147)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL147
D;JGT
@R15
M=0
@END_BOOL147
0;JMP
(END_BOOL147)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE148
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE148
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL148
D;JGT
@R15
M=0
@END_BOOL148
0;JMP
(X_NEGATIVE_Y_POSITIVE148)
@R15
M=0
@END_BOOL148
0;JMP
(Y_NEGATIVE148)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE148
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL148
0;JMP
(X_AND_Y_NEGATIVE148)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL148
D;JGT
@R15
M=0
@END_BOOL148
0;JMP
(END_BOOL148)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE149
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE149
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL149
D;JLT
@R15
M=0
@END_BOOL149
0;JMP
(X_NEGATIVE_Y_POSITIVE149)
@R15
M=-1
@END_BOOL149
0;JMP
(Y_NEGATIVE149)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE149
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL149
0;JMP
(X_AND_Y_NEGATIVE149)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL149
D;JLT
@R15
M=0
@END_BOOL149
0;JMP
(END_BOOL149)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE150
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE150
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL150
D;JGT
@R15
M=0
@END_BOOL150
0;JMP
(X_NEGATIVE_Y_POSITIVE150)
@R15
M=0
@END_BOOL150
0;JMP
(Y_NEGATIVE150)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE150
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL150
0;JMP
(X_AND_Y_NEGATIVE150)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL150
D;JGT
@R15
M=0
@END_BOOL150
0;JMP
(END_BOOL150)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE151
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE151
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL151
D;JLT
@R15
M=0
@END_BOOL151
0;JMP
(X_NEGATIVE_Y_POSITIVE151)
@R15
M=-1
@END_BOOL151
0;JMP
(Y_NEGATIVE151)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE151
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL151
0;JMP
(X_AND_Y_NEGATIVE151)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL151
D;JLT
@R15
M=0
@END_BOOL151
0;JMP
(END_BOOL151)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE152
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE152
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL152
D;JGT
@R15
M=0
@END_BOOL152
0;JMP
(X_NEGATIVE_Y_POSITIVE152)
@R15
M=0
@END_BOOL152
0;JMP
(Y_NEGATIVE152)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE152
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL152
0;JMP
(X_AND_Y_NEGATIVE152)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL152
D;JGT
@R15
M=0
@END_BOOL152
0;JMP
(END_BOOL152)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawRectangle$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawRectangle$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawRectangle$IF_TRUE0)
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Screen.drawRectangle$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawRectangle$ret.17)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Screen.drawRectangle$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Screen.drawRectangle$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawRectangle$ret.18)
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawRectangle$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle$ret.19)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 7:
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Screen.drawRectangle$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawRectangle$ret.20)
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawRectangle$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle$ret.21)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 8:
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// not
@SP
A=M-1
M=!M
// C_POP local 6:
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawRectangle$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle$ret.22)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Screen.drawRectangle$WHILE_EXP0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE153
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE153
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL153
D;JGT
@R15
M=0
@END_BOOL153
0;JMP
(X_NEGATIVE_Y_POSITIVE153)
@R15
M=0
@END_BOOL153
0;JMP
(Y_NEGATIVE153)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE153
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL153
0;JMP
(X_AND_Y_NEGATIVE153)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL153
D;JGT
@R15
M=0
@END_BOOL153
0;JMP
(END_BOOL153)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.drawRectangle$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL154
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL154)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Screen.drawRectangle$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Screen.drawRectangle$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Screen.drawRectangle$IF_TRUE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// call Screen.updateLocation:
@Screen.drawRectangle$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.23)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Screen.drawRectangle$IF_END1
0;JMP
// label IF_FALSE1:
(Screen.drawRectangle$IF_FALSE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.updateLocation:
@Screen.drawRectangle$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.24)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Screen.drawRectangle$WHILE_EXP1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE155
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE155
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL155
D;JLT
@R15
M=0
@END_BOOL155
0;JMP
(X_NEGATIVE_Y_POSITIVE155)
@R15
M=-1
@END_BOOL155
0;JMP
(Y_NEGATIVE155)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE155
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL155
0;JMP
(X_AND_Y_NEGATIVE155)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL155
D;JLT
@R15
M=0
@END_BOOL155
0;JMP
(END_BOOL155)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Screen.drawRectangle$WHILE_END1
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Screen.updateLocation:
@Screen.drawRectangle$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.25)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Screen.drawRectangle$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Screen.drawRectangle$WHILE_END1)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.updateLocation:
@Screen.drawRectangle$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.26)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Screen.drawRectangle$IF_END1)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.drawRectangle$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.drawRectangle$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawRectangle:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawHorizontal:
(Screen.drawHorizontal)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.min:
@Screen.drawHorizontal$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.min
0;JMP
(Screen.drawHorizontal$ret.27)
// C_POP local 7:
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.max:
@Screen.drawHorizontal$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.max
0;JMP
(Screen.drawHorizontal$ret.28)
// C_POP local 8:
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE156
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE156
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL156
D;JGT
@R15
M=0
@END_BOOL156
0;JMP
(X_NEGATIVE_Y_POSITIVE156)
@R15
M=0
@END_BOOL156
0;JMP
(Y_NEGATIVE156)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE156
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL156
0;JMP
(X_AND_Y_NEGATIVE156)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL156
D;JGT
@R15
M=0
@END_BOOL156
0;JMP
(END_BOOL156)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 256:
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE157
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE157
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL157
D;JLT
@R15
M=0
@END_BOOL157
0;JMP
(X_NEGATIVE_Y_POSITIVE157)
@R15
M=-1
@END_BOOL157
0;JMP
(Y_NEGATIVE157)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE157
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL157
0;JMP
(X_AND_Y_NEGATIVE157)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL157
D;JLT
@R15
M=0
@END_BOOL157
0;JMP
(END_BOOL157)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 512:
@512
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE158
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE158
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL158
D;JLT
@R15
M=0
@END_BOOL158
0;JMP
(X_NEGATIVE_Y_POSITIVE158)
@R15
M=-1
@END_BOOL158
0;JMP
(Y_NEGATIVE158)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE158
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL158
0;JMP
(X_AND_Y_NEGATIVE158)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL158
D;JLT
@R15
M=0
@END_BOOL158
0;JMP
(END_BOOL158)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE159
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE159
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL159
D;JGT
@R15
M=0
@END_BOOL159
0;JMP
(X_NEGATIVE_Y_POSITIVE159)
@R15
M=0
@END_BOOL159
0;JMP
(Y_NEGATIVE159)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE159
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL159
0;JMP
(X_AND_Y_NEGATIVE159)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL159
D;JGT
@R15
M=0
@END_BOOL159
0;JMP
(END_BOOL159)
@R15
D=M
@SP
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawHorizontal$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawHorizontal$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawHorizontal$IF_TRUE0)
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.max:
@Screen.drawHorizontal$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.max
0;JMP
(Screen.drawHorizontal$ret.29)
// C_POP local 7:
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.min:
@Screen.drawHorizontal$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.min
0;JMP
(Screen.drawHorizontal$ret.30)
// C_POP local 8:
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Screen.drawHorizontal$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawHorizontal$ret.31)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 7:
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawHorizontal$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal$ret.32)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 9:
@LCL
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@Screen.drawHorizontal$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawHorizontal$ret.33)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 8:
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawHorizontal$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal$ret.34)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 10:
@LCL
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 9:
@LCL
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// not
@SP
A=M-1
M=!M
// C_POP local 5:
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 10:
@LCL
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH static 0:
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 32:
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawHorizontal$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal$ret.35)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 6:
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 6:
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL160
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL160)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Screen.drawHorizontal$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Screen.drawHorizontal$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Screen.drawHorizontal$IF_TRUE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// call Screen.updateLocation:
@Screen.drawHorizontal$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.36)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END1:
@Screen.drawHorizontal$IF_END1
0;JMP
// label IF_FALSE1:
(Screen.drawHorizontal$IF_FALSE1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 5:
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.updateLocation:
@Screen.drawHorizontal$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.37)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Screen.drawHorizontal$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE161
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE161
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL161
D;JLT
@R15
M=0
@END_BOOL161
0;JMP
(X_NEGATIVE_Y_POSITIVE161)
@R15
M=-1
@END_BOOL161
0;JMP
(Y_NEGATIVE161)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE161
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL161
0;JMP
(X_AND_Y_NEGATIVE161)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL161
D;JLT
@R15
M=0
@END_BOOL161
0;JMP
(END_BOOL161)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.drawHorizontal$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// call Screen.updateLocation:
@Screen.drawHorizontal$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.38)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.drawHorizontal$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.drawHorizontal$WHILE_END0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.updateLocation:
@Screen.drawHorizontal$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.39)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END1:
(Screen.drawHorizontal$IF_END1)
// label IF_FALSE0:
(Screen.drawHorizontal$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawHorizontal:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawSymetric:
(Screen.drawSymetric)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Screen.drawHorizontal:
@Screen.drawSymetric$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.40)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Screen.drawHorizontal:
@Screen.drawSymetric$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.41)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawHorizontal:
@Screen.drawSymetric$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.42)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 3:
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawHorizontal:
@Screen.drawSymetric$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.43)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawSymetric:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Screen.drawCircle:
(Screen.drawCircle)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE162
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE162
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL162
D;JLT
@R15
M=0
@END_BOOL162
0;JMP
(X_NEGATIVE_Y_POSITIVE162)
@R15
M=-1
@END_BOOL162
0;JMP
(Y_NEGATIVE162)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE162
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL162
0;JMP
(X_AND_Y_NEGATIVE162)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL162
D;JLT
@R15
M=0
@END_BOOL162
0;JMP
(END_BOOL162)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE163
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE163
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL163
D;JGT
@R15
M=0
@END_BOOL163
0;JMP
(X_NEGATIVE_Y_POSITIVE163)
@R15
M=0
@END_BOOL163
0;JMP
(Y_NEGATIVE163)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE163
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL163
0;JMP
(X_AND_Y_NEGATIVE163)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL163
D;JGT
@R15
M=0
@END_BOOL163
0;JMP
(END_BOOL163)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE164
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE164
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL164
D;JLT
@R15
M=0
@END_BOOL164
0;JMP
(X_NEGATIVE_Y_POSITIVE164)
@R15
M=-1
@END_BOOL164
0;JMP
(Y_NEGATIVE164)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE164
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL164
0;JMP
(X_AND_Y_NEGATIVE164)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL164
D;JLT
@R15
M=0
@END_BOOL164
0;JMP
(END_BOOL164)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE165
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE165
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL165
D;JGT
@R15
M=0
@END_BOOL165
0;JMP
(X_NEGATIVE_Y_POSITIVE165)
@R15
M=0
@END_BOOL165
0;JMP
(Y_NEGATIVE165)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE165
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL165
0;JMP
(X_AND_Y_NEGATIVE165)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL165
D;JGT
@R15
M=0
@END_BOOL165
0;JMP
(END_BOOL165)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Screen.drawCircle$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Screen.drawCircle$IF_TRUE0)
// C_PUSH constant 12:
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Screen.drawCircle$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawCircle$ret.44)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Screen.drawCircle$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE166
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE166
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL166
D;JLT
@R15
M=0
@END_BOOL166
0;JMP
(X_NEGATIVE_Y_POSITIVE166)
@R15
M=-1
@END_BOOL166
0;JMP
(Y_NEGATIVE166)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE166
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL166
0;JMP
(X_AND_Y_NEGATIVE166)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL166
D;JLT
@R15
M=0
@END_BOOL166
0;JMP
(END_BOOL166)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 511:
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE167
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE167
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL167
D;JGT
@R15
M=0
@END_BOOL167
0;JMP
(X_NEGATIVE_Y_POSITIVE167)
@R15
M=0
@END_BOOL167
0;JMP
(Y_NEGATIVE167)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE167
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL167
0;JMP
(X_AND_Y_NEGATIVE167)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL167
D;JGT
@R15
M=0
@END_BOOL167
0;JMP
(END_BOOL167)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE168
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE168
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL168
D;JLT
@R15
M=0
@END_BOOL168
0;JMP
(X_NEGATIVE_Y_POSITIVE168)
@R15
M=-1
@END_BOOL168
0;JMP
(Y_NEGATIVE168)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE168
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL168
0;JMP
(X_AND_Y_NEGATIVE168)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL168
D;JLT
@R15
M=0
@END_BOOL168
0;JMP
(END_BOOL168)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 255:
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE169
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE169
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL169
D;JGT
@R15
M=0
@END_BOOL169
0;JMP
(X_NEGATIVE_Y_POSITIVE169)
@R15
M=0
@END_BOOL169
0;JMP
(Y_NEGATIVE169)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE169
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL169
0;JMP
(X_AND_Y_NEGATIVE169)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL169
D;JGT
@R15
M=0
@END_BOOL169
0;JMP
(END_BOOL169)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@Screen.drawCircle$IF_FALSE1
0;JMP
// label IF_TRUE1:
(Screen.drawCircle$IF_TRUE1)
// C_PUSH constant 13:
@13
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Screen.drawCircle$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawCircle$ret.45)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(Screen.drawCircle$IF_FALSE1)
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawSymetric:
@Screen.drawCircle$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0;JMP
(Screen.drawCircle$ret.46)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(Screen.drawCircle$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE170
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE170
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL170
D;JGT
@R15
M=0
@END_BOOL170
0;JMP
(X_NEGATIVE_Y_POSITIVE170)
@R15
M=0
@END_BOOL170
0;JMP
(Y_NEGATIVE170)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE170
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL170
0;JMP
(X_AND_Y_NEGATIVE170)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL170
D;JGT
@R15
M=0
@END_BOOL170
0;JMP
(END_BOOL170)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Screen.drawCircle$WHILE_END0
D;JNE
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE171
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE171
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL171
D;JLT
@R15
M=0
@END_BOOL171
0;JMP
(X_NEGATIVE_Y_POSITIVE171)
@R15
M=-1
@END_BOOL171
0;JMP
(Y_NEGATIVE171)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE171
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL171
0;JMP
(X_AND_Y_NEGATIVE171)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL171
D;JLT
@R15
M=0
@END_BOOL171
0;JMP
(END_BOOL171)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@Screen.drawCircle$IF_FALSE2
0;JMP
// label IF_TRUE2:
(Screen.drawCircle$IF_TRUE2)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@Screen.drawCircle$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawCircle$ret.47)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END2:
@Screen.drawCircle$IF_END2
0;JMP
// label IF_FALSE2:
(Screen.drawCircle$IF_FALSE2)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 2:
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.multiply:
@Screen.drawCircle$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawCircle$ret.48)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 5:
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_END2:
(Screen.drawCircle$IF_END2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Screen.drawSymetric:
@Screen.drawCircle$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0;JMP
(Screen.drawCircle$ret.49)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Screen.drawCircle$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Screen.drawCircle$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Screen.drawCircle:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.new:
(String.new)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.alloc:
@String.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(String.new$ret.1)
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE172
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE172
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL172
D;JLT
@R15
M=0
@END_BOOL172
0;JMP
(X_NEGATIVE_Y_POSITIVE172)
@R15
M=-1
@END_BOOL172
0;JMP
(Y_NEGATIVE172)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE172
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL172
0;JMP
(X_AND_Y_NEGATIVE172)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL172
D;JLT
@R15
M=0
@END_BOOL172
0;JMP
(END_BOOL172)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.new$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.new$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.new$IF_TRUE0)
// C_PUSH constant 14:
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.new$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.new$IF_FALSE0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE173
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE173
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL173
D;JGT
@R15
M=0
@END_BOOL173
0;JMP
(X_NEGATIVE_Y_POSITIVE173)
@R15
M=0
@END_BOOL173
0;JMP
(Y_NEGATIVE173)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE173
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL173
0;JMP
(X_AND_Y_NEGATIVE173)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL173
D;JGT
@R15
M=0
@END_BOOL173
0;JMP
(END_BOOL173)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@String.new$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@String.new$IF_FALSE1
0;JMP
// label IF_TRUE1:
(String.new$IF_TRUE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@String.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(String.new$ret.3)
// C_POP this 1:
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(String.new$IF_FALSE1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 0:
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return String.new:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.dispose:
(String.dispose)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE174
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE174
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL174
D;JGT
@R15
M=0
@END_BOOL174
0;JMP
(X_NEGATIVE_Y_POSITIVE174)
@R15
M=0
@END_BOOL174
0;JMP
(Y_NEGATIVE174)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE174
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL174
0;JMP
(X_AND_Y_NEGATIVE174)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL174
D;JGT
@R15
M=0
@END_BOOL174
0;JMP
(END_BOOL174)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.dispose$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.dispose$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.dispose$IF_TRUE0)
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Array.dispose:
@String.dispose$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(String.dispose$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.dispose$IF_FALSE0)
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.deAlloc:
@String.dispose$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(String.dispose$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.dispose:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.length:
(String.length)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return String.length:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.charAt:
(String.charAt)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE175
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE175
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL175
D;JLT
@R15
M=0
@END_BOOL175
0;JMP
(X_NEGATIVE_Y_POSITIVE175)
@R15
M=-1
@END_BOOL175
0;JMP
(Y_NEGATIVE175)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE175
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL175
0;JMP
(X_AND_Y_NEGATIVE175)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL175
D;JLT
@R15
M=0
@END_BOOL175
0;JMP
(END_BOOL175)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE176
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE176
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL176
D;JGT
@R15
M=0
@END_BOOL176
0;JMP
(X_NEGATIVE_Y_POSITIVE176)
@R15
M=0
@END_BOOL176
0;JMP
(Y_NEGATIVE176)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE176
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL176
0;JMP
(X_AND_Y_NEGATIVE176)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL176
D;JGT
@R15
M=0
@END_BOOL176
0;JMP
(END_BOOL176)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL177
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL177)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.charAt$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.charAt$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.charAt$IF_TRUE0)
// C_PUSH constant 15:
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.charAt$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.charAt$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.charAt$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return String.charAt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.setCharAt:
(String.setCharAt)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE178
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE178
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL178
D;JLT
@R15
M=0
@END_BOOL178
0;JMP
(X_NEGATIVE_Y_POSITIVE178)
@R15
M=-1
@END_BOOL178
0;JMP
(Y_NEGATIVE178)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE178
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL178
0;JMP
(X_AND_Y_NEGATIVE178)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL178
D;JLT
@R15
M=0
@END_BOOL178
0;JMP
(END_BOOL178)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE179
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE179
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL179
D;JGT
@R15
M=0
@END_BOOL179
0;JMP
(X_NEGATIVE_Y_POSITIVE179)
@R15
M=0
@END_BOOL179
0;JMP
(Y_NEGATIVE179)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE179
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL179
0;JMP
(X_AND_Y_NEGATIVE179)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL179
D;JGT
@R15
M=0
@END_BOOL179
0;JMP
(END_BOOL179)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL180
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL180)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.setCharAt$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.setCharAt$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.setCharAt$IF_TRUE0)
// C_PUSH constant 16:
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.setCharAt$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setCharAt$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.setCharAt$IF_FALSE0)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 2:
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.setCharAt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.appendChar:
(String.appendChar)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL181
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL181)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.appendChar$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.appendChar$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.appendChar$IF_TRUE0)
// C_PUSH constant 17:
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.appendChar$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.appendChar$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.appendChar$IF_FALSE0)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH pointer 0:
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return String.appendChar:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.eraseLastChar:
(String.eraseLastChar)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL182
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL182)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.eraseLastChar$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.eraseLastChar$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.eraseLastChar$IF_TRUE0)
// C_PUSH constant 18:
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.eraseLastChar$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.eraseLastChar$ret.9)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.eraseLastChar$IF_FALSE0)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.eraseLastChar:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.intValue:
(String.intValue)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL183
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL183)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.intValue$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.intValue$IF_TRUE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.intValue:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// label IF_FALSE0:
(String.intValue$IF_FALSE0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL184
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL184)
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@String.intValue$IF_FALSE1
0;JMP
// label IF_TRUE1:
(String.intValue$IF_TRUE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 4:
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(String.intValue$IF_FALSE1)
// label WHILE_EXP0:
(String.intValue$WHILE_EXP0)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE185
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE185
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL185
D;JLT
@R15
M=0
@END_BOOL185
0;JMP
(X_NEGATIVE_Y_POSITIVE185)
@R15
M=-1
@END_BOOL185
0;JMP
(Y_NEGATIVE185)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE185
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL185
0;JMP
(X_AND_Y_NEGATIVE185)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL185
D;JLT
@R15
M=0
@END_BOOL185
0;JMP
(END_BOOL185)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@String.intValue$WHILE_END0
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE186
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE186
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL186
D;JLT
@R15
M=0
@END_BOOL186
0;JMP
(X_NEGATIVE_Y_POSITIVE186)
@R15
M=-1
@END_BOOL186
0;JMP
(Y_NEGATIVE186)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE186
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL186
0;JMP
(X_AND_Y_NEGATIVE186)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL186
D;JLT
@R15
M=0
@END_BOOL186
0;JMP
(END_BOOL186)
@R15
D=M
@SP
A=M-1
M=D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 9:
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE187
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE187
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL187
D;JGT
@R15
M=0
@END_BOOL187
0;JMP
(X_NEGATIVE_Y_POSITIVE187)
@R15
M=0
@END_BOOL187
0;JMP
(Y_NEGATIVE187)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE187
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL187
0;JMP
(X_AND_Y_NEGATIVE187)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL187
D;JGT
@R15
M=0
@END_BOOL187
0;JMP
(END_BOOL187)
@R15
D=M
@SP
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// not
@SP
A=M-1
M=!M
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@String.intValue$IF_FALSE2
0;JMP
// label IF_TRUE2:
(String.intValue$IF_TRUE2)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@String.intValue$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(String.intValue$ret.10)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(String.intValue$IF_FALSE2)
// goto WHILE_EXP0:
@String.intValue$WHILE_EXP0
0;JMP
// label WHILE_END0:
(String.intValue$WHILE_END0)
// C_PUSH local 4:
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@String.intValue$IF_FALSE3
0;JMP
// label IF_TRUE3:
(String.intValue$IF_TRUE3)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(String.intValue$IF_FALSE3)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return String.intValue:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.setInt:
(String.setInt)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP pointer 0:
@THIS
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL188
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL188)
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@String.setInt$IF_FALSE0
0;JMP
// label IF_TRUE0:
(String.setInt$IF_TRUE0)
// C_PUSH constant 19:
@19
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.setInt$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setInt$ret.11)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(String.setInt$IF_FALSE0)
// C_PUSH constant 6:
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.new:
@String.setInt$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(String.setInt$ret.12)
// C_POP local 2:
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE189
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE189
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL189
D;JLT
@R15
M=0
@END_BOOL189
0;JMP
(X_NEGATIVE_Y_POSITIVE189)
@R15
M=-1
@END_BOOL189
0;JMP
(Y_NEGATIVE189)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE189
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL189
0;JMP
(X_AND_Y_NEGATIVE189)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL189
D;JLT
@R15
M=0
@END_BOOL189
0;JMP
(END_BOOL189)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE1:
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE1
D;JNE
// goto IF_FALSE1:
@String.setInt$IF_FALSE1
0;JMP
// label IF_TRUE1:
(String.setInt$IF_TRUE1)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// C_POP local 3:
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE1:
(String.setInt$IF_FALSE1)
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP0:
(String.setInt$WHILE_EXP0)
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE190
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE190
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL190
D;JGT
@R15
M=0
@END_BOOL190
0;JMP
(X_NEGATIVE_Y_POSITIVE190)
@R15
M=0
@END_BOOL190
0;JMP
(Y_NEGATIVE190)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE190
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL190
0;JMP
(X_AND_Y_NEGATIVE190)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL190
D;JGT
@R15
M=0
@END_BOOL190
0;JMP
(END_BOOL190)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@String.setInt$WHILE_END0
D;JNE
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.divide:
@String.setInt$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(String.setInt$ret.13)
// C_POP local 1:
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 1:
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 10:
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Math.multiply:
@String.setInt$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(String.setInt$ret.14)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 1:
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP argument 1:
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@String.setInt$WHILE_EXP0
0;JMP
// label WHILE_END0:
(String.setInt$WHILE_END0)
// C_PUSH local 3:
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// if goto IF_TRUE2:
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE2
D;JNE
// goto IF_FALSE2:
@String.setInt$IF_FALSE2
0;JMP
// label IF_TRUE2:
(String.setInt$IF_TRUE2)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 45:
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE2:
(String.setInt$IF_FALSE2)
// C_PUSH this 0:
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE191
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE191
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL191
D;JLT
@R15
M=0
@END_BOOL191
0;JMP
(X_NEGATIVE_Y_POSITIVE191)
@R15
M=-1
@END_BOOL191
0;JMP
(Y_NEGATIVE191)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE191
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL191
0;JMP
(X_AND_Y_NEGATIVE191)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL191
D;JLT
@R15
M=0
@END_BOOL191
0;JMP
(END_BOOL191)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE3:
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE3
D;JNE
// goto IF_FALSE3:
@String.setInt$IF_FALSE3
0;JMP
// label IF_TRUE3:
(String.setInt$IF_TRUE3)
// C_PUSH constant 19:
@19
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@String.setInt$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setInt$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE3:
(String.setInt$IF_FALSE3)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=0
@NOT_EQUAL192
D;JNE
// Handle the equal case by setting -1 (true)
@SP
A=M-1
M=-1
(NOT_EQUAL192)
// if goto IF_TRUE4:
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE4
D;JNE
// goto IF_FALSE4:
@String.setInt$IF_FALSE4
0;JMP
// label IF_TRUE4:
(String.setInt$IF_TRUE4)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH constant 48:
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto IF_END4:
@String.setInt$IF_END4
0;JMP
// label IF_FALSE4:
(String.setInt$IF_FALSE4)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(String.setInt$WHILE_EXP1)
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE193
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE193
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL193
D;JLT
@R15
M=0
@END_BOOL193
0;JMP
(X_NEGATIVE_Y_POSITIVE193)
@R15
M=-1
@END_BOOL193
0;JMP
(Y_NEGATIVE193)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE193
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL193
0;JMP
(X_AND_Y_NEGATIVE193)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL193
D;JLT
@R15
M=0
@END_BOOL193
0;JMP
(END_BOOL193)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@String.setInt$WHILE_END1
D;JNE
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 1:
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH that 0:
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_POP pointer 1:
@THAT
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH temp 0:
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_POP that 0:
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH this 2:
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// C_POP this 2:
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@String.setInt$WHILE_EXP1
0;JMP
// label WHILE_END1:
(String.setInt$WHILE_END1)
// label IF_END4:
(String.setInt$IF_END4)
// C_PUSH local 2:
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Array.dispose:
@String.setInt$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(String.setInt$ret.16)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.setInt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.newLine:
(String.newLine)
// C_PUSH constant 128:
@128
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.newLine:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.backSpace:
(String.backSpace)
// C_PUSH constant 129:
@129
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.backSpace:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton String.doubleQuote:
(String.doubleQuote)
// C_PUSH constant 34:
@34
D=A
@SP
A=M
M=D
@SP
M=M+1
// return String.doubleQuote:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Sys.init:
(Sys.init)
// call Memory.init:
@Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Sys.init$ret.1)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Math.init:
@Sys.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Sys.init$ret.2)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Screen.init:
@Sys.init$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.init
0;JMP
(Sys.init$ret.3)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.init:
@Sys.init$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.init
0;JMP
(Sys.init$ret.4)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Keyboard.init:
@Sys.init$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.init
0;JMP
(Sys.init$ret.5)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Main.main:
@Sys.init$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Sys.init$ret.6)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.halt:
@Sys.init$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.init$ret.7)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Sys.init:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Sys.halt:
(Sys.halt)
// label WHILE_EXP0:
(Sys.halt$WHILE_EXP0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Sys.halt$WHILE_END0
D;JNE
// goto WHILE_EXP0:
@Sys.halt$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Sys.halt$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Sys.halt:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Sys.wait:
(Sys.wait)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
@Y_NEGATIVE194
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE194
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL194
D;JLT
@R15
M=0
@END_BOOL194
0;JMP
(X_NEGATIVE_Y_POSITIVE194)
@R15
M=-1
@END_BOOL194
0;JMP
(Y_NEGATIVE194)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE194
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=0
@END_BOOL194
0;JMP
(X_AND_Y_NEGATIVE194)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL194
D;JLT
@R15
M=0
@END_BOOL194
0;JMP
(END_BOOL194)
@R15
D=M
@SP
A=M-1
M=D
// if goto IF_TRUE0:
@SP
AM=M-1
D=M
@Sys.wait$IF_TRUE0
D;JNE
// goto IF_FALSE0:
@Sys.wait$IF_FALSE0
0;JMP
// label IF_TRUE0:
(Sys.wait$IF_TRUE0)
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.error:
@Sys.wait$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.wait$ret.8)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label IF_FALSE0:
(Sys.wait$IF_FALSE0)
// label WHILE_EXP0:
(Sys.wait$WHILE_EXP0)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE195
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE195
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL195
D;JGT
@R15
M=0
@END_BOOL195
0;JMP
(X_NEGATIVE_Y_POSITIVE195)
@R15
M=0
@END_BOOL195
0;JMP
(Y_NEGATIVE195)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE195
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL195
0;JMP
(X_AND_Y_NEGATIVE195)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL195
D;JGT
@R15
M=0
@END_BOOL195
0;JMP
(END_BOOL195)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END0:
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END0
D;JNE
// C_PUSH constant 50:
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label WHILE_EXP1:
(Sys.wait$WHILE_EXP1)
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
@Y_NEGATIVE196
D;JLT
@R14
M=D
@SP
A=M-1
D=M
@X_NEGATIVE_Y_POSITIVE196
D;JLT
// Handle the case where both are positive or zero:
@R14
D=D-M
@R15
M=-1
@END_BOOL196
D;JGT
@R15
M=0
@END_BOOL196
0;JMP
(X_NEGATIVE_Y_POSITIVE196)
@R15
M=0
@END_BOOL196
0;JMP
(Y_NEGATIVE196)
@R14
M=D
@SP
A=M-1
D=M
@X_AND_Y_NEGATIVE196
D;JLT
// Handle the case where x>=0 and y<0:
@R15
M=-1
@END_BOOL196
0;JMP
(X_AND_Y_NEGATIVE196)
// Handle the case where both negative:
@R14
D=D-M
@R15
M=-1
@END_BOOL196
D;JGT
@R15
M=0
@END_BOOL196
0;JMP
(END_BOOL196)
@R15
D=M
@SP
A=M-1
M=D
// not
@SP
A=M-1
M=!M
// if goto WHILE_END1:
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END1
D;JNE
// C_PUSH local 0:
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP local 0:
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP1:
@Sys.wait$WHILE_EXP1
0;JMP
// label WHILE_END1:
(Sys.wait$WHILE_END1)
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// C_PUSH constant 1:
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// C_POP argument 0:
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto WHILE_EXP0:
@Sys.wait$WHILE_EXP0
0;JMP
// label WHILE_END0:
(Sys.wait$WHILE_END0)
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Sys.wait:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// funciton Sys.error:
(Sys.error)
// C_PUSH constant 3:
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.new:
@Sys.error$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Sys.error$ret.9)
// C_PUSH constant 69:
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Sys.error$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error$ret.10)
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Sys.error$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error$ret.11)
// C_PUSH constant 82:
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call String.appendChar:
@Sys.error$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error$ret.12)
// call Output.printString:
@Sys.error$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Sys.error$ret.13)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH argument 0:
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Output.printInt:
@Sys.error$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0;JMP
(Sys.error$ret.14)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.halt:
@Sys.error$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.error$ret.15)
// C_POP temp 0:
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// C_PUSH constant 0:
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return Sys.error:
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
