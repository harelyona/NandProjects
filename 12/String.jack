// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array string;
    field int size, maxSize;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
    let size = 0;
    let maxSize = maxLength;
    let string = Array.new(maxLength);
    return this;
    }

    /** Disposes this string. */
    method void dispose() {
    do string.dispose();
    return;
    }

    /** Returns the current length of this string. */
    method int length() {
    return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
    return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    let string[j] = c;
    return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    if (size < maxSize) {
        let string[size] = c;
        let size = size + 1;
    }
    return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    if (size > 0) {
        let size = size - 1;
        }
    return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val, i, d;
        var boolean is_neg;
        let val = 0;
        let i = 0;
        let is_neg = false;
        // Check for negative sign
        if (charAt(0) = 45) {
            let is_neg = true;
            let i = 1;
        }
        while (i < size) {
            let d = asciiToInt(charAt(i));
            let val = val * 10 + d;
            let i = i + 1;
        }
        if (is_neg) {
            let val = -1 * val;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        var int i;
        var boolean is_neg;
        let is_neg = false;
        do String.emptyString();

        // Handle for negative sign
        if (val < 0) {
            let is_neg = true;
            let val = Math.abs(val);
            do appendChar(45);
        }

        do setInt2String(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() { return 128; }

    /** Returns the backspace character. */
    function char backSpace() { return 129; }

    /** Returns the double quote (") character. */
    function char doubleQuote() { return 34; }

    method char digitToChar(int digit) {
        return (digit + 48);
    }

    method int asciiToInt(char c) {
        return (c - 48);
    }
    method boolean isDigit(char c) {
        return ((c > 47) & (c < 58));
    }

    method void setInt2String(int val) {
    var int lastDigit;

    let lastDigit = getLastDigit(val);

    if (val < 10) {
        do appendChar(digitToChar(lastDigit));
        return;
    }

    do setInt2String(val / 10);
    do appendChar(digitToChar(lastDigit));
    return;
    }


    method String emptyString(){
        let size = 0;
        return this;
    }

    function int getLastDigit(int val){
        var int num;
        let num = val / 10;
        return val-(num*10);
    }
}
