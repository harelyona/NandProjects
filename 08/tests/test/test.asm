@256
D=A
@SP
M=D
// call function Sys.init 0
@$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
($ret.1)
// write function Array.new 0
(Array.new)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE1
D;JGT
@y_NEGATIVE1
D;JLT
@NORMAL_CASE1
0;JMP
(y_POSITIVE1)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE1
D;JLT
@NORMAL_CASE1
0;JMP
(NEGATIVE_POSITIVE1)
@SP
M=M-1
A=M-1
M=0
@CONTINUE1
0;JMP
(y_NEGATIVE1)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE1
D;JGT
@NORMAL_CASE1
0;JMP
(POSITIVE_NEGATIVE1)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE1
0;JMP
(NORMAL_CASE1)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE1
D;JGT
@SP
A=M-1
M=0
@CONTINUE1
0;JMP
(TRUE1)
@SP
A=M-1
M=-1
(CONTINUE1)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Array.new$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Array.new$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Array.new$IF_TRUE0)
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Array.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Array.new$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Array.new$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.alloc 1
@Array.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Array.new$ret.3)
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Array.dispose 0
(Array.dispose)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.deAlloc 1
@Array.dispose$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Array.dispose$ret.4)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Main.main 12
(Main.main)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 6
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Main.main$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.main$ret.1)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Main.main$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.main$ret.2)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Main.main$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Main.main$ret.3)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Main.main$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.main$ret.4)
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Main.main$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.main$ret.5)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Main.main$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Main.main$ret.6)
//pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.poke 2
@Main.main$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.main$ret.7)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 5001
@5001
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.poke 2
@Main.main$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.main$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 5002
@5002
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.poke 2
@Main.main$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.poke
0;JMP
(Main.main$ret.9)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.init 1
(Math.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@Math.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init$ret.1)
//pop static 1
@Math.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@Math.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init$ret.2)
//pop static 0
@Math.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Math.init$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE2
D;JGT
@y_NEGATIVE2
D;JLT
@NORMAL_CASE2
0;JMP
(y_POSITIVE2)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE2
D;JLT
@NORMAL_CASE2
0;JMP
(NEGATIVE_POSITIVE2)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE2
0;JMP
(y_NEGATIVE2)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE2
D;JGT
@NORMAL_CASE2
0;JMP
(POSITIVE_NEGATIVE2)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE2
0;JMP
(NORMAL_CASE2)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE2
D;JLT
@SP
A=M-1
M=0
@CONTINUE2
0;JMP
(TRUE2)
@SP
A=M-1
M=-1
(CONTINUE2)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.init$WHILE_END0

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Math.init$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Math.init$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.abs 0
(Math.abs)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE11
D;JGT
@y_NEGATIVE11
D;JLT
@NORMAL_CASE11
0;JMP
(y_POSITIVE11)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE11
D;JLT
@NORMAL_CASE11
0;JMP
(NEGATIVE_POSITIVE11)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE11
0;JMP
(y_NEGATIVE11)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE11
D;JGT
@NORMAL_CASE11
0;JMP
(POSITIVE_NEGATIVE11)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE11
0;JMP
(NORMAL_CASE11)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE11
D;JLT
@SP
A=M-1
M=0
@CONTINUE11
0;JMP
(TRUE11)
@SP
A=M-1
M=-1
(CONTINUE11)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.abs$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.abs$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.abs$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.abs$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.multiply 5
(Math.multiply)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE13
D;JGT
@y_NEGATIVE13
D;JLT
@NORMAL_CASE13
0;JMP
(y_POSITIVE13)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE13
D;JLT
@NORMAL_CASE13
0;JMP
(NEGATIVE_POSITIVE13)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE13
0;JMP
(y_NEGATIVE13)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE13
D;JGT
@NORMAL_CASE13
0;JMP
(POSITIVE_NEGATIVE13)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE13
0;JMP
(NORMAL_CASE13)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE13
D;JLT
@SP
A=M-1
M=0
@CONTINUE13
0;JMP
(TRUE13)
@SP
A=M-1
M=-1
(CONTINUE13)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE14
D;JGT
@y_NEGATIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(y_POSITIVE14)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(NEGATIVE_POSITIVE14)
@SP
M=M-1
A=M-1
M=0
@CONTINUE14
0;JMP
(y_NEGATIVE14)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE14
D;JGT
@NORMAL_CASE14
0;JMP
(POSITIVE_NEGATIVE14)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE14
0;JMP
(NORMAL_CASE14)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE14
D;JGT
@SP
A=M-1
M=0
@CONTINUE14
0;JMP
(TRUE14)
@SP
A=M-1
M=-1
(CONTINUE14)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE16
D;JGT
@y_NEGATIVE16
D;JLT
@NORMAL_CASE16
0;JMP
(y_POSITIVE16)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE16
D;JLT
@NORMAL_CASE16
0;JMP
(NEGATIVE_POSITIVE16)
@SP
M=M-1
A=M-1
M=0
@CONTINUE16
0;JMP
(y_NEGATIVE16)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE16
D;JGT
@NORMAL_CASE16
0;JMP
(POSITIVE_NEGATIVE16)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE16
0;JMP
(NORMAL_CASE16)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE16
D;JGT
@SP
A=M-1
M=0
@CONTINUE16
0;JMP
(TRUE16)
@SP
A=M-1
M=-1
(CONTINUE16)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE17
D;JGT
@y_NEGATIVE17
D;JLT
@NORMAL_CASE17
0;JMP
(y_POSITIVE17)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE17
D;JLT
@NORMAL_CASE17
0;JMP
(NEGATIVE_POSITIVE17)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE17
0;JMP
(y_NEGATIVE17)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE17
D;JGT
@NORMAL_CASE17
0;JMP
(POSITIVE_NEGATIVE17)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE17
0;JMP
(NORMAL_CASE17)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE17
D;JLT
@SP
A=M-1
M=0
@CONTINUE17
0;JMP
(TRUE17)
@SP
A=M-1
M=-1
(CONTINUE17)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.abs 1
@Math.multiply$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply$ret.3)
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.abs 1
@Math.multiply$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply$ret.4)
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE20
D;JGT
@y_NEGATIVE20
D;JLT
@NORMAL_CASE20
0;JMP
(y_POSITIVE20)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE20
D;JLT
@NORMAL_CASE20
0;JMP
(NEGATIVE_POSITIVE20)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE20
0;JMP
(y_NEGATIVE20)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE20
D;JGT
@NORMAL_CASE20
0;JMP
(POSITIVE_NEGATIVE20)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE20
0;JMP
(NORMAL_CASE20)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE20
D;JLT
@SP
A=M-1
M=0
@CONTINUE20
0;JMP
(TRUE20)
@SP
A=M-1
M=-1
(CONTINUE20)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.multiply$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.multiply$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.multiply$IF_FALSE0)
// write label WHILE_EXP0
(Math.multiply$WHILE_EXP0)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE21
D;JGT
@y_NEGATIVE21
D;JLT
@NORMAL_CASE21
0;JMP
(y_POSITIVE21)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE21
D;JLT
@NORMAL_CASE21
0;JMP
(NEGATIVE_POSITIVE21)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE21
0;JMP
(y_NEGATIVE21)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE21
D;JGT
@NORMAL_CASE21
0;JMP
(POSITIVE_NEGATIVE21)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE21
0;JMP
(NORMAL_CASE21)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE21
D;JLT
@SP
A=M-1
M=0
@CONTINUE21
0;JMP
(TRUE21)
@SP
A=M-1
M=-1
(CONTINUE21)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.multiply$WHILE_END0

D;JNE
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE25
D;JGT
@y_NEGATIVE25
D;JLT
@NORMAL_CASE25
0;JMP
(y_POSITIVE25)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE25
D;JLT
@NORMAL_CASE25
0;JMP
(NEGATIVE_POSITIVE25)
@SP
M=M-1
A=M-1
M=0
@CONTINUE25
0;JMP
(y_NEGATIVE25)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE25
D;JGT
@NORMAL_CASE25
0;JMP
(POSITIVE_NEGATIVE25)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE25
0;JMP
(NORMAL_CASE25)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE25
D;JGT
@SP
A=M-1
M=0
@CONTINUE25
0;JMP
(TRUE25)
@SP
A=M-1
M=-1
(CONTINUE25)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Math.multiply$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Math.multiply$IF_TRUE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(Math.multiply$IF_FALSE1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Math.multiply$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Math.multiply$WHILE_END0)
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Math.multiply$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Math.multiply$IF_TRUE2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(Math.multiply$IF_FALSE2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.divide 4
(Math.divide)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE32)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE32
D;JEQ
@SP
A=M-1
M=0
@CONTINUE32
0;JMP
(TRUE32)
@SP
A=M-1
M=-1
(CONTINUE32)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.divide$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.divide$IF_TRUE0)
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Math.divide$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.divide$ret.5)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.divide$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE33
D;JGT
@y_NEGATIVE33
D;JLT
@NORMAL_CASE33
0;JMP
(y_POSITIVE33)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE33
D;JLT
@NORMAL_CASE33
0;JMP
(NEGATIVE_POSITIVE33)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE33
0;JMP
(y_NEGATIVE33)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE33
D;JGT
@NORMAL_CASE33
0;JMP
(POSITIVE_NEGATIVE33)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE33
0;JMP
(NORMAL_CASE33)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE33
D;JLT
@SP
A=M-1
M=0
@CONTINUE33
0;JMP
(TRUE33)
@SP
A=M-1
M=-1
(CONTINUE33)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE34
D;JGT
@y_NEGATIVE34
D;JLT
@NORMAL_CASE34
0;JMP
(y_POSITIVE34)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE34
D;JLT
@NORMAL_CASE34
0;JMP
(NEGATIVE_POSITIVE34)
@SP
M=M-1
A=M-1
M=0
@CONTINUE34
0;JMP
(y_NEGATIVE34)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE34
D;JGT
@NORMAL_CASE34
0;JMP
(POSITIVE_NEGATIVE34)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE34
0;JMP
(NORMAL_CASE34)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE34
D;JGT
@SP
A=M-1
M=0
@CONTINUE34
0;JMP
(TRUE34)
@SP
A=M-1
M=-1
(CONTINUE34)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE36
D;JGT
@y_NEGATIVE36
D;JLT
@NORMAL_CASE36
0;JMP
(y_POSITIVE36)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE36
D;JLT
@NORMAL_CASE36
0;JMP
(NEGATIVE_POSITIVE36)
@SP
M=M-1
A=M-1
M=0
@CONTINUE36
0;JMP
(y_NEGATIVE36)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE36
D;JGT
@NORMAL_CASE36
0;JMP
(POSITIVE_NEGATIVE36)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE36
0;JMP
(NORMAL_CASE36)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE36
D;JGT
@SP
A=M-1
M=0
@CONTINUE36
0;JMP
(TRUE36)
@SP
A=M-1
M=-1
(CONTINUE36)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE37
D;JGT
@y_NEGATIVE37
D;JLT
@NORMAL_CASE37
0;JMP
(y_POSITIVE37)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE37
D;JLT
@NORMAL_CASE37
0;JMP
(NEGATIVE_POSITIVE37)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE37
0;JMP
(y_NEGATIVE37)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE37
D;JGT
@NORMAL_CASE37
0;JMP
(POSITIVE_NEGATIVE37)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE37
0;JMP
(NORMAL_CASE37)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE37
D;JLT
@SP
A=M-1
M=0
@CONTINUE37
0;JMP
(TRUE37)
@SP
A=M-1
M=-1
(CONTINUE37)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.abs 1
@Math.divide$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.abs 1
@Math.divide$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide$ret.7)
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Math.divide$WHILE_EXP0)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.divide$WHILE_END0

D;JNE
//push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE46
D;JGT
@y_NEGATIVE46
D;JLT
@NORMAL_CASE46
0;JMP
(y_POSITIVE46)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE46
D;JLT
@NORMAL_CASE46
0;JMP
(NEGATIVE_POSITIVE46)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE46
0;JMP
(y_NEGATIVE46)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE46
D;JGT
@NORMAL_CASE46
0;JMP
(POSITIVE_NEGATIVE46)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE46
0;JMP
(NORMAL_CASE46)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE46
D;JLT
@SP
A=M-1
M=0
@CONTINUE46
0;JMP
(TRUE46)
@SP
A=M-1
M=-1
(CONTINUE46)
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Math.divide$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Math.divide$IF_TRUE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE55
D;JGT
@y_NEGATIVE55
D;JLT
@NORMAL_CASE55
0;JMP
(y_POSITIVE55)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE55
D;JLT
@NORMAL_CASE55
0;JMP
(NEGATIVE_POSITIVE55)
@SP
M=M-1
A=M-1
M=0
@CONTINUE55
0;JMP
(y_NEGATIVE55)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE55
D;JGT
@NORMAL_CASE55
0;JMP
(POSITIVE_NEGATIVE55)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE55
0;JMP
(NORMAL_CASE55)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE55
D;JGT
@SP
A=M-1
M=0
@CONTINUE55
0;JMP
(TRUE55)
@SP
A=M-1
M=-1
(CONTINUE55)
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Math.divide$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Math.divide$IF_TRUE2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(Math.divide$IF_FALSE2)
// write label IF_FALSE1
(Math.divide$IF_FALSE1)
// write goto WHILE_EXP0
@Math.divide$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Math.divide$WHILE_END0)
// write label WHILE_EXP1
(Math.divide$WHILE_EXP1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//gt
@SP
A=M-1
D=M

@y_POSITIVE59
D;JGT
@y_NEGATIVE59
D;JLT
@NORMAL_CASE59
0;JMP
(y_POSITIVE59)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE59
D;JLT
@NORMAL_CASE59
0;JMP
(NEGATIVE_POSITIVE59)
@SP
M=M-1
A=M-1
M=0
@CONTINUE59
0;JMP
(y_NEGATIVE59)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE59
D;JGT
@NORMAL_CASE59
0;JMP
(POSITIVE_NEGATIVE59)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE59
0;JMP
(NORMAL_CASE59)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE59
D;JGT
@SP
A=M-1
M=0
@CONTINUE59
0;JMP
(TRUE59)
@SP
A=M-1
M=-1
(CONTINUE59)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END1
@SP
AM=M-1
D=M
@Math.divide$WHILE_END1

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE62
D;JGT
@y_NEGATIVE62
D;JLT
@NORMAL_CASE62
0;JMP
(y_POSITIVE62)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE62
D;JLT
@NORMAL_CASE62
0;JMP
(NEGATIVE_POSITIVE62)
@SP
M=M-1
A=M-1
M=0
@CONTINUE62
0;JMP
(y_NEGATIVE62)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE62
D;JGT
@NORMAL_CASE62
0;JMP
(POSITIVE_NEGATIVE62)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE62
0;JMP
(NORMAL_CASE62)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE62
D;JGT
@SP
A=M-1
M=0
@CONTINUE62
0;JMP
(TRUE62)
@SP
A=M-1
M=-1
(CONTINUE62)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@Math.divide$IF_FALSE3
0;JMP
// write label IF_TRUE3
(Math.divide$IF_TRUE3)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE3
(Math.divide$IF_FALSE3)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP1
@Math.divide$WHILE_EXP1
0;JMP
// write label WHILE_END1
(Math.divide$WHILE_END1)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE4
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE4

D;JNE
// write goto IF_FALSE4
@Math.divide$IF_FALSE4
0;JMP
// write label IF_TRUE4
(Math.divide$IF_TRUE4)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE4
(Math.divide$IF_FALSE4)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.sqrt 2
(Math.sqrt)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE70
D;JGT
@y_NEGATIVE70
D;JLT
@NORMAL_CASE70
0;JMP
(y_POSITIVE70)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE70
D;JLT
@NORMAL_CASE70
0;JMP
(NEGATIVE_POSITIVE70)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE70
0;JMP
(y_NEGATIVE70)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE70
D;JGT
@NORMAL_CASE70
0;JMP
(POSITIVE_NEGATIVE70)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE70
0;JMP
(NORMAL_CASE70)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE70
D;JLT
@SP
A=M-1
M=0
@CONTINUE70
0;JMP
(TRUE70)
@SP
A=M-1
M=-1
(CONTINUE70)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.sqrt$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.sqrt$IF_TRUE0)
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Math.sqrt$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.sqrt$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.sqrt$IF_FALSE0)
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Math.sqrt$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//gt
@SP
A=M-1
D=M

@y_POSITIVE72
D;JGT
@y_NEGATIVE72
D;JLT
@NORMAL_CASE72
0;JMP
(y_POSITIVE72)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE72
D;JLT
@NORMAL_CASE72
0;JMP
(NEGATIVE_POSITIVE72)
@SP
M=M-1
A=M-1
M=0
@CONTINUE72
0;JMP
(y_NEGATIVE72)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE72
D;JGT
@NORMAL_CASE72
0;JMP
(POSITIVE_NEGATIVE72)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE72
0;JMP
(NORMAL_CASE72)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE72
D;JGT
@SP
A=M-1
M=0
@CONTINUE72
0;JMP
(TRUE72)
@SP
A=M-1
M=-1
(CONTINUE72)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.sqrt$WHILE_END0

D;JNE
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Math.multiply 2
@Math.sqrt$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.sqrt$ret.9)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE78
D;JGT
@y_NEGATIVE78
D;JLT
@NORMAL_CASE78
0;JMP
(y_POSITIVE78)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE78
D;JLT
@NORMAL_CASE78
0;JMP
(NEGATIVE_POSITIVE78)
@SP
M=M-1
A=M-1
M=0
@CONTINUE78
0;JMP
(y_NEGATIVE78)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE78
D;JGT
@NORMAL_CASE78
0;JMP
(POSITIVE_NEGATIVE78)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE78
0;JMP
(NORMAL_CASE78)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE78
D;JGT
@SP
A=M-1
M=0
@CONTINUE78
0;JMP
(TRUE78)
@SP
A=M-1
M=-1
(CONTINUE78)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Math.sqrt$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Math.sqrt$IF_TRUE1)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(Math.sqrt$IF_FALSE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Math.sqrt$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Math.sqrt$WHILE_END0)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.max 0
(Math.max)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE83
D;JGT
@y_NEGATIVE83
D;JLT
@NORMAL_CASE83
0;JMP
(y_POSITIVE83)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE83
D;JLT
@NORMAL_CASE83
0;JMP
(NEGATIVE_POSITIVE83)
@SP
M=M-1
A=M-1
M=0
@CONTINUE83
0;JMP
(y_NEGATIVE83)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE83
D;JGT
@NORMAL_CASE83
0;JMP
(POSITIVE_NEGATIVE83)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE83
0;JMP
(NORMAL_CASE83)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE83
D;JGT
@SP
A=M-1
M=0
@CONTINUE83
0;JMP
(TRUE83)
@SP
A=M-1
M=-1
(CONTINUE83)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.max$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.max$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.max$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.max$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.min 0
(Math.min)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE84
D;JGT
@y_NEGATIVE84
D;JLT
@NORMAL_CASE84
0;JMP
(y_POSITIVE84)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE84
D;JLT
@NORMAL_CASE84
0;JMP
(NEGATIVE_POSITIVE84)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE84
0;JMP
(y_NEGATIVE84)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE84
D;JGT
@NORMAL_CASE84
0;JMP
(POSITIVE_NEGATIVE84)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE84
0;JMP
(NORMAL_CASE84)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE84
D;JLT
@SP
A=M-1
M=0
@CONTINUE84
0;JMP
(TRUE84)
@SP
A=M-1
M=-1
(CONTINUE84)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.min$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.min$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.min$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.min$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Memory.init 0
(Memory.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@Memory.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2049
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 2050
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Memory.peek 0
(Memory.peek)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Memory.poke 0
(Memory.poke)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Memory.alloc 2
(Memory.alloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE5
D;JGT
@y_NEGATIVE5
D;JLT
@NORMAL_CASE5
0;JMP
(y_POSITIVE5)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE5
D;JLT
@NORMAL_CASE5
0;JMP
(NEGATIVE_POSITIVE5)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE5
0;JMP
(y_NEGATIVE5)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE5
D;JGT
@NORMAL_CASE5
0;JMP
(POSITIVE_NEGATIVE5)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE5
0;JMP
(NORMAL_CASE5)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE5
D;JLT
@SP
A=M-1
M=0
@CONTINUE5
0;JMP
(TRUE5)
@SP
A=M-1
M=-1
(CONTINUE5)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Memory.alloc$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Memory.alloc$IF_TRUE0)
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Memory.alloc$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc$ret.1)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Memory.alloc$IF_FALSE0)
//push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Memory.alloc$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE7
D;JGT
@y_NEGATIVE7
D;JLT
@NORMAL_CASE7
0;JMP
(y_POSITIVE7)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE7
D;JLT
@NORMAL_CASE7
0;JMP
(NEGATIVE_POSITIVE7)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE7
0;JMP
(y_NEGATIVE7)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE7
D;JGT
@NORMAL_CASE7
0;JMP
(POSITIVE_NEGATIVE7)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE7
0;JMP
(NORMAL_CASE7)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE7
D;JLT
@SP
A=M-1
M=0
@CONTINUE7
0;JMP
(TRUE7)
@SP
A=M-1
M=-1
(CONTINUE7)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Memory.alloc$WHILE_END0

D;JNE
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Memory.alloc$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Memory.alloc$WHILE_END0)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 16379
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE11
D;JGT
@y_NEGATIVE11
D;JLT
@NORMAL_CASE11
0;JMP
(y_POSITIVE11)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE11
D;JLT
@NORMAL_CASE11
0;JMP
(NEGATIVE_POSITIVE11)
@SP
M=M-1
A=M-1
M=0
@CONTINUE11
0;JMP
(y_NEGATIVE11)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE11
D;JGT
@NORMAL_CASE11
0;JMP
(POSITIVE_NEGATIVE11)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE11
0;JMP
(NORMAL_CASE11)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE11
D;JGT
@SP
A=M-1
M=0
@CONTINUE11
0;JMP
(TRUE11)
@SP
A=M-1
M=-1
(CONTINUE11)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Memory.alloc$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Memory.alloc$IF_TRUE1)
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Memory.alloc$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(Memory.alloc$IF_FALSE1)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//gt
@SP
A=M-1
D=M

@y_POSITIVE14
D;JGT
@y_NEGATIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(y_POSITIVE14)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(NEGATIVE_POSITIVE14)
@SP
M=M-1
A=M-1
M=0
@CONTINUE14
0;JMP
(y_NEGATIVE14)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE14
D;JGT
@NORMAL_CASE14
0;JMP
(POSITIVE_NEGATIVE14)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE14
0;JMP
(NORMAL_CASE14)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE14
D;JGT
@SP
A=M-1
M=0
@CONTINUE14
0;JMP
(TRUE14)
@SP
A=M-1
M=-1
(CONTINUE14)
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Memory.alloc$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Memory.alloc$IF_TRUE2)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//eq
(NORMAL_CASE22)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE22
D;JEQ
@SP
A=M-1
M=0
@CONTINUE22
0;JMP
(TRUE22)
@SP
A=M-1
M=-1
(CONTINUE22)
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@Memory.alloc$IF_FALSE3
0;JMP
// write label IF_TRUE3
(Memory.alloc$IF_TRUE3)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END3
@Memory.alloc$IF_END3
0;JMP
// write label IF_FALSE3
(Memory.alloc$IF_FALSE3)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END3
(Memory.alloc$IF_END3)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(Memory.alloc$IF_FALSE2)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Memory.deAlloc 2
(Memory.deAlloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE38)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE38
D;JEQ
@SP
A=M-1
M=0
@CONTINUE38
0;JMP
(TRUE38)
@SP
A=M-1
M=-1
(CONTINUE38)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Memory.deAlloc$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Memory.deAlloc$IF_TRUE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Memory.deAlloc$IF_END0
0;JMP
// write label IF_FALSE0
(Memory.deAlloc$IF_FALSE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//eq
(NORMAL_CASE50)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE50
D;JEQ
@SP
A=M-1
M=0
@CONTINUE50
0;JMP
(TRUE50)
@SP
A=M-1
M=-1
(CONTINUE50)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Memory.deAlloc$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Memory.deAlloc$IF_TRUE1)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END1
@Memory.deAlloc$IF_END1
0;JMP
// write label IF_FALSE1
(Memory.deAlloc$IF_FALSE1)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END1
(Memory.deAlloc$IF_END1)
// write label IF_END0
(Memory.deAlloc$IF_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Sys.init 0
(Sys.init)
// call function Memory.init 0
@Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Sys.init$ret.1)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Math.init 0
@Sys.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Sys.init$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Main.main 0
@Sys.init$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Sys.init$ret.3)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Sys.init$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.init$WHILE_END0

D;JNE
// write goto WHILE_EXP0
@Sys.init$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Sys.init$WHILE_END0)
// write function Sys.halt 0
(Sys.halt)
// write label WHILE_EXP0
(Sys.halt$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.halt$WHILE_END0

D;JNE
// write goto WHILE_EXP0
@Sys.halt$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Sys.halt$WHILE_END0)
// write function Sys.wait 1
(Sys.wait)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE5
D;JGT
@y_NEGATIVE5
D;JLT
@NORMAL_CASE5
0;JMP
(y_POSITIVE5)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE5
D;JLT
@NORMAL_CASE5
0;JMP
(NEGATIVE_POSITIVE5)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE5
0;JMP
(y_NEGATIVE5)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE5
D;JGT
@NORMAL_CASE5
0;JMP
(POSITIVE_NEGATIVE5)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE5
0;JMP
(NORMAL_CASE5)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE5
D;JLT
@SP
A=M-1
M=0
@CONTINUE5
0;JMP
(TRUE5)
@SP
A=M-1
M=-1
(CONTINUE5)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Sys.wait$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Sys.wait$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Sys.wait$IF_TRUE0)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Sys.wait$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.wait$ret.4)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Sys.wait$IF_FALSE0)
// write label WHILE_EXP0
(Sys.wait$WHILE_EXP0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE6
D;JGT
@y_NEGATIVE6
D;JLT
@NORMAL_CASE6
0;JMP
(y_POSITIVE6)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE6
D;JLT
@NORMAL_CASE6
0;JMP
(NEGATIVE_POSITIVE6)
@SP
M=M-1
A=M-1
M=0
@CONTINUE6
0;JMP
(y_NEGATIVE6)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE6
D;JGT
@NORMAL_CASE6
0;JMP
(POSITIVE_NEGATIVE6)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE6
0;JMP
(NORMAL_CASE6)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE6
D;JGT
@SP
A=M-1
M=0
@CONTINUE6
0;JMP
(TRUE6)
@SP
A=M-1
M=-1
(CONTINUE6)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END0

D;JNE
//push constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP1
(Sys.wait$WHILE_EXP1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE8
D;JGT
@y_NEGATIVE8
D;JLT
@NORMAL_CASE8
0;JMP
(y_POSITIVE8)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE8
D;JLT
@NORMAL_CASE8
0;JMP
(NEGATIVE_POSITIVE8)
@SP
M=M-1
A=M-1
M=0
@CONTINUE8
0;JMP
(y_NEGATIVE8)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE8
D;JGT
@NORMAL_CASE8
0;JMP
(POSITIVE_NEGATIVE8)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE8
0;JMP
(NORMAL_CASE8)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE8
D;JGT
@SP
A=M-1
M=0
@CONTINUE8
0;JMP
(TRUE8)
@SP
A=M-1
M=-1
(CONTINUE8)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END1
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END1

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP1
@Sys.wait$WHILE_EXP1
0;JMP
// write label WHILE_END1
(Sys.wait$WHILE_END1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Sys.wait$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Sys.wait$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Sys.error 0
(Sys.error)
// write label WHILE_EXP0
(Sys.error$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.error$WHILE_END0

D;JNE
// write goto WHILE_EXP0
@Sys.error$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Sys.error$WHILE_END0)
