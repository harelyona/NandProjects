@256
D=A
@SP
M=D
@300
D=A
@LCL
M=D
@400
D=A
@ARG
M=D
// call function Sys.init 0
@$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
($ret.1)
// write function Array.new 0
(Array.new)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE1
D;JGT
@y_NEGATIVE1
D;JLT
@NORMAL_CASE1
0;JMP
(y_POSITIVE1)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE1
D;JLT
@NORMAL_CASE1
0;JMP
(NEGATIVE_POSITIVE1)
@SP
M=M-1
A=M-1
M=0
@CONTINUE1
0;JMP
(y_NEGATIVE1)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE1
D;JGT
@NORMAL_CASE1
0;JMP
(POSITIVE_NEGATIVE1)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE1
0;JMP
(NORMAL_CASE1)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE1
D;JGT
@SP
A=M-1
M=0
@CONTINUE1
0;JMP
(TRUE1)
@SP
A=M-1
M=-1
(CONTINUE1)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Array.new$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Array.new$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Array.new$IF_TRUE0)
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Array.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Array.new$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Array.new$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.alloc 1
@Array.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Array.new$ret.3)
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Array.dispose 0
(Array.dispose)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.deAlloc 1
@Array.dispose$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Array.dispose$ret.4)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Ball.new 0
(Ball.new)
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.alloc 1
@Ball.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Ball.new$ret.1)
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 10
@THIS
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 11
@THIS
D=M
@11
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 4
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 12
@THIS
D=M
@12
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 5
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 13
@THIS
D=M
@13
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 14
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.show 1
@Ball.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.show
0;JMP
(Ball.new$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Ball.dispose 0
(Ball.dispose)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.deAlloc 1
@Ball.dispose$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Ball.dispose$ret.3)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Ball.show 0
(Ball.show)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.setColor 1
@Ball.show$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Ball.show$ret.4)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.draw 1
@Ball.show$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.draw
0;JMP
(Ball.show$ret.5)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Ball.hide 0
(Ball.hide)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.setColor 1
@Ball.hide$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Ball.hide$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.draw 1
@Ball.hide$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.draw
0;JMP
(Ball.hide$ret.7)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Ball.draw 0
(Ball.draw)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Screen.drawRectangle 4
@Ball.draw$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Ball.draw$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Ball.getLeft 0
(Ball.getLeft)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Ball.getRight 0
(Ball.getRight)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Ball.setDestination 3
(Ball.setDestination)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 3
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.abs 1
@Ball.setDestination$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Ball.setDestination$ret.9)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.abs 1
@Ball.setDestination$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Ball.setDestination$ret.10)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE13
D;JGT
@y_NEGATIVE13
D;JLT
@NORMAL_CASE13
0;JMP
(y_POSITIVE13)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE13
D;JLT
@NORMAL_CASE13
0;JMP
(NEGATIVE_POSITIVE13)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE13
0;JMP
(y_NEGATIVE13)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE13
D;JGT
@NORMAL_CASE13
0;JMP
(POSITIVE_NEGATIVE13)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE13
0;JMP
(NORMAL_CASE13)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE13
D;JLT
@SP
A=M-1
M=0
@CONTINUE13
0;JMP
(TRUE13)
@SP
A=M-1
M=-1
(CONTINUE13)
//pop this 7
@THIS
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 7
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Ball.setDestination$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Ball.setDestination$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Ball.setDestination$IF_TRUE0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE14
D;JGT
@y_NEGATIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(y_POSITIVE14)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(NEGATIVE_POSITIVE14)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE14
0;JMP
(y_NEGATIVE14)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE14
D;JGT
@NORMAL_CASE14
0;JMP
(POSITIVE_NEGATIVE14)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE14
0;JMP
(NORMAL_CASE14)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE14
D;JLT
@SP
A=M-1
M=0
@CONTINUE14
0;JMP
(TRUE14)
@SP
A=M-1
M=-1
(CONTINUE14)
//pop this 8
@THIS
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE15
D;JGT
@y_NEGATIVE15
D;JLT
@NORMAL_CASE15
0;JMP
(y_POSITIVE15)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE15
D;JLT
@NORMAL_CASE15
0;JMP
(NEGATIVE_POSITIVE15)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE15
0;JMP
(y_NEGATIVE15)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE15
D;JGT
@NORMAL_CASE15
0;JMP
(POSITIVE_NEGATIVE15)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE15
0;JMP
(NORMAL_CASE15)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE15
D;JLT
@SP
A=M-1
M=0
@CONTINUE15
0;JMP
(TRUE15)
@SP
A=M-1
M=-1
(CONTINUE15)
//pop this 9
@THIS
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Ball.setDestination$IF_END0
0;JMP
// write label IF_FALSE0
(Ball.setDestination$IF_FALSE0)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE16
D;JGT
@y_NEGATIVE16
D;JLT
@NORMAL_CASE16
0;JMP
(y_POSITIVE16)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE16
D;JLT
@NORMAL_CASE16
0;JMP
(NEGATIVE_POSITIVE16)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE16
0;JMP
(y_NEGATIVE16)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE16
D;JGT
@NORMAL_CASE16
0;JMP
(POSITIVE_NEGATIVE16)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE16
0;JMP
(NORMAL_CASE16)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE16
D;JLT
@SP
A=M-1
M=0
@CONTINUE16
0;JMP
(TRUE16)
@SP
A=M-1
M=-1
(CONTINUE16)
//pop this 8
@THIS
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE17
D;JGT
@y_NEGATIVE17
D;JLT
@NORMAL_CASE17
0;JMP
(y_POSITIVE17)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE17
D;JLT
@NORMAL_CASE17
0;JMP
(NEGATIVE_POSITIVE17)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE17
0;JMP
(y_NEGATIVE17)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE17
D;JGT
@NORMAL_CASE17
0;JMP
(POSITIVE_NEGATIVE17)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE17
0;JMP
(NORMAL_CASE17)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE17
D;JLT
@SP
A=M-1
M=0
@CONTINUE17
0;JMP
(TRUE17)
@SP
A=M-1
M=-1
(CONTINUE17)
//pop this 9
@THIS
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END0
(Ball.setDestination$IF_END0)
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Ball.setDestination$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.setDestination$ret.11)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Ball.setDestination$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.setDestination$ret.12)
//pop this 5
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call function Math.multiply 2
@Ball.setDestination$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.setDestination$ret.13)
//pop this 6
@THIS
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Ball.move 0
(Ball.move)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.hide 1
@Ball.move$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.hide
0;JMP
(Ball.move$ret.14)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE20
D;JGT
@y_NEGATIVE20
D;JLT
@NORMAL_CASE20
0;JMP
(y_POSITIVE20)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE20
D;JLT
@NORMAL_CASE20
0;JMP
(NEGATIVE_POSITIVE20)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE20
0;JMP
(y_NEGATIVE20)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE20
D;JGT
@NORMAL_CASE20
0;JMP
(POSITIVE_NEGATIVE20)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE20
0;JMP
(NORMAL_CASE20)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE20
D;JLT
@SP
A=M-1
M=0
@CONTINUE20
0;JMP
(TRUE20)
@SP
A=M-1
M=-1
(CONTINUE20)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Ball.move$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Ball.move$IF_TRUE0)
//push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 5
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Ball.move$IF_END0
0;JMP
// write label IF_FALSE0
(Ball.move$IF_FALSE0)
//push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 6
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 9
@THIS
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Ball.move$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Ball.move$IF_TRUE1)
//push this 7
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Ball.move$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Ball.move$IF_TRUE2)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END2
@Ball.move$IF_END2
0;JMP
// write label IF_FALSE2
(Ball.move$IF_FALSE2)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END2
(Ball.move$IF_END2)
// write goto IF_END1
@Ball.move$IF_END1
0;JMP
// write label IF_FALSE1
(Ball.move$IF_FALSE1)
//push this 7
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@Ball.move$IF_FALSE3
0;JMP
// write label IF_TRUE3
(Ball.move$IF_TRUE3)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END3
@Ball.move$IF_END3
0;JMP
// write label IF_FALSE3
(Ball.move$IF_FALSE3)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END3
(Ball.move$IF_END3)
// write label IF_END1
(Ball.move$IF_END1)
// write label IF_END0
(Ball.move$IF_END0)
//push this 8
@THIS
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE4
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE4

D;JNE
// write goto IF_FALSE4
@Ball.move$IF_FALSE4
0;JMP
// write label IF_TRUE4
(Ball.move$IF_TRUE4)
//push this 7
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE5
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE5

D;JNE
// write goto IF_FALSE5
@Ball.move$IF_FALSE5
0;JMP
// write label IF_TRUE5
(Ball.move$IF_TRUE5)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END5
@Ball.move$IF_END5
0;JMP
// write label IF_FALSE5
(Ball.move$IF_FALSE5)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END5
(Ball.move$IF_END5)
// write goto IF_END4
@Ball.move$IF_END4
0;JMP
// write label IF_FALSE4
(Ball.move$IF_FALSE4)
//push this 7
@THIS
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE6
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE6

D;JNE
// write goto IF_FALSE6
@Ball.move$IF_FALSE6
0;JMP
// write label IF_TRUE6
(Ball.move$IF_TRUE6)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END6
@Ball.move$IF_END6
0;JMP
// write label IF_FALSE6
(Ball.move$IF_FALSE6)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END6
(Ball.move$IF_END6)
// write label IF_END4
(Ball.move$IF_END4)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 10
@THIS
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE31
D;JGT
@y_NEGATIVE31
D;JLT
@NORMAL_CASE31
0;JMP
(y_POSITIVE31)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE31
D;JLT
@NORMAL_CASE31
0;JMP
(NEGATIVE_POSITIVE31)
@SP
M=M-1
A=M-1
M=0
@CONTINUE31
0;JMP
(y_NEGATIVE31)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE31
D;JGT
@NORMAL_CASE31
0;JMP
(POSITIVE_NEGATIVE31)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE31
0;JMP
(NORMAL_CASE31)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE31
D;JGT
@SP
A=M-1
M=0
@CONTINUE31
0;JMP
(TRUE31)
@SP
A=M-1
M=-1
(CONTINUE31)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE7
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE7

D;JNE
// write goto IF_FALSE7
@Ball.move$IF_FALSE7
0;JMP
// write label IF_TRUE7
(Ball.move$IF_TRUE7)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 14
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 10
@THIS
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE7
(Ball.move$IF_FALSE7)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 11
@THIS
D=M
@11
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE33
D;JGT
@y_NEGATIVE33
D;JLT
@NORMAL_CASE33
0;JMP
(y_POSITIVE33)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE33
D;JLT
@NORMAL_CASE33
0;JMP
(NEGATIVE_POSITIVE33)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE33
0;JMP
(y_NEGATIVE33)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE33
D;JGT
@NORMAL_CASE33
0;JMP
(POSITIVE_NEGATIVE33)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE33
0;JMP
(NORMAL_CASE33)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE33
D;JLT
@SP
A=M-1
M=0
@CONTINUE33
0;JMP
(TRUE33)
@SP
A=M-1
M=-1
(CONTINUE33)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE8
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE8

D;JNE
// write goto IF_FALSE8
@Ball.move$IF_FALSE8
0;JMP
// write label IF_TRUE8
(Ball.move$IF_TRUE8)
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 14
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 11
@THIS
D=M
@11
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE8
(Ball.move$IF_FALSE8)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 12
@THIS
D=M
@12
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE35
D;JGT
@y_NEGATIVE35
D;JLT
@NORMAL_CASE35
0;JMP
(y_POSITIVE35)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE35
D;JLT
@NORMAL_CASE35
0;JMP
(NEGATIVE_POSITIVE35)
@SP
M=M-1
A=M-1
M=0
@CONTINUE35
0;JMP
(y_NEGATIVE35)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE35
D;JGT
@NORMAL_CASE35
0;JMP
(POSITIVE_NEGATIVE35)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE35
0;JMP
(NORMAL_CASE35)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE35
D;JGT
@SP
A=M-1
M=0
@CONTINUE35
0;JMP
(TRUE35)
@SP
A=M-1
M=-1
(CONTINUE35)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE9
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE9

D;JNE
// write goto IF_FALSE9
@Ball.move$IF_FALSE9
0;JMP
// write label IF_TRUE9
(Ball.move$IF_TRUE9)
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 14
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 12
@THIS
D=M
@12
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE9
(Ball.move$IF_FALSE9)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 13
@THIS
D=M
@13
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE37
D;JGT
@y_NEGATIVE37
D;JLT
@NORMAL_CASE37
0;JMP
(y_POSITIVE37)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE37
D;JLT
@NORMAL_CASE37
0;JMP
(NEGATIVE_POSITIVE37)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE37
0;JMP
(y_NEGATIVE37)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE37
D;JGT
@NORMAL_CASE37
0;JMP
(POSITIVE_NEGATIVE37)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE37
0;JMP
(NORMAL_CASE37)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE37
D;JLT
@SP
A=M-1
M=0
@CONTINUE37
0;JMP
(TRUE37)
@SP
A=M-1
M=-1
(CONTINUE37)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE10
@SP
AM=M-1
D=M
@Ball.move$IF_TRUE10

D;JNE
// write goto IF_FALSE10
@Ball.move$IF_FALSE10
0;JMP
// write label IF_TRUE10
(Ball.move$IF_TRUE10)
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 14
@THIS
D=M
@14
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 13
@THIS
D=M
@13
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE10
(Ball.move$IF_FALSE10)
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.show 1
@Ball.move$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.show
0;JMP
(Ball.move$ret.15)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 14
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Ball.bounce 5
(Ball.bounce)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Ball.bounce$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.16)
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Ball.bounce$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.17)
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE39)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE39
D;JEQ
@SP
A=M-1
M=0
@CONTINUE39
0;JMP
(TRUE39)
@SP
A=M-1
M=-1
(CONTINUE39)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Ball.bounce$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Ball.bounce$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Ball.bounce$IF_TRUE0)
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Ball.bounce$IF_END0
0;JMP
// write label IF_FALSE0
(Ball.bounce$IF_FALSE0)
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE40
D;JGT
@y_NEGATIVE40
D;JLT
@NORMAL_CASE40
0;JMP
(y_POSITIVE40)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE40
D;JLT
@NORMAL_CASE40
0;JMP
(NEGATIVE_POSITIVE40)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE40
0;JMP
(y_NEGATIVE40)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE40
D;JGT
@NORMAL_CASE40
0;JMP
(POSITIVE_NEGATIVE40)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE40
0;JMP
(NORMAL_CASE40)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE40
D;JLT
@SP
A=M-1
M=0
@CONTINUE40
0;JMP
(TRUE40)
@SP
A=M-1
M=-1
(CONTINUE40)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE42)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE42
D;JEQ
@SP
A=M-1
M=0
@CONTINUE42
0;JMP
(TRUE42)
@SP
A=M-1
M=-1
(CONTINUE42)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE44
D;JGT
@y_NEGATIVE44
D;JLT
@NORMAL_CASE44
0;JMP
(y_POSITIVE44)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE44
D;JLT
@NORMAL_CASE44
0;JMP
(NEGATIVE_POSITIVE44)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE44
0;JMP
(y_NEGATIVE44)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE44
D;JGT
@NORMAL_CASE44
0;JMP
(POSITIVE_NEGATIVE44)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE44
0;JMP
(NORMAL_CASE44)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE44
D;JLT
@SP
A=M-1
M=0
@CONTINUE44
0;JMP
(TRUE44)
@SP
A=M-1
M=-1
(CONTINUE44)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//eq
(NORMAL_CASE47)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE47
D;JEQ
@SP
A=M-1
M=0
@CONTINUE47
0;JMP
(TRUE47)
@SP
A=M-1
M=-1
(CONTINUE47)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Ball.bounce$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Ball.bounce$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Ball.bounce$IF_TRUE1)
//push constant 20
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END1
@Ball.bounce$IF_END1
0;JMP
// write label IF_FALSE1
(Ball.bounce$IF_FALSE1)
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END1
(Ball.bounce$IF_END1)
// write label IF_END0
(Ball.bounce$IF_END0)
//push this 14
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE49)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE49
D;JEQ
@SP
A=M-1
M=0
@CONTINUE49
0;JMP
(TRUE49)
@SP
A=M-1
M=-1
(CONTINUE49)
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Ball.bounce$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Ball.bounce$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Ball.bounce$IF_TRUE2)
//push constant 506
@506
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
// call function Math.multiply 2
@Ball.bounce$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.18)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Ball.bounce$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.19)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Ball.bounce$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.20)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END2
@Ball.bounce$IF_END2
0;JMP
// write label IF_FALSE2
(Ball.bounce$IF_FALSE2)
//push this 14
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE52)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE52
D;JEQ
@SP
A=M-1
M=0
@CONTINUE52
0;JMP
(TRUE52)
@SP
A=M-1
M=-1
(CONTINUE52)
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Ball.bounce$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@Ball.bounce$IF_FALSE3
0;JMP
// write label IF_TRUE3
(Ball.bounce$IF_TRUE3)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Ball.bounce$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.21)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Ball.bounce$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.22)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Ball.bounce$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.23)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END3
@Ball.bounce$IF_END3
0;JMP
// write label IF_FALSE3
(Ball.bounce$IF_FALSE3)
//push this 14
@THIS
D=M
@14
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE54)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE54
D;JEQ
@SP
A=M-1
M=0
@CONTINUE54
0;JMP
(TRUE54)
@SP
A=M-1
M=-1
(CONTINUE54)
// write if-goto IF_TRUE4
@SP
AM=M-1
D=M
@Ball.bounce$IF_TRUE4

D;JNE
// write goto IF_FALSE4
@Ball.bounce$IF_FALSE4
0;JMP
// write label IF_TRUE4
(Ball.bounce$IF_TRUE4)
//push constant 250
@250
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 25
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
// call function Math.multiply 2
@Ball.bounce$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.24)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Ball.bounce$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.25)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Ball.bounce$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.26)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END4
@Ball.bounce$IF_END4
0;JMP
// write label IF_FALSE4
(Ball.bounce$IF_FALSE4)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 25
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Ball.bounce$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.27)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Ball.bounce$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Ball.bounce$ret.28)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Ball.bounce$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Ball.bounce$ret.29)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END4
(Ball.bounce$IF_END4)
// write label IF_END3
(Ball.bounce$IF_END3)
// write label IF_END2
(Ball.bounce$IF_END2)
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.setDestination 3
@Ball.bounce$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.setDestination
0;JMP
(Ball.bounce$ret.30)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.new 0
(Bat.new)
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.alloc 1
@Bat.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Bat.new$ret.1)
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 3
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.show 1
@Bat.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.show
0;JMP
(Bat.new$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.allign 1
(Bat.allign)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.dispose 0
(Bat.dispose)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.deAlloc 1
@Bat.dispose$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Bat.dispose$ret.3)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.show 0
(Bat.show)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.setColor 1
@Bat.show$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.show$ret.4)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.draw 1
@Bat.show$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.draw
0;JMP
(Bat.show$ret.5)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.hide 0
(Bat.hide)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.setColor 1
@Bat.hide$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.hide$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.draw 1
@Bat.hide$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.draw
0;JMP
(Bat.hide$ret.7)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.draw 0
(Bat.draw)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Screen.drawRectangle 4
@Bat.draw$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Bat.draw$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.setDirection 0
(Bat.setDirection)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.getLeft 0
(Bat.getLeft)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.getRight 0
(Bat.getRight)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.setWidth 0
(Bat.setWidth)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.hide 1
@Bat.setWidth$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.hide
0;JMP
(Bat.setWidth$ret.9)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.show 1
@Bat.setWidth$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.show
0;JMP
(Bat.setWidth$ret.10)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Bat.move 0
(Bat.move)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE19)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE19
D;JEQ
@SP
A=M-1
M=0
@CONTINUE19
0;JMP
(TRUE19)
@SP
A=M-1
M=-1
(CONTINUE19)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Bat.move$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Bat.move$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Bat.move$IF_TRUE0)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE21
D;JGT
@y_NEGATIVE21
D;JLT
@NORMAL_CASE21
0;JMP
(y_POSITIVE21)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE21
D;JLT
@NORMAL_CASE21
0;JMP
(NEGATIVE_POSITIVE21)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE21
0;JMP
(y_NEGATIVE21)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE21
D;JGT
@NORMAL_CASE21
0;JMP
(POSITIVE_NEGATIVE21)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE21
0;JMP
(NORMAL_CASE21)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE21
D;JLT
@SP
A=M-1
M=0
@CONTINUE21
0;JMP
(TRUE21)
@SP
A=M-1
M=-1
(CONTINUE21)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Bat.move$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Bat.move$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Bat.move$IF_TRUE1)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(Bat.move$IF_FALSE1)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.setColor 1
@Bat.move$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.move$ret.11)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Screen.drawRectangle 4
@Bat.move$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Bat.move$ret.12)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.setColor 1
@Bat.move$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.move$ret.13)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Screen.drawRectangle 4
@Bat.move$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Bat.move$ret.14)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Bat.move$IF_END0
0;JMP
// write label IF_FALSE0
(Bat.move$IF_FALSE0)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE32
D;JGT
@y_NEGATIVE32
D;JLT
@NORMAL_CASE32
0;JMP
(y_POSITIVE32)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE32
D;JLT
@NORMAL_CASE32
0;JMP
(NEGATIVE_POSITIVE32)
@SP
M=M-1
A=M-1
M=0
@CONTINUE32
0;JMP
(y_NEGATIVE32)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE32
D;JGT
@NORMAL_CASE32
0;JMP
(POSITIVE_NEGATIVE32)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE32
0;JMP
(NORMAL_CASE32)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE32
D;JGT
@SP
A=M-1
M=0
@CONTINUE32
0;JMP
(TRUE32)
@SP
A=M-1
M=-1
(CONTINUE32)
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Bat.move$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Bat.move$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Bat.move$IF_TRUE2)
//push constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(Bat.move$IF_FALSE2)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.setColor 1
@Bat.move$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.move$ret.15)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Screen.drawRectangle 4
@Bat.move$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Bat.move$ret.16)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.setColor 1
@Bat.move$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Bat.move$ret.17)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Screen.drawRectangle 4
@Bat.move$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Bat.move$ret.18)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END0
(Bat.move$IF_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Board.new 0
(Board.new)
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.alloc 1
@Board.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(Board.new$ret.1)
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@Board.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 1
@Board.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Board.dispose 0
(Board.dispose)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.deAlloc 1
@Board.dispose$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(Board.dispose$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Board.draw 0
(Board.draw)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.setColor 1
@Board.draw$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.draw$ret.3)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Screen.drawRectangle 4
@Board.draw$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Board.draw$ret.4)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Board.erase 0
(Board.erase)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.setColor 1
@Board.erase$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0;JMP
(Board.erase$ret.5)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Screen.drawRectangle 4
@Board.erase$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(Board.erase$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Board.setX 0
(Board.setX)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Board.setY 0
(Board.setY)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Board.move 0
(Board.move)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Board.erase 1
@Board.move$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.erase
0;JMP
(Board.move$ret.7)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE6)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE6
D;JEQ
@SP
A=M-1
M=0
@CONTINUE6
0;JMP
(TRUE6)
@SP
A=M-1
M=-1
(CONTINUE6)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Board.move$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Board.move$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Board.move$IF_TRUE0)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE7
D;JGT
@y_NEGATIVE7
D;JLT
@NORMAL_CASE7
0;JMP
(y_POSITIVE7)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE7
D;JLT
@NORMAL_CASE7
0;JMP
(NEGATIVE_POSITIVE7)
@SP
M=M-1
A=M-1
M=0
@CONTINUE7
0;JMP
(y_NEGATIVE7)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE7
D;JGT
@NORMAL_CASE7
0;JMP
(POSITIVE_NEGATIVE7)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE7
0;JMP
(NORMAL_CASE7)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE7
D;JGT
@SP
A=M-1
M=0
@CONTINUE7
0;JMP
(TRUE7)
@SP
A=M-1
M=-1
(CONTINUE7)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Board.move$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Board.move$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Board.move$IF_TRUE1)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(Board.move$IF_FALSE1)
// write label IF_FALSE0
(Board.move$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE9)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE9
D;JEQ
@SP
A=M-1
M=0
@CONTINUE9
0;JMP
(TRUE9)
@SP
A=M-1
M=-1
(CONTINUE9)
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Board.move$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Board.move$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Board.move$IF_TRUE2)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 209
@209
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE10
D;JGT
@y_NEGATIVE10
D;JLT
@NORMAL_CASE10
0;JMP
(y_POSITIVE10)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE10
D;JLT
@NORMAL_CASE10
0;JMP
(NEGATIVE_POSITIVE10)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE10
0;JMP
(y_NEGATIVE10)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE10
D;JGT
@NORMAL_CASE10
0;JMP
(POSITIVE_NEGATIVE10)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE10
0;JMP
(NORMAL_CASE10)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE10
D;JLT
@SP
A=M-1
M=0
@CONTINUE10
0;JMP
(TRUE10)
@SP
A=M-1
M=-1
(CONTINUE10)
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Board.move$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@Board.move$IF_FALSE3
0;JMP
// write label IF_TRUE3
(Board.move$IF_TRUE3)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE3
(Board.move$IF_FALSE3)
// write label IF_FALSE2
(Board.move$IF_FALSE2)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE12)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE12
D;JEQ
@SP
A=M-1
M=0
@CONTINUE12
0;JMP
(TRUE12)
@SP
A=M-1
M=-1
(CONTINUE12)
// write if-goto IF_TRUE4
@SP
AM=M-1
D=M
@Board.move$IF_TRUE4

D;JNE
// write goto IF_FALSE4
@Board.move$IF_FALSE4
0;JMP
// write label IF_TRUE4
(Board.move$IF_TRUE4)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE13
D;JGT
@y_NEGATIVE13
D;JLT
@NORMAL_CASE13
0;JMP
(y_POSITIVE13)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE13
D;JLT
@NORMAL_CASE13
0;JMP
(NEGATIVE_POSITIVE13)
@SP
M=M-1
A=M-1
M=0
@CONTINUE13
0;JMP
(y_NEGATIVE13)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE13
D;JGT
@NORMAL_CASE13
0;JMP
(POSITIVE_NEGATIVE13)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE13
0;JMP
(NORMAL_CASE13)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE13
D;JGT
@SP
A=M-1
M=0
@CONTINUE13
0;JMP
(TRUE13)
@SP
A=M-1
M=-1
(CONTINUE13)
// write if-goto IF_TRUE5
@SP
AM=M-1
D=M
@Board.move$IF_TRUE5

D;JNE
// write goto IF_FALSE5
@Board.move$IF_FALSE5
0;JMP
// write label IF_TRUE5
(Board.move$IF_TRUE5)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE5
(Board.move$IF_FALSE5)
// write label IF_FALSE4
(Board.move$IF_FALSE4)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE15)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE15
D;JEQ
@SP
A=M-1
M=0
@CONTINUE15
0;JMP
(TRUE15)
@SP
A=M-1
M=-1
(CONTINUE15)
// write if-goto IF_TRUE6
@SP
AM=M-1
D=M
@Board.move$IF_TRUE6

D;JNE
// write goto IF_FALSE6
@Board.move$IF_FALSE6
0;JMP
// write label IF_TRUE6
(Board.move$IF_TRUE6)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 500
@500
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE16
D;JGT
@y_NEGATIVE16
D;JLT
@NORMAL_CASE16
0;JMP
(y_POSITIVE16)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE16
D;JLT
@NORMAL_CASE16
0;JMP
(NEGATIVE_POSITIVE16)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE16
0;JMP
(y_NEGATIVE16)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE16
D;JGT
@NORMAL_CASE16
0;JMP
(POSITIVE_NEGATIVE16)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE16
0;JMP
(NORMAL_CASE16)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE16
D;JLT
@SP
A=M-1
M=0
@CONTINUE16
0;JMP
(TRUE16)
@SP
A=M-1
M=-1
(CONTINUE16)
// write if-goto IF_TRUE7
@SP
AM=M-1
D=M
@Board.move$IF_TRUE7

D;JNE
// write goto IF_FALSE7
@Board.move$IF_FALSE7
0;JMP
// write label IF_TRUE7
(Board.move$IF_TRUE7)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE7
(Board.move$IF_FALSE7)
// write label IF_FALSE6
(Board.move$IF_FALSE6)
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Board.draw 1
@Board.move$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Board.draw
0;JMP
(Board.move$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Board.isHit 2
(Board.isHit)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Board.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Board.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE20
D;JGT
@y_NEGATIVE20
D;JLT
@NORMAL_CASE20
0;JMP
(y_POSITIVE20)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE20
D;JLT
@NORMAL_CASE20
0;JMP
(NEGATIVE_POSITIVE20)
@SP
M=M-1
A=M-1
M=0
@CONTINUE20
0;JMP
(y_NEGATIVE20)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE20
D;JGT
@NORMAL_CASE20
0;JMP
(POSITIVE_NEGATIVE20)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE20
0;JMP
(NORMAL_CASE20)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE20
D;JGT
@SP
A=M-1
M=0
@CONTINUE20
0;JMP
(TRUE20)
@SP
A=M-1
M=-1
(CONTINUE20)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Board.isHit$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Board.isHit$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Board.isHit$IF_TRUE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE21
D;JGT
@y_NEGATIVE21
D;JLT
@NORMAL_CASE21
0;JMP
(y_POSITIVE21)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE21
D;JLT
@NORMAL_CASE21
0;JMP
(NEGATIVE_POSITIVE21)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE21
0;JMP
(y_NEGATIVE21)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE21
D;JGT
@NORMAL_CASE21
0;JMP
(POSITIVE_NEGATIVE21)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE21
0;JMP
(NORMAL_CASE21)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE21
D;JLT
@SP
A=M-1
M=0
@CONTINUE21
0;JMP
(TRUE21)
@SP
A=M-1
M=-1
(CONTINUE21)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Board.isHit$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Board.isHit$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Board.isHit$IF_TRUE1)
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE22
D;JGT
@y_NEGATIVE22
D;JLT
@NORMAL_CASE22
0;JMP
(y_POSITIVE22)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE22
D;JLT
@NORMAL_CASE22
0;JMP
(NEGATIVE_POSITIVE22)
@SP
M=M-1
A=M-1
M=0
@CONTINUE22
0;JMP
(y_NEGATIVE22)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE22
D;JGT
@NORMAL_CASE22
0;JMP
(POSITIVE_NEGATIVE22)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE22
0;JMP
(NORMAL_CASE22)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE22
D;JGT
@SP
A=M-1
M=0
@CONTINUE22
0;JMP
(TRUE22)
@SP
A=M-1
M=-1
(CONTINUE22)
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Board.isHit$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Board.isHit$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Board.isHit$IF_TRUE2)
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE23
D;JGT
@y_NEGATIVE23
D;JLT
@NORMAL_CASE23
0;JMP
(y_POSITIVE23)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE23
D;JLT
@NORMAL_CASE23
0;JMP
(NEGATIVE_POSITIVE23)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE23
0;JMP
(y_NEGATIVE23)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE23
D;JGT
@NORMAL_CASE23
0;JMP
(POSITIVE_NEGATIVE23)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE23
0;JMP
(NORMAL_CASE23)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE23
D;JLT
@SP
A=M-1
M=0
@CONTINUE23
0;JMP
(TRUE23)
@SP
A=M-1
M=-1
(CONTINUE23)
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Board.isHit$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@Board.isHit$IF_FALSE3
0;JMP
// write label IF_TRUE3
(Board.isHit$IF_TRUE3)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write label IF_FALSE3
(Board.isHit$IF_FALSE3)
// write label IF_FALSE2
(Board.isHit$IF_FALSE2)
// write label IF_FALSE1
(Board.isHit$IF_FALSE1)
// write label IF_FALSE0
(Board.isHit$IF_FALSE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Keyboard.init 0
(Keyboard.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Keyboard.keyPressed 0
(Keyboard.keyPressed)
//push constant 24576
@24576
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.peek 1
@Keyboard.keyPressed$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0;JMP
(Keyboard.keyPressed$ret.1)
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Keyboard.readChar 2
(Keyboard.readChar)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.printChar 1
@Keyboard.readChar$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Keyboard.readChar$WHILE_EXP0)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE1)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE1
D;JEQ
@SP
A=M-1
M=0
@CONTINUE1
0;JMP
(TRUE1)
@SP
A=M-1
M=-1
(CONTINUE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE2
D;JGT
@y_NEGATIVE2
D;JLT
@NORMAL_CASE2
0;JMP
(y_POSITIVE2)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE2
D;JLT
@NORMAL_CASE2
0;JMP
(NEGATIVE_POSITIVE2)
@SP
M=M-1
A=M-1
M=0
@CONTINUE2
0;JMP
(y_NEGATIVE2)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE2
D;JGT
@NORMAL_CASE2
0;JMP
(POSITIVE_NEGATIVE2)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE2
0;JMP
(NORMAL_CASE2)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE2
D;JGT
@SP
A=M-1
M=0
@CONTINUE2
0;JMP
(TRUE2)
@SP
A=M-1
M=-1
(CONTINUE2)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Keyboard.readChar$WHILE_END0

D;JNE
// call function Keyboard.keyPressed 0
@Keyboard.readChar$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.readChar$ret.3)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE5
D;JGT
@y_NEGATIVE5
D;JLT
@NORMAL_CASE5
0;JMP
(y_POSITIVE5)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE5
D;JLT
@NORMAL_CASE5
0;JMP
(NEGATIVE_POSITIVE5)
@SP
M=M-1
A=M-1
M=0
@CONTINUE5
0;JMP
(y_NEGATIVE5)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE5
D;JGT
@NORMAL_CASE5
0;JMP
(POSITIVE_NEGATIVE5)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE5
0;JMP
(NORMAL_CASE5)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE5
D;JGT
@SP
A=M-1
M=0
@CONTINUE5
0;JMP
(TRUE5)
@SP
A=M-1
M=-1
(CONTINUE5)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Keyboard.readChar$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Keyboard.readChar$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Keyboard.readChar$IF_TRUE0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Keyboard.readChar$IF_FALSE0)
// write goto WHILE_EXP0
@Keyboard.readChar$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Keyboard.readChar$WHILE_END0)
// call function String.backSpace 0
@Keyboard.readChar$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Keyboard.readChar$ret.4)
// call function Output.printChar 1
@Keyboard.readChar$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar$ret.5)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Output.printChar 1
@Keyboard.readChar$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Keyboard.readChar$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Keyboard.readLine 5
(Keyboard.readLine)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 80
@80
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.new 1
@Keyboard.readLine$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Keyboard.readLine$ret.7)
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Output.printString 1
@Keyboard.readLine$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Keyboard.readLine$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function String.newLine 0
@Keyboard.readLine$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.newLine
0;JMP
(Keyboard.readLine$ret.9)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function String.backSpace 0
@Keyboard.readLine$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Keyboard.readLine$ret.10)
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Keyboard.readLine$WHILE_EXP0)
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Keyboard.readLine$WHILE_END0

D;JNE
// call function Keyboard.readChar 0
@Keyboard.readLine$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.readChar
0;JMP
(Keyboard.readLine$ret.11)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE8)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE8
D;JEQ
@SP
A=M-1
M=0
@CONTINUE8
0;JMP
(TRUE8)
@SP
A=M-1
M=-1
(CONTINUE8)
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Keyboard.readLine$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Keyboard.readLine$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Keyboard.readLine$IF_TRUE0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE10)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE10
D;JEQ
@SP
A=M-1
M=0
@CONTINUE10
0;JMP
(TRUE10)
@SP
A=M-1
M=-1
(CONTINUE10)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Keyboard.readLine$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Keyboard.readLine$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Keyboard.readLine$IF_TRUE1)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function String.eraseLastChar 1
@Keyboard.readLine$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.eraseLastChar
0;JMP
(Keyboard.readLine$ret.12)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END1
@Keyboard.readLine$IF_END1
0;JMP
// write label IF_FALSE1
(Keyboard.readLine$IF_FALSE1)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@Keyboard.readLine$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Keyboard.readLine$ret.13)
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END1
(Keyboard.readLine$IF_END1)
// write label IF_FALSE0
(Keyboard.readLine$IF_FALSE0)
// write goto WHILE_EXP0
@Keyboard.readLine$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Keyboard.readLine$WHILE_END0)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Keyboard.readInt 2
(Keyboard.readInt)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Keyboard.readLine 1
@Keyboard.readInt$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.readLine
0;JMP
(Keyboard.readInt$ret.14)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function String.intValue 1
@Keyboard.readInt$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.intValue
0;JMP
(Keyboard.readInt$ret.15)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function String.dispose 1
@Keyboard.readInt$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0;JMP
(Keyboard.readInt$ret.16)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Main.main 1
(Main.main)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function PongGame.newInstance 0
@Main.main$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.newInstance
0;JMP
(Main.main$ret.1)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function PongGame.getInstance 0
@Main.main$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.getInstance
0;JMP
(Main.main$ret.2)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function PongGame.run 1
@Main.main$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.run
0;JMP
(Main.main$ret.3)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function PongGame.dispose 1
@Main.main$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.dispose
0;JMP
(Main.main$ret.4)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.init 1
(Math.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@Math.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init$ret.1)
//pop static 1
@Math.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@Math.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Math.init$ret.2)
//pop static 0
@Math.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Math.init$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE2
D;JGT
@y_NEGATIVE2
D;JLT
@NORMAL_CASE2
0;JMP
(y_POSITIVE2)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE2
D;JLT
@NORMAL_CASE2
0;JMP
(NEGATIVE_POSITIVE2)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE2
0;JMP
(y_NEGATIVE2)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE2
D;JGT
@NORMAL_CASE2
0;JMP
(POSITIVE_NEGATIVE2)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE2
0;JMP
(NORMAL_CASE2)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE2
D;JLT
@SP
A=M-1
M=0
@CONTINUE2
0;JMP
(TRUE2)
@SP
A=M-1
M=-1
(CONTINUE2)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.init$WHILE_END0

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Math.init$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Math.init$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.abs 0
(Math.abs)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE11
D;JGT
@y_NEGATIVE11
D;JLT
@NORMAL_CASE11
0;JMP
(y_POSITIVE11)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE11
D;JLT
@NORMAL_CASE11
0;JMP
(NEGATIVE_POSITIVE11)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE11
0;JMP
(y_NEGATIVE11)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE11
D;JGT
@NORMAL_CASE11
0;JMP
(POSITIVE_NEGATIVE11)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE11
0;JMP
(NORMAL_CASE11)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE11
D;JLT
@SP
A=M-1
M=0
@CONTINUE11
0;JMP
(TRUE11)
@SP
A=M-1
M=-1
(CONTINUE11)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.abs$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.abs$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.abs$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.abs$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.multiply 5
(Math.multiply)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE13
D;JGT
@y_NEGATIVE13
D;JLT
@NORMAL_CASE13
0;JMP
(y_POSITIVE13)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE13
D;JLT
@NORMAL_CASE13
0;JMP
(NEGATIVE_POSITIVE13)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE13
0;JMP
(y_NEGATIVE13)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE13
D;JGT
@NORMAL_CASE13
0;JMP
(POSITIVE_NEGATIVE13)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE13
0;JMP
(NORMAL_CASE13)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE13
D;JLT
@SP
A=M-1
M=0
@CONTINUE13
0;JMP
(TRUE13)
@SP
A=M-1
M=-1
(CONTINUE13)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE14
D;JGT
@y_NEGATIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(y_POSITIVE14)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(NEGATIVE_POSITIVE14)
@SP
M=M-1
A=M-1
M=0
@CONTINUE14
0;JMP
(y_NEGATIVE14)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE14
D;JGT
@NORMAL_CASE14
0;JMP
(POSITIVE_NEGATIVE14)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE14
0;JMP
(NORMAL_CASE14)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE14
D;JGT
@SP
A=M-1
M=0
@CONTINUE14
0;JMP
(TRUE14)
@SP
A=M-1
M=-1
(CONTINUE14)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE16
D;JGT
@y_NEGATIVE16
D;JLT
@NORMAL_CASE16
0;JMP
(y_POSITIVE16)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE16
D;JLT
@NORMAL_CASE16
0;JMP
(NEGATIVE_POSITIVE16)
@SP
M=M-1
A=M-1
M=0
@CONTINUE16
0;JMP
(y_NEGATIVE16)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE16
D;JGT
@NORMAL_CASE16
0;JMP
(POSITIVE_NEGATIVE16)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE16
0;JMP
(NORMAL_CASE16)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE16
D;JGT
@SP
A=M-1
M=0
@CONTINUE16
0;JMP
(TRUE16)
@SP
A=M-1
M=-1
(CONTINUE16)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE17
D;JGT
@y_NEGATIVE17
D;JLT
@NORMAL_CASE17
0;JMP
(y_POSITIVE17)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE17
D;JLT
@NORMAL_CASE17
0;JMP
(NEGATIVE_POSITIVE17)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE17
0;JMP
(y_NEGATIVE17)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE17
D;JGT
@NORMAL_CASE17
0;JMP
(POSITIVE_NEGATIVE17)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE17
0;JMP
(NORMAL_CASE17)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE17
D;JLT
@SP
A=M-1
M=0
@CONTINUE17
0;JMP
(TRUE17)
@SP
A=M-1
M=-1
(CONTINUE17)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.abs 1
@Math.multiply$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply$ret.3)
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.abs 1
@Math.multiply$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.multiply$ret.4)
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE20
D;JGT
@y_NEGATIVE20
D;JLT
@NORMAL_CASE20
0;JMP
(y_POSITIVE20)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE20
D;JLT
@NORMAL_CASE20
0;JMP
(NEGATIVE_POSITIVE20)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE20
0;JMP
(y_NEGATIVE20)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE20
D;JGT
@NORMAL_CASE20
0;JMP
(POSITIVE_NEGATIVE20)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE20
0;JMP
(NORMAL_CASE20)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE20
D;JLT
@SP
A=M-1
M=0
@CONTINUE20
0;JMP
(TRUE20)
@SP
A=M-1
M=-1
(CONTINUE20)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.multiply$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.multiply$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.multiply$IF_FALSE0)
// write label WHILE_EXP0
(Math.multiply$WHILE_EXP0)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE21
D;JGT
@y_NEGATIVE21
D;JLT
@NORMAL_CASE21
0;JMP
(y_POSITIVE21)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE21
D;JLT
@NORMAL_CASE21
0;JMP
(NEGATIVE_POSITIVE21)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE21
0;JMP
(y_NEGATIVE21)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE21
D;JGT
@NORMAL_CASE21
0;JMP
(POSITIVE_NEGATIVE21)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE21
0;JMP
(NORMAL_CASE21)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE21
D;JLT
@SP
A=M-1
M=0
@CONTINUE21
0;JMP
(TRUE21)
@SP
A=M-1
M=-1
(CONTINUE21)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.multiply$WHILE_END0

D;JNE
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE25
D;JGT
@y_NEGATIVE25
D;JLT
@NORMAL_CASE25
0;JMP
(y_POSITIVE25)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE25
D;JLT
@NORMAL_CASE25
0;JMP
(NEGATIVE_POSITIVE25)
@SP
M=M-1
A=M-1
M=0
@CONTINUE25
0;JMP
(y_NEGATIVE25)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE25
D;JGT
@NORMAL_CASE25
0;JMP
(POSITIVE_NEGATIVE25)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE25
0;JMP
(NORMAL_CASE25)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE25
D;JGT
@SP
A=M-1
M=0
@CONTINUE25
0;JMP
(TRUE25)
@SP
A=M-1
M=-1
(CONTINUE25)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Math.multiply$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Math.multiply$IF_TRUE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(Math.multiply$IF_FALSE1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Math.multiply$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Math.multiply$WHILE_END0)
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Math.multiply$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Math.multiply$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Math.multiply$IF_TRUE2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(Math.multiply$IF_FALSE2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.divide 4
(Math.divide)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE32)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE32
D;JEQ
@SP
A=M-1
M=0
@CONTINUE32
0;JMP
(TRUE32)
@SP
A=M-1
M=-1
(CONTINUE32)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.divide$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.divide$IF_TRUE0)
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Math.divide$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.divide$ret.5)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.divide$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE33
D;JGT
@y_NEGATIVE33
D;JLT
@NORMAL_CASE33
0;JMP
(y_POSITIVE33)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE33
D;JLT
@NORMAL_CASE33
0;JMP
(NEGATIVE_POSITIVE33)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE33
0;JMP
(y_NEGATIVE33)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE33
D;JGT
@NORMAL_CASE33
0;JMP
(POSITIVE_NEGATIVE33)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE33
0;JMP
(NORMAL_CASE33)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE33
D;JLT
@SP
A=M-1
M=0
@CONTINUE33
0;JMP
(TRUE33)
@SP
A=M-1
M=-1
(CONTINUE33)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE34
D;JGT
@y_NEGATIVE34
D;JLT
@NORMAL_CASE34
0;JMP
(y_POSITIVE34)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE34
D;JLT
@NORMAL_CASE34
0;JMP
(NEGATIVE_POSITIVE34)
@SP
M=M-1
A=M-1
M=0
@CONTINUE34
0;JMP
(y_NEGATIVE34)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE34
D;JGT
@NORMAL_CASE34
0;JMP
(POSITIVE_NEGATIVE34)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE34
0;JMP
(NORMAL_CASE34)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE34
D;JGT
@SP
A=M-1
M=0
@CONTINUE34
0;JMP
(TRUE34)
@SP
A=M-1
M=-1
(CONTINUE34)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE36
D;JGT
@y_NEGATIVE36
D;JLT
@NORMAL_CASE36
0;JMP
(y_POSITIVE36)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE36
D;JLT
@NORMAL_CASE36
0;JMP
(NEGATIVE_POSITIVE36)
@SP
M=M-1
A=M-1
M=0
@CONTINUE36
0;JMP
(y_NEGATIVE36)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE36
D;JGT
@NORMAL_CASE36
0;JMP
(POSITIVE_NEGATIVE36)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE36
0;JMP
(NORMAL_CASE36)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE36
D;JGT
@SP
A=M-1
M=0
@CONTINUE36
0;JMP
(TRUE36)
@SP
A=M-1
M=-1
(CONTINUE36)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE37
D;JGT
@y_NEGATIVE37
D;JLT
@NORMAL_CASE37
0;JMP
(y_POSITIVE37)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE37
D;JLT
@NORMAL_CASE37
0;JMP
(NEGATIVE_POSITIVE37)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE37
0;JMP
(y_NEGATIVE37)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE37
D;JGT
@NORMAL_CASE37
0;JMP
(POSITIVE_NEGATIVE37)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE37
0;JMP
(NORMAL_CASE37)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE37
D;JLT
@SP
A=M-1
M=0
@CONTINUE37
0;JMP
(TRUE37)
@SP
A=M-1
M=-1
(CONTINUE37)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.abs 1
@Math.divide$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.abs 1
@Math.divide$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Math.divide$ret.7)
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Math.divide$WHILE_EXP0)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.divide$WHILE_END0

D;JNE
//push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE46
D;JGT
@y_NEGATIVE46
D;JLT
@NORMAL_CASE46
0;JMP
(y_POSITIVE46)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE46
D;JLT
@NORMAL_CASE46
0;JMP
(NEGATIVE_POSITIVE46)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE46
0;JMP
(y_NEGATIVE46)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE46
D;JGT
@NORMAL_CASE46
0;JMP
(POSITIVE_NEGATIVE46)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE46
0;JMP
(NORMAL_CASE46)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE46
D;JLT
@SP
A=M-1
M=0
@CONTINUE46
0;JMP
(TRUE46)
@SP
A=M-1
M=-1
(CONTINUE46)
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Math.divide$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Math.divide$IF_TRUE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE55
D;JGT
@y_NEGATIVE55
D;JLT
@NORMAL_CASE55
0;JMP
(y_POSITIVE55)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE55
D;JLT
@NORMAL_CASE55
0;JMP
(NEGATIVE_POSITIVE55)
@SP
M=M-1
A=M-1
M=0
@CONTINUE55
0;JMP
(y_NEGATIVE55)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE55
D;JGT
@NORMAL_CASE55
0;JMP
(POSITIVE_NEGATIVE55)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE55
0;JMP
(NORMAL_CASE55)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE55
D;JGT
@SP
A=M-1
M=0
@CONTINUE55
0;JMP
(TRUE55)
@SP
A=M-1
M=-1
(CONTINUE55)
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Math.divide$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Math.divide$IF_TRUE2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(Math.divide$IF_FALSE2)
// write label IF_FALSE1
(Math.divide$IF_FALSE1)
// write goto WHILE_EXP0
@Math.divide$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Math.divide$WHILE_END0)
// write label WHILE_EXP1
(Math.divide$WHILE_EXP1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//gt
@SP
A=M-1
D=M

@y_POSITIVE59
D;JGT
@y_NEGATIVE59
D;JLT
@NORMAL_CASE59
0;JMP
(y_POSITIVE59)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE59
D;JLT
@NORMAL_CASE59
0;JMP
(NEGATIVE_POSITIVE59)
@SP
M=M-1
A=M-1
M=0
@CONTINUE59
0;JMP
(y_NEGATIVE59)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE59
D;JGT
@NORMAL_CASE59
0;JMP
(POSITIVE_NEGATIVE59)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE59
0;JMP
(NORMAL_CASE59)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE59
D;JGT
@SP
A=M-1
M=0
@CONTINUE59
0;JMP
(TRUE59)
@SP
A=M-1
M=-1
(CONTINUE59)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END1
@SP
AM=M-1
D=M
@Math.divide$WHILE_END1

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE62
D;JGT
@y_NEGATIVE62
D;JLT
@NORMAL_CASE62
0;JMP
(y_POSITIVE62)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE62
D;JLT
@NORMAL_CASE62
0;JMP
(NEGATIVE_POSITIVE62)
@SP
M=M-1
A=M-1
M=0
@CONTINUE62
0;JMP
(y_NEGATIVE62)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE62
D;JGT
@NORMAL_CASE62
0;JMP
(POSITIVE_NEGATIVE62)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE62
0;JMP
(NORMAL_CASE62)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE62
D;JGT
@SP
A=M-1
M=0
@CONTINUE62
0;JMP
(TRUE62)
@SP
A=M-1
M=-1
(CONTINUE62)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@Math.divide$IF_FALSE3
0;JMP
// write label IF_TRUE3
(Math.divide$IF_TRUE3)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Math.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE3
(Math.divide$IF_FALSE3)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP1
@Math.divide$WHILE_EXP1
0;JMP
// write label WHILE_END1
(Math.divide$WHILE_END1)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE4
@SP
AM=M-1
D=M
@Math.divide$IF_TRUE4

D;JNE
// write goto IF_FALSE4
@Math.divide$IF_FALSE4
0;JMP
// write label IF_TRUE4
(Math.divide$IF_TRUE4)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE4
(Math.divide$IF_FALSE4)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.sqrt 4
(Math.sqrt)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE70
D;JGT
@y_NEGATIVE70
D;JLT
@NORMAL_CASE70
0;JMP
(y_POSITIVE70)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE70
D;JLT
@NORMAL_CASE70
0;JMP
(NEGATIVE_POSITIVE70)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE70
0;JMP
(y_NEGATIVE70)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE70
D;JGT
@NORMAL_CASE70
0;JMP
(POSITIVE_NEGATIVE70)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE70
0;JMP
(NORMAL_CASE70)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE70
D;JLT
@SP
A=M-1
M=0
@CONTINUE70
0;JMP
(TRUE70)
@SP
A=M-1
M=-1
(CONTINUE70)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.sqrt$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.sqrt$IF_TRUE0)
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Math.sqrt$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Math.sqrt$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.sqrt$IF_FALSE0)
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Math.sqrt$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//gt
@SP
A=M-1
D=M

@y_POSITIVE72
D;JGT
@y_NEGATIVE72
D;JLT
@NORMAL_CASE72
0;JMP
(y_POSITIVE72)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE72
D;JLT
@NORMAL_CASE72
0;JMP
(NEGATIVE_POSITIVE72)
@SP
M=M-1
A=M-1
M=0
@CONTINUE72
0;JMP
(y_NEGATIVE72)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE72
D;JGT
@NORMAL_CASE72
0;JMP
(POSITIVE_NEGATIVE72)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE72
0;JMP
(NORMAL_CASE72)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE72
D;JGT
@SP
A=M-1
M=0
@CONTINUE72
0;JMP
(TRUE72)
@SP
A=M-1
M=-1
(CONTINUE72)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Math.sqrt$WHILE_END0

D;JNE
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Math.sqrt$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Math.sqrt$ret.9)
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE76
D;JGT
@y_NEGATIVE76
D;JLT
@NORMAL_CASE76
0;JMP
(y_POSITIVE76)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE76
D;JLT
@NORMAL_CASE76
0;JMP
(NEGATIVE_POSITIVE76)
@SP
M=M-1
A=M-1
M=0
@CONTINUE76
0;JMP
(y_NEGATIVE76)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE76
D;JGT
@NORMAL_CASE76
0;JMP
(POSITIVE_NEGATIVE76)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE76
0;JMP
(NORMAL_CASE76)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE76
D;JGT
@SP
A=M-1
M=0
@CONTINUE76
0;JMP
(TRUE76)
@SP
A=M-1
M=-1
(CONTINUE76)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE78
D;JGT
@y_NEGATIVE78
D;JLT
@NORMAL_CASE78
0;JMP
(y_POSITIVE78)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE78
D;JLT
@NORMAL_CASE78
0;JMP
(NEGATIVE_POSITIVE78)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE78
0;JMP
(y_NEGATIVE78)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE78
D;JGT
@NORMAL_CASE78
0;JMP
(POSITIVE_NEGATIVE78)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE78
0;JMP
(NORMAL_CASE78)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE78
D;JLT
@SP
A=M-1
M=0
@CONTINUE78
0;JMP
(TRUE78)
@SP
A=M-1
M=-1
(CONTINUE78)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Math.sqrt$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Math.sqrt$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Math.sqrt$IF_TRUE1)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(Math.sqrt$IF_FALSE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Math.sqrt$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Math.sqrt$WHILE_END0)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.max 0
(Math.max)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE82
D;JGT
@y_NEGATIVE82
D;JLT
@NORMAL_CASE82
0;JMP
(y_POSITIVE82)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE82
D;JLT
@NORMAL_CASE82
0;JMP
(NEGATIVE_POSITIVE82)
@SP
M=M-1
A=M-1
M=0
@CONTINUE82
0;JMP
(y_NEGATIVE82)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE82
D;JGT
@NORMAL_CASE82
0;JMP
(POSITIVE_NEGATIVE82)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE82
0;JMP
(NORMAL_CASE82)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE82
D;JGT
@SP
A=M-1
M=0
@CONTINUE82
0;JMP
(TRUE82)
@SP
A=M-1
M=-1
(CONTINUE82)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.max$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.max$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.max$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.max$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Math.min 0
(Math.min)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE83
D;JGT
@y_NEGATIVE83
D;JLT
@NORMAL_CASE83
0;JMP
(y_POSITIVE83)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE83
D;JLT
@NORMAL_CASE83
0;JMP
(NEGATIVE_POSITIVE83)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE83
0;JMP
(y_NEGATIVE83)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE83
D;JGT
@NORMAL_CASE83
0;JMP
(POSITIVE_NEGATIVE83)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE83
0;JMP
(NORMAL_CASE83)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE83
D;JLT
@SP
A=M-1
M=0
@CONTINUE83
0;JMP
(TRUE83)
@SP
A=M-1
M=-1
(CONTINUE83)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Math.min$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Math.min$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Math.min$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Math.min$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Memory.init 0
(Memory.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@Memory.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2049
@2049
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 2050
@2050
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Memory.peek 0
(Memory.peek)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Memory.poke 0
(Memory.poke)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Memory.alloc 1
(Memory.alloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE5
D;JGT
@y_NEGATIVE5
D;JLT
@NORMAL_CASE5
0;JMP
(y_POSITIVE5)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE5
D;JLT
@NORMAL_CASE5
0;JMP
(NEGATIVE_POSITIVE5)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE5
0;JMP
(y_NEGATIVE5)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE5
D;JGT
@NORMAL_CASE5
0;JMP
(POSITIVE_NEGATIVE5)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE5
0;JMP
(NORMAL_CASE5)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE5
D;JLT
@SP
A=M-1
M=0
@CONTINUE5
0;JMP
(TRUE5)
@SP
A=M-1
M=-1
(CONTINUE5)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Memory.alloc$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Memory.alloc$IF_TRUE0)
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Memory.alloc$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc$ret.1)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Memory.alloc$IF_FALSE0)
//push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Memory.alloc$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE7
D;JGT
@y_NEGATIVE7
D;JLT
@NORMAL_CASE7
0;JMP
(y_POSITIVE7)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE7
D;JLT
@NORMAL_CASE7
0;JMP
(NEGATIVE_POSITIVE7)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE7
0;JMP
(y_NEGATIVE7)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE7
D;JGT
@NORMAL_CASE7
0;JMP
(POSITIVE_NEGATIVE7)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE7
0;JMP
(NORMAL_CASE7)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE7
D;JLT
@SP
A=M-1
M=0
@CONTINUE7
0;JMP
(TRUE7)
@SP
A=M-1
M=-1
(CONTINUE7)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Memory.alloc$WHILE_END0

D;JNE
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Memory.alloc$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Memory.alloc$WHILE_END0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 16379
@16379
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE11
D;JGT
@y_NEGATIVE11
D;JLT
@NORMAL_CASE11
0;JMP
(y_POSITIVE11)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE11
D;JLT
@NORMAL_CASE11
0;JMP
(NEGATIVE_POSITIVE11)
@SP
M=M-1
A=M-1
M=0
@CONTINUE11
0;JMP
(y_NEGATIVE11)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE11
D;JGT
@NORMAL_CASE11
0;JMP
(POSITIVE_NEGATIVE11)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE11
0;JMP
(NORMAL_CASE11)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE11
D;JGT
@SP
A=M-1
M=0
@CONTINUE11
0;JMP
(TRUE11)
@SP
A=M-1
M=-1
(CONTINUE11)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Memory.alloc$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Memory.alloc$IF_TRUE1)
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Memory.alloc$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Memory.alloc$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(Memory.alloc$IF_FALSE1)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//gt
@SP
A=M-1
D=M

@y_POSITIVE14
D;JGT
@y_NEGATIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(y_POSITIVE14)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(NEGATIVE_POSITIVE14)
@SP
M=M-1
A=M-1
M=0
@CONTINUE14
0;JMP
(y_NEGATIVE14)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE14
D;JGT
@NORMAL_CASE14
0;JMP
(POSITIVE_NEGATIVE14)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE14
0;JMP
(NORMAL_CASE14)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE14
D;JGT
@SP
A=M-1
M=0
@CONTINUE14
0;JMP
(TRUE14)
@SP
A=M-1
M=-1
(CONTINUE14)
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Memory.alloc$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Memory.alloc$IF_TRUE2)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//eq
(NORMAL_CASE22)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE22
D;JEQ
@SP
A=M-1
M=0
@CONTINUE22
0;JMP
(TRUE22)
@SP
A=M-1
M=-1
(CONTINUE22)
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Memory.alloc$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@Memory.alloc$IF_FALSE3
0;JMP
// write label IF_TRUE3
(Memory.alloc$IF_TRUE3)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END3
@Memory.alloc$IF_END3
0;JMP
// write label IF_FALSE3
(Memory.alloc$IF_FALSE3)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END3
(Memory.alloc$IF_END3)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(Memory.alloc$IF_FALSE2)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Memory.deAlloc 2
(Memory.deAlloc)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE38)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE38
D;JEQ
@SP
A=M-1
M=0
@CONTINUE38
0;JMP
(TRUE38)
@SP
A=M-1
M=-1
(CONTINUE38)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Memory.deAlloc$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Memory.deAlloc$IF_TRUE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Memory.deAlloc$IF_END0
0;JMP
// write label IF_FALSE0
(Memory.deAlloc$IF_FALSE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//eq
(NORMAL_CASE50)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE50
D;JEQ
@SP
A=M-1
M=0
@CONTINUE50
0;JMP
(TRUE50)
@SP
A=M-1
M=-1
(CONTINUE50)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Memory.deAlloc$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Memory.deAlloc$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Memory.deAlloc$IF_TRUE1)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END1
@Memory.deAlloc$IF_END1
0;JMP
// write label IF_FALSE1
(Memory.deAlloc$IF_FALSE1)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END1
(Memory.deAlloc$IF_END1)
// write label IF_END0
(Memory.deAlloc$IF_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.init 0
(Output.init)
//push constant 16384
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 4
@Output.4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop static 2
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 1
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.new 1
@Output.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Output.init$ret.1)
//pop static 3
@Output.3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Output.initMap 0
@Output.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.initMap
0;JMP
(Output.init$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Output.createShiftedMap 0
@Output.init$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.createShiftedMap
0;JMP
(Output.init$ret.3)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.initMap 0
(Output.initMap)
//push constant 127
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@Output.initMap$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.initMap$ret.4)
//pop static 5
@Output.5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.5)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 33
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.7)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 34
@34
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 20
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 35
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 18
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 18
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 18
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 18
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 18
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 18
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.9)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 36
@36
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.10)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 37
@37
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 35
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 49
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.11)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 38
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.12)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 39
@39
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.13)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 40
@40
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.14)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 41
@41
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.15)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 42
@42
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.16)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 43
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.17)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 44
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.18)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 45
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.19)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 46
@46
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.20)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 47
@47
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.21)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.22)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 49
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 14
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.23)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.24)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 28
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.25)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 52
@52
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 28
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 26
@26
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 25
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 60
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.26)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 53
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.27)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 28
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.28)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 55
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 49
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.29)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 56
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.30)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 57
@57
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 62
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 14
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.31)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 58
@58
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.32)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 59
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.33)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 60
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.34)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 61
@61
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.35)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 62
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.36)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 64
@64
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 59
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 59
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 59
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.37)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.38)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 65
@65
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.39)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 66
@66
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.40)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 67
@67
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 28
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 35
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 35
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 28
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.41)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 68
@68
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.42)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 69
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 35
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 35
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.43)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 70
@70
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 35
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.44)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 71
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 28
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 35
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 59
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 44
@44
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.45)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 72
@72
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.46)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 73
@73
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.47)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 74
@74
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 60
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 14
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.48)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 75
@75
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.49)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 76
@76
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 35
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.50
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.50)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 77
@77
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 33
@33
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.51
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.51)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 78
@78
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 55
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 55
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 59
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 59
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.52
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.52)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 79
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.53
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.53)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 80
@80
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.54
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.54)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 81
@81
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 59
@59
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.55
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.55)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 82
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.56
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.56)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 83
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 28
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.57
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.57)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 84
@84
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 45
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.58
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.58)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 85
@85
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.59
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.59)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 86
@86
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.60
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.60)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 87
@87
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 18
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.61
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.61)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 88
@88
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.62
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.62)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 89
@89
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.63
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.63)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 90
@90
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 49
@49
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 35
@35
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.64
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.64)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 91
@91
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.65
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.65)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 92
@92
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.66
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.66)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 93
@93
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.67
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.67)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 94
@94
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 28
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.68
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.68)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 95
@95
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.69
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.69)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 96
@96
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.70
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.70)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 97
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 14
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.71
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.71)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 98
@98
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.72
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.72)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 99
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.73
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.73)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 100
@100
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 60
@60
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.74
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.74)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 101
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.75
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.75)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 102
@102
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 28
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 38
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.76
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.76)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 103
@103
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 62
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.77
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.77)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 104
@104
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 55
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.78
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.78)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 105
@105
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 14
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.79
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.79)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 106
@106
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 56
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.80
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.80)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 107
@107
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.81
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.81)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 108
@108
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 14
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.82
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.82)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 109
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 29
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 43
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 43
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 43
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 43
@43
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.83
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.83)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 110
@110
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 29
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.84
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.84)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 111
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.85
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.85)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 112
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.86
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.86)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 113
@113
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 62
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.87
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.87)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 114
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 29
@29
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 55
@55
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.88
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.88)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 115
@115
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.89
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.89)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 116
@116
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 28
@28
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.90
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.90)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 117
@117
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 54
@54
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.91
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.91)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 118
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.92
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.92)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 119
@119
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 18
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.93
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.93)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 120
@120
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 30
@30
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.94
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.94)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 121
@121
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 62
@62
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 24
@24
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.95
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.95)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 122
@122
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 51
@51
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.96
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.96)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 123
@123
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 56
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 56
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.97
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.97)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 124
@124
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.98
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.98)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 125
@125
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 56
@56
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.99
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.99)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 126
@126
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 38
@38
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 45
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 25
@25
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.create 12
@Output.initMap$ret.100
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0;JMP
(Output.initMap$ret.100)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.create 1
(Output.create)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@Output.create$ret.101
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.create$ret.101)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 5
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 4
@ARG
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 5
@ARG
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 6
@ARG
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 7
@ARG
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 8
@ARG
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 9
@ARG
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 9
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 10
@ARG
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 11
@ARG
D=M
@11
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.createShiftedMap 4
(Output.createShiftedMap)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 127
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@Output.createShiftedMap$ret.102
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.createShiftedMap$ret.102)
//pop static 6
@Output.6
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Output.createShiftedMap$WHILE_EXP0)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 127
@127
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE14
D;JGT
@y_NEGATIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(y_POSITIVE14)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE14
D;JLT
@NORMAL_CASE14
0;JMP
(NEGATIVE_POSITIVE14)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE14
0;JMP
(y_NEGATIVE14)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE14
D;JGT
@NORMAL_CASE14
0;JMP
(POSITIVE_NEGATIVE14)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE14
0;JMP
(NORMAL_CASE14)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE14
D;JLT
@SP
A=M-1
M=0
@CONTINUE14
0;JMP
(TRUE14)
@SP
A=M-1
M=-1
(CONTINUE14)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Output.createShiftedMap$WHILE_END0

D;JNE
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 5
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@Output.createShiftedMap$ret.103
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Output.createShiftedMap$ret.103)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 6
@Output.6
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP1
(Output.createShiftedMap$WHILE_EXP1)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE18
D;JGT
@y_NEGATIVE18
D;JLT
@NORMAL_CASE18
0;JMP
(y_POSITIVE18)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE18
D;JLT
@NORMAL_CASE18
0;JMP
(NEGATIVE_POSITIVE18)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE18
0;JMP
(y_NEGATIVE18)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE18
D;JGT
@NORMAL_CASE18
0;JMP
(POSITIVE_NEGATIVE18)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE18
0;JMP
(NORMAL_CASE18)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE18
D;JLT
@SP
A=M-1
M=0
@CONTINUE18
0;JMP
(TRUE18)
@SP
A=M-1
M=-1
(CONTINUE18)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END1
@SP
AM=M-1
D=M
@Output.createShiftedMap$WHILE_END1

D;JNE
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 256
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Output.createShiftedMap$ret.104
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.createShiftedMap$ret.104)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP1
@Output.createShiftedMap$WHILE_EXP1
0;JMP
// write label WHILE_END1
(Output.createShiftedMap$WHILE_END1)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE23)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE23
D;JEQ
@SP
A=M-1
M=0
@CONTINUE23
0;JMP
(TRUE23)
@SP
A=M-1
M=-1
(CONTINUE23)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.createShiftedMap$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Output.createShiftedMap$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Output.createShiftedMap$IF_TRUE0)
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Output.createShiftedMap$IF_END0
0;JMP
// write label IF_FALSE0
(Output.createShiftedMap$IF_FALSE0)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END0
(Output.createShiftedMap$IF_END0)
// write goto WHILE_EXP0
@Output.createShiftedMap$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Output.createShiftedMap$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.getMap 1
(Output.getMap)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE25
D;JGT
@y_NEGATIVE25
D;JLT
@NORMAL_CASE25
0;JMP
(y_POSITIVE25)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE25
D;JLT
@NORMAL_CASE25
0;JMP
(NEGATIVE_POSITIVE25)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE25
0;JMP
(y_NEGATIVE25)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE25
D;JGT
@NORMAL_CASE25
0;JMP
(POSITIVE_NEGATIVE25)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE25
0;JMP
(NORMAL_CASE25)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE25
D;JLT
@SP
A=M-1
M=0
@CONTINUE25
0;JMP
(TRUE25)
@SP
A=M-1
M=-1
(CONTINUE25)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 126
@126
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE26
D;JGT
@y_NEGATIVE26
D;JLT
@NORMAL_CASE26
0;JMP
(y_POSITIVE26)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE26
D;JLT
@NORMAL_CASE26
0;JMP
(NEGATIVE_POSITIVE26)
@SP
M=M-1
A=M-1
M=0
@CONTINUE26
0;JMP
(y_NEGATIVE26)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE26
D;JGT
@NORMAL_CASE26
0;JMP
(POSITIVE_NEGATIVE26)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE26
0;JMP
(NORMAL_CASE26)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE26
D;JGT
@SP
A=M-1
M=0
@CONTINUE26
0;JMP
(TRUE26)
@SP
A=M-1
M=-1
(CONTINUE26)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.getMap$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Output.getMap$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Output.getMap$IF_TRUE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Output.getMap$IF_FALSE0)
//push static 2
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Output.getMap$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Output.getMap$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Output.getMap$IF_TRUE1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 5
@Output.5
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END1
@Output.getMap$IF_END1
0;JMP
// write label IF_FALSE1
(Output.getMap$IF_FALSE1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 6
@Output.6
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END1
(Output.getMap$IF_END1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.drawChar 4
(Output.drawChar)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Output.getMap 1
@Output.drawChar$ret.105
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.getMap
0;JMP
(Output.drawChar$ret.105)
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Output.drawChar$WHILE_EXP0)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE30
D;JGT
@y_NEGATIVE30
D;JLT
@NORMAL_CASE30
0;JMP
(y_POSITIVE30)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE30
D;JLT
@NORMAL_CASE30
0;JMP
(NEGATIVE_POSITIVE30)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE30
0;JMP
(y_NEGATIVE30)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE30
D;JGT
@NORMAL_CASE30
0;JMP
(POSITIVE_NEGATIVE30)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE30
0;JMP
(NORMAL_CASE30)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE30
D;JLT
@SP
A=M-1
M=0
@CONTINUE30
0;JMP
(TRUE30)
@SP
A=M-1
M=-1
(CONTINUE30)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Output.drawChar$WHILE_END0

D;JNE
//push static 2
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.drawChar$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Output.drawChar$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Output.drawChar$IF_TRUE0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 4
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 256
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Output.drawChar$IF_END0
0;JMP
// write label IF_FALSE0
(Output.drawChar$IF_FALSE0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 4
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 255
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END0
(Output.drawChar$IF_END0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 4
@Output.4
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Output.drawChar$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Output.drawChar$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.moveCursor 0
(Output.moveCursor)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE42
D;JGT
@y_NEGATIVE42
D;JLT
@NORMAL_CASE42
0;JMP
(y_POSITIVE42)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE42
D;JLT
@NORMAL_CASE42
0;JMP
(NEGATIVE_POSITIVE42)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE42
0;JMP
(y_NEGATIVE42)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE42
D;JGT
@NORMAL_CASE42
0;JMP
(POSITIVE_NEGATIVE42)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE42
0;JMP
(NORMAL_CASE42)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE42
D;JLT
@SP
A=M-1
M=0
@CONTINUE42
0;JMP
(TRUE42)
@SP
A=M-1
M=-1
(CONTINUE42)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 22
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE43
D;JGT
@y_NEGATIVE43
D;JLT
@NORMAL_CASE43
0;JMP
(y_POSITIVE43)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE43
D;JLT
@NORMAL_CASE43
0;JMP
(NEGATIVE_POSITIVE43)
@SP
M=M-1
A=M-1
M=0
@CONTINUE43
0;JMP
(y_NEGATIVE43)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE43
D;JGT
@NORMAL_CASE43
0;JMP
(POSITIVE_NEGATIVE43)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE43
0;JMP
(NORMAL_CASE43)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE43
D;JGT
@SP
A=M-1
M=0
@CONTINUE43
0;JMP
(TRUE43)
@SP
A=M-1
M=-1
(CONTINUE43)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE45
D;JGT
@y_NEGATIVE45
D;JLT
@NORMAL_CASE45
0;JMP
(y_POSITIVE45)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE45
D;JLT
@NORMAL_CASE45
0;JMP
(NEGATIVE_POSITIVE45)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE45
0;JMP
(y_NEGATIVE45)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE45
D;JGT
@NORMAL_CASE45
0;JMP
(POSITIVE_NEGATIVE45)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE45
0;JMP
(NORMAL_CASE45)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE45
D;JLT
@SP
A=M-1
M=0
@CONTINUE45
0;JMP
(TRUE45)
@SP
A=M-1
M=-1
(CONTINUE45)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 63
@63
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE47
D;JGT
@y_NEGATIVE47
D;JLT
@NORMAL_CASE47
0;JMP
(y_POSITIVE47)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE47
D;JLT
@NORMAL_CASE47
0;JMP
(NEGATIVE_POSITIVE47)
@SP
M=M-1
A=M-1
M=0
@CONTINUE47
0;JMP
(y_NEGATIVE47)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE47
D;JGT
@NORMAL_CASE47
0;JMP
(POSITIVE_NEGATIVE47)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE47
0;JMP
(NORMAL_CASE47)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE47
D;JGT
@SP
A=M-1
M=0
@CONTINUE47
0;JMP
(TRUE47)
@SP
A=M-1
M=-1
(CONTINUE47)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.moveCursor$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Output.moveCursor$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Output.moveCursor$IF_TRUE0)
//push constant 20
@20
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Output.moveCursor$ret.106
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Output.moveCursor$ret.106)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Output.moveCursor$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Output.moveCursor$ret.107
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Output.moveCursor$ret.107)
//pop static 0
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 352
@352
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Output.moveCursor$ret.108
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.moveCursor$ret.108)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop static 1
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Output.moveCursor$ret.109
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Output.moveCursor$ret.109)
//eq
(NORMAL_CASE51)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE51
D;JEQ
@SP
A=M-1
M=0
@CONTINUE51
0;JMP
(TRUE51)
@SP
A=M-1
M=-1
(CONTINUE51)
//pop static 2
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.drawChar 1
@Output.moveCursor$ret.110
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.moveCursor$ret.110)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.printChar 0
(Output.printChar)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function String.newLine 0
@Output.printChar$ret.111
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.newLine
0;JMP
(Output.printChar$ret.111)
//eq
(NORMAL_CASE52)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE52
D;JEQ
@SP
A=M-1
M=0
@CONTINUE52
0;JMP
(TRUE52)
@SP
A=M-1
M=-1
(CONTINUE52)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Output.printChar$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Output.printChar$IF_TRUE0)
// call function Output.println 0
@Output.printChar$ret.112
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.printChar$ret.112)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Output.printChar$IF_END0
0;JMP
// write label IF_FALSE0
(Output.printChar$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function String.backSpace 0
@Output.printChar$ret.113
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0;JMP
(Output.printChar$ret.113)
//eq
(NORMAL_CASE53)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE53
D;JEQ
@SP
A=M-1
M=0
@CONTINUE53
0;JMP
(TRUE53)
@SP
A=M-1
M=-1
(CONTINUE53)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Output.printChar$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Output.printChar$IF_TRUE1)
// call function Output.backSpace 0
@Output.printChar$ret.114
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.backSpace
0;JMP
(Output.printChar$ret.114)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END1
@Output.printChar$IF_END1
0;JMP
// write label IF_FALSE1
(Output.printChar$IF_FALSE1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Output.drawChar 1
@Output.printChar$ret.115
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.printChar$ret.115)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push static 2
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Output.printChar$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Output.printChar$IF_TRUE2)
//push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop static 0
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop static 1
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(Output.printChar$IF_FALSE2)
//push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE57)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE57
D;JEQ
@SP
A=M-1
M=0
@CONTINUE57
0;JMP
(TRUE57)
@SP
A=M-1
M=-1
(CONTINUE57)
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Output.printChar$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@Output.printChar$IF_FALSE3
0;JMP
// write label IF_TRUE3
(Output.printChar$IF_TRUE3)
// call function Output.println 0
@Output.printChar$ret.116
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0;JMP
(Output.printChar$ret.116)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END3
@Output.printChar$IF_END3
0;JMP
// write label IF_FALSE3
(Output.printChar$IF_FALSE3)
//push static 2
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop static 2
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END3
(Output.printChar$IF_END3)
// write label IF_END1
(Output.printChar$IF_END1)
// write label IF_END0
(Output.printChar$IF_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.printString 2
(Output.printString)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function String.length 1
@Output.printString$ret.117
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.length
0;JMP
(Output.printString$ret.117)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Output.printString$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE59
D;JGT
@y_NEGATIVE59
D;JLT
@NORMAL_CASE59
0;JMP
(y_POSITIVE59)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE59
D;JLT
@NORMAL_CASE59
0;JMP
(NEGATIVE_POSITIVE59)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE59
0;JMP
(y_NEGATIVE59)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE59
D;JGT
@NORMAL_CASE59
0;JMP
(POSITIVE_NEGATIVE59)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE59
0;JMP
(NORMAL_CASE59)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE59
D;JLT
@SP
A=M-1
M=0
@CONTINUE59
0;JMP
(TRUE59)
@SP
A=M-1
M=-1
(CONTINUE59)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Output.printString$WHILE_END0

D;JNE
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function String.charAt 2
@Output.printString$ret.118
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.charAt
0;JMP
(Output.printString$ret.118)
// call function Output.printChar 1
@Output.printString$ret.119
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0;JMP
(Output.printString$ret.119)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Output.printString$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Output.printString$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.printInt 0
(Output.printInt)
//push static 3
@Output.3
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function String.setInt 2
@Output.printInt$ret.120
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.setInt
0;JMP
(Output.printInt$ret.120)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push static 3
@Output.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Output.printString 1
@Output.printInt$ret.121
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Output.printInt$ret.121)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.println 0
(Output.println)
//push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 352
@352
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop static 1
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop static 2
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 8128
@8128
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE65)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE65
D;JEQ
@SP
A=M-1
M=0
@CONTINUE65
0;JMP
(TRUE65)
@SP
A=M-1
M=-1
(CONTINUE65)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.println$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Output.println$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Output.println$IF_TRUE0)
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 1
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Output.println$IF_FALSE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Output.backSpace 0
(Output.backSpace)
//push static 2
@Output.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Output.backSpace$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Output.backSpace$IF_TRUE0)
//push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE66
D;JGT
@y_NEGATIVE66
D;JLT
@NORMAL_CASE66
0;JMP
(y_POSITIVE66)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE66
D;JLT
@NORMAL_CASE66
0;JMP
(NEGATIVE_POSITIVE66)
@SP
M=M-1
A=M-1
M=0
@CONTINUE66
0;JMP
(y_NEGATIVE66)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE66
D;JGT
@NORMAL_CASE66
0;JMP
(POSITIVE_NEGATIVE66)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE66
0;JMP
(NORMAL_CASE66)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE66
D;JGT
@SP
A=M-1
M=0
@CONTINUE66
0;JMP
(TRUE66)
@SP
A=M-1
M=-1
(CONTINUE66)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Output.backSpace$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Output.backSpace$IF_TRUE1)
//push static 0
@Output.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop static 0
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop static 1
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END1
@Output.backSpace$IF_END1
0;JMP
// write label IF_FALSE1
(Output.backSpace$IF_FALSE1)
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 0
@Output.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE69)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE69
D;JEQ
@SP
A=M-1
M=0
@CONTINUE69
0;JMP
(TRUE69)
@SP
A=M-1
M=-1
(CONTINUE69)
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Output.backSpace$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Output.backSpace$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Output.backSpace$IF_TRUE2)
//push constant 8128
@8128
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 1
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(Output.backSpace$IF_FALSE2)
//push static 1
@Output.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 321
@321
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop static 1
@Output.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END1
(Output.backSpace$IF_END1)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 2
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Output.backSpace$IF_END0
0;JMP
// write label IF_FALSE0
(Output.backSpace$IF_FALSE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop static 2
@Output.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END0
(Output.backSpace$IF_END0)
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.drawChar 1
@Output.backSpace$ret.122
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0;JMP
(Output.backSpace$ret.122)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function PongGame.new 0
(PongGame.new)
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.alloc 1
@PongGame.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(PongGame.new$ret.1)
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Screen.clearScreen 0
@PongGame.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.clearScreen
0;JMP
(PongGame.new$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 6
@THIS
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 230
@230
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 229
@229
D=A
@SP
A=M
M=D
@SP
M=M+1
//push this 6
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.new 4
@PongGame.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.new
0;JMP
(PongGame.new$ret.3)
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 253
@253
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 222
@222
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 229
@229
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.new 6
@PongGame.new$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@11
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.new
0;JMP
(PongGame.new$ret.4)
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 400
@400
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.setDestination 3
@PongGame.new$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.setDestination
0;JMP
(PongGame.new$ret.5)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 238
@238
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 240
@240
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.drawRectangle 4
@PongGame.new$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0;JMP
(PongGame.new$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 22
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.moveCursor 2
@PongGame.new$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(PongGame.new$ret.7)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.new 1
@PongGame.new$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(PongGame.new$ret.8)
//push constant 83
@83
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.new$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.9)
//push constant 99
@99
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.new$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.10)
//push constant 111
@111
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.new$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.11)
//push constant 114
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.new$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.12)
//push constant 101
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.new$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.13)
//push constant 58
@58
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.new$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.14)
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.new$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.15)
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.new$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.new$ret.16)
// call function Output.printString 1
@PongGame.new$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(PongGame.new$ret.17)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 3
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 5
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function PongGame.dispose 0
(PongGame.dispose)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.dispose 1
@PongGame.dispose$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.dispose
0;JMP
(PongGame.dispose$ret.18)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.deAlloc 1
@PongGame.dispose$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(PongGame.dispose$ret.19)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function PongGame.newInstance 0
(PongGame.newInstance)
// call function PongGame.new 0
@PongGame.newInstance$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.new
0;JMP
(PongGame.newInstance$ret.20)
//pop static 0
@PongGame.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function PongGame.checkClearBoard 0
(PongGame.checkClearBoard)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function PongGame.checkBoard 2
(PongGame.checkBoard)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function PongGame.checkClearBoard 1
@PongGame.checkBoard$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.checkClearBoard
0;JMP
(PongGame.checkBoard$ret.21)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function PongGame.getInstance 0
(PongGame.getInstance)
//push static 0
@PongGame.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function PongGame.run 1
(PongGame.run)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(PongGame.run$WHILE_EXP0)
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@PongGame.run$WHILE_END0

D;JNE
// write label WHILE_EXP1
(PongGame.run$WHILE_EXP1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE7)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE7
D;JEQ
@SP
A=M-1
M=0
@CONTINUE7
0;JMP
(TRUE7)
@SP
A=M-1
M=-1
(CONTINUE7)
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END1
@SP
AM=M-1
D=M
@PongGame.run$WHILE_END1

D;JNE
// call function Keyboard.keyPressed 0
@PongGame.run$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(PongGame.run$ret.22)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.move 1
@PongGame.run$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.move
0;JMP
(PongGame.run$ret.23)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function PongGame.moveBall 1
@PongGame.run$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.moveBall
0;JMP
(PongGame.run$ret.24)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP1
@PongGame.run$WHILE_EXP1
0;JMP
// write label WHILE_END1
(PongGame.run$WHILE_END1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 130
@130
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE11)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE11
D;JEQ
@SP
A=M-1
M=0
@CONTINUE11
0;JMP
(TRUE11)
@SP
A=M-1
M=-1
(CONTINUE11)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@PongGame.run$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@PongGame.run$IF_FALSE0
0;JMP
// write label IF_TRUE0
(PongGame.run$IF_TRUE0)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.setDirection 2
@PongGame.run$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setDirection
0;JMP
(PongGame.run$ret.25)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@PongGame.run$IF_END0
0;JMP
// write label IF_FALSE0
(PongGame.run$IF_FALSE0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 132
@132
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE12)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE12
D;JEQ
@SP
A=M-1
M=0
@CONTINUE12
0;JMP
(TRUE12)
@SP
A=M-1
M=-1
(CONTINUE12)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@PongGame.run$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@PongGame.run$IF_FALSE1
0;JMP
// write label IF_TRUE1
(PongGame.run$IF_TRUE1)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.setDirection 2
@PongGame.run$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setDirection
0;JMP
(PongGame.run$ret.26)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END1
@PongGame.run$IF_END1
0;JMP
// write label IF_FALSE1
(PongGame.run$IF_FALSE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 140
@140
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE13)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE13
D;JEQ
@SP
A=M-1
M=0
@CONTINUE13
0;JMP
(TRUE13)
@SP
A=M-1
M=-1
(CONTINUE13)
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@PongGame.run$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@PongGame.run$IF_FALSE2
0;JMP
// write label IF_TRUE2
(PongGame.run$IF_TRUE2)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop this 3
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(PongGame.run$IF_FALSE2)
// write label IF_END1
(PongGame.run$IF_END1)
// write label IF_END0
(PongGame.run$IF_END0)
// write label WHILE_EXP2
(PongGame.run$WHILE_EXP2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE15)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE15
D;JEQ
@SP
A=M-1
M=0
@CONTINUE15
0;JMP
(TRUE15)
@SP
A=M-1
M=-1
(CONTINUE15)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END2
@SP
AM=M-1
D=M
@PongGame.run$WHILE_END2

D;JNE
// call function Keyboard.keyPressed 0
@PongGame.run$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0;JMP
(PongGame.run$ret.27)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.move 1
@PongGame.run$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.move
0;JMP
(PongGame.run$ret.28)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function PongGame.moveBall 1
@PongGame.run$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@PongGame.moveBall
0;JMP
(PongGame.run$ret.29)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP2
@PongGame.run$WHILE_EXP2
0;JMP
// write label WHILE_END2
(PongGame.run$WHILE_END2)
// write goto WHILE_EXP0
@PongGame.run$WHILE_EXP0
0;JMP
// write label WHILE_END0
(PongGame.run$WHILE_END0)
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@PongGame.run$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@PongGame.run$IF_FALSE3
0;JMP
// write label IF_TRUE3
(PongGame.run$IF_TRUE3)
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 27
@27
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.moveCursor 2
@PongGame.run$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(PongGame.run$ret.30)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 9
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.new 1
@PongGame.run$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(PongGame.run$ret.31)
//push constant 71
@71
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.run$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.32)
//push constant 97
@97
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.run$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.33)
//push constant 109
@109
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.run$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.34)
//push constant 101
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.run$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.35)
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.run$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.36)
//push constant 79
@79
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.run$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.37)
//push constant 118
@118
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.run$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.38)
//push constant 101
@101
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.run$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.39)
//push constant 114
@114
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@PongGame.run$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(PongGame.run$ret.40)
// call function Output.printString 1
@PongGame.run$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(PongGame.run$ret.41)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE3
(PongGame.run$IF_FALSE3)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function PongGame.moveBall 5
(PongGame.moveBall)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.move 1
@PongGame.moveBall$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.move
0;JMP
(PongGame.moveBall$ret.42)
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE20
D;JGT
@y_NEGATIVE20
D;JLT
@NORMAL_CASE20
0;JMP
(y_POSITIVE20)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE20
D;JLT
@NORMAL_CASE20
0;JMP
(NEGATIVE_POSITIVE20)
@SP
M=M-1
A=M-1
M=0
@CONTINUE20
0;JMP
(y_NEGATIVE20)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE20
D;JGT
@NORMAL_CASE20
0;JMP
(POSITIVE_NEGATIVE20)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE20
0;JMP
(NORMAL_CASE20)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE20
D;JGT
@SP
A=M-1
M=0
@CONTINUE20
0;JMP
(TRUE20)
@SP
A=M-1
M=-1
(CONTINUE20)
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 5
@THIS
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE21)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE21
D;JEQ
@SP
A=M-1
M=0
@CONTINUE21
0;JMP
(TRUE21)
@SP
A=M-1
M=-1
(CONTINUE21)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@PongGame.moveBall$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@PongGame.moveBall$IF_FALSE0
0;JMP
// write label IF_TRUE0
(PongGame.moveBall$IF_TRUE0)
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 5
@THIS
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.getLeft 1
@PongGame.moveBall$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.getLeft
0;JMP
(PongGame.moveBall$ret.43)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.getRight 1
@PongGame.moveBall$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.getRight
0;JMP
(PongGame.moveBall$ret.44)
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.getLeft 1
@PongGame.moveBall$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.getLeft
0;JMP
(PongGame.moveBall$ret.45)
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.getRight 1
@PongGame.moveBall$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.getRight
0;JMP
(PongGame.moveBall$ret.46)
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE25)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE25
D;JEQ
@SP
A=M-1
M=0
@CONTINUE25
0;JMP
(TRUE25)
@SP
A=M-1
M=-1
(CONTINUE25)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@PongGame.moveBall$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@PongGame.moveBall$IF_FALSE1
0;JMP
// write label IF_TRUE1
(PongGame.moveBall$IF_TRUE1)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE26
D;JGT
@y_NEGATIVE26
D;JLT
@NORMAL_CASE26
0;JMP
(y_POSITIVE26)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE26
D;JLT
@NORMAL_CASE26
0;JMP
(NEGATIVE_POSITIVE26)
@SP
M=M-1
A=M-1
M=0
@CONTINUE26
0;JMP
(y_NEGATIVE26)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE26
D;JGT
@NORMAL_CASE26
0;JMP
(POSITIVE_NEGATIVE26)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE26
0;JMP
(NORMAL_CASE26)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE26
D;JGT
@SP
A=M-1
M=0
@CONTINUE26
0;JMP
(TRUE26)
@SP
A=M-1
M=-1
(CONTINUE26)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE27
D;JGT
@y_NEGATIVE27
D;JLT
@NORMAL_CASE27
0;JMP
(y_POSITIVE27)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE27
D;JLT
@NORMAL_CASE27
0;JMP
(NEGATIVE_POSITIVE27)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE27
0;JMP
(y_NEGATIVE27)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE27
D;JGT
@NORMAL_CASE27
0;JMP
(POSITIVE_NEGATIVE27)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE27
0;JMP
(NORMAL_CASE27)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE27
D;JLT
@SP
A=M-1
M=0
@CONTINUE27
0;JMP
(TRUE27)
@SP
A=M-1
M=-1
(CONTINUE27)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//pop this 3
@THIS
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 3
@THIS
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@PongGame.moveBall$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@PongGame.moveBall$IF_FALSE2
0;JMP
// write label IF_TRUE2
(PongGame.moveBall$IF_TRUE2)
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//lt
@SP
A=M-1
D=M

@y_POSITIVE33
D;JGT
@y_NEGATIVE33
D;JLT
@NORMAL_CASE33
0;JMP
(y_POSITIVE33)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE33
D;JLT
@NORMAL_CASE33
0;JMP
(NEGATIVE_POSITIVE33)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE33
0;JMP
(y_NEGATIVE33)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE33
D;JGT
@NORMAL_CASE33
0;JMP
(POSITIVE_NEGATIVE33)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE33
0;JMP
(NORMAL_CASE33)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE33
D;JLT
@SP
A=M-1
M=0
@CONTINUE33
0;JMP
(TRUE33)
@SP
A=M-1
M=-1
(CONTINUE33)
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@PongGame.moveBall$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@PongGame.moveBall$IF_FALSE3
0;JMP
// write label IF_TRUE3
(PongGame.moveBall$IF_TRUE3)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END3
@PongGame.moveBall$IF_END3
0;JMP
// write label IF_FALSE3
(PongGame.moveBall$IF_FALSE3)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//gt
@SP
A=M-1
D=M

@y_POSITIVE38
D;JGT
@y_NEGATIVE38
D;JLT
@NORMAL_CASE38
0;JMP
(y_POSITIVE38)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE38
D;JLT
@NORMAL_CASE38
0;JMP
(NEGATIVE_POSITIVE38)
@SP
M=M-1
A=M-1
M=0
@CONTINUE38
0;JMP
(y_NEGATIVE38)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE38
D;JGT
@NORMAL_CASE38
0;JMP
(POSITIVE_NEGATIVE38)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE38
0;JMP
(NORMAL_CASE38)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE38
D;JGT
@SP
A=M-1
M=0
@CONTINUE38
0;JMP
(TRUE38)
@SP
A=M-1
M=-1
(CONTINUE38)
// write if-goto IF_TRUE4
@SP
AM=M-1
D=M
@PongGame.moveBall$IF_TRUE4

D;JNE
// write goto IF_FALSE4
@PongGame.moveBall$IF_FALSE4
0;JMP
// write label IF_TRUE4
(PongGame.moveBall$IF_TRUE4)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE4
(PongGame.moveBall$IF_FALSE4)
// write label IF_END3
(PongGame.moveBall$IF_END3)
//push this 6
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 6
@THIS
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 6
@THIS
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Bat.setWidth 2
@PongGame.moveBall$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Bat.setWidth
0;JMP
(PongGame.moveBall$ret.47)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 4
@THIS
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 22
@22
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Output.moveCursor 2
@PongGame.moveBall$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0;JMP
(PongGame.moveBall$ret.48)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 4
@THIS
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Output.printInt 1
@PongGame.moveBall$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0;JMP
(PongGame.moveBall$ret.49)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(PongGame.moveBall$IF_FALSE2)
// write label IF_FALSE1
(PongGame.moveBall$IF_FALSE1)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Ball.bounce 2
@PongGame.moveBall$ret.50
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Ball.bounce
0;JMP
(PongGame.moveBall$ret.50)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(PongGame.moveBall$IF_FALSE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.init 1
(Screen.init)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 16384
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop static 1
@Screen.1
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop static 2
@Screen.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@Screen.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(Screen.init$ret.1)
//pop static 0
@Screen.0
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Screen.init$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE3
D;JGT
@y_NEGATIVE3
D;JLT
@NORMAL_CASE3
0;JMP
(y_POSITIVE3)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE3
D;JLT
@NORMAL_CASE3
0;JMP
(NEGATIVE_POSITIVE3)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE3
0;JMP
(y_NEGATIVE3)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE3
D;JGT
@NORMAL_CASE3
0;JMP
(POSITIVE_NEGATIVE3)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE3
0;JMP
(NORMAL_CASE3)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE3
D;JLT
@SP
A=M-1
M=0
@CONTINUE3
0;JMP
(TRUE3)
@SP
A=M-1
M=-1
(CONTINUE3)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.init$WHILE_END0

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Screen.init$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Screen.init$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.clearScreen 1
(Screen.clearScreen)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write label WHILE_EXP0
(Screen.clearScreen$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 8192
@8192
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE12
D;JGT
@y_NEGATIVE12
D;JLT
@NORMAL_CASE12
0;JMP
(y_POSITIVE12)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE12
D;JLT
@NORMAL_CASE12
0;JMP
(NEGATIVE_POSITIVE12)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE12
0;JMP
(y_NEGATIVE12)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE12
D;JGT
@NORMAL_CASE12
0;JMP
(POSITIVE_NEGATIVE12)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE12
0;JMP
(NORMAL_CASE12)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE12
D;JLT
@SP
A=M-1
M=0
@CONTINUE12
0;JMP
(TRUE12)
@SP
A=M-1
M=-1
(CONTINUE12)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.clearScreen$WHILE_END0

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Screen.clearScreen$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Screen.clearScreen$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.updateLocation 0
(Screen.updateLocation)
//push static 2
@Screen.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.updateLocation$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Screen.updateLocation$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Screen.updateLocation$IF_TRUE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Screen.updateLocation$IF_END0
0;JMP
// write label IF_FALSE0
(Screen.updateLocation$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 1
@Screen.1
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END0
(Screen.updateLocation$IF_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.setColor 0
(Screen.setColor)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop static 2
@Screen.2
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.drawPixel 3
(Screen.drawPixel)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE23
D;JGT
@y_NEGATIVE23
D;JLT
@NORMAL_CASE23
0;JMP
(y_POSITIVE23)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE23
D;JLT
@NORMAL_CASE23
0;JMP
(NEGATIVE_POSITIVE23)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE23
0;JMP
(y_NEGATIVE23)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE23
D;JGT
@NORMAL_CASE23
0;JMP
(POSITIVE_NEGATIVE23)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE23
0;JMP
(NORMAL_CASE23)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE23
D;JLT
@SP
A=M-1
M=0
@CONTINUE23
0;JMP
(TRUE23)
@SP
A=M-1
M=-1
(CONTINUE23)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE24
D;JGT
@y_NEGATIVE24
D;JLT
@NORMAL_CASE24
0;JMP
(y_POSITIVE24)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE24
D;JLT
@NORMAL_CASE24
0;JMP
(NEGATIVE_POSITIVE24)
@SP
M=M-1
A=M-1
M=0
@CONTINUE24
0;JMP
(y_NEGATIVE24)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE24
D;JGT
@NORMAL_CASE24
0;JMP
(POSITIVE_NEGATIVE24)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE24
0;JMP
(NORMAL_CASE24)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE24
D;JGT
@SP
A=M-1
M=0
@CONTINUE24
0;JMP
(TRUE24)
@SP
A=M-1
M=-1
(CONTINUE24)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE26
D;JGT
@y_NEGATIVE26
D;JLT
@NORMAL_CASE26
0;JMP
(y_POSITIVE26)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE26
D;JLT
@NORMAL_CASE26
0;JMP
(NEGATIVE_POSITIVE26)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE26
0;JMP
(y_NEGATIVE26)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE26
D;JGT
@NORMAL_CASE26
0;JMP
(POSITIVE_NEGATIVE26)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE26
0;JMP
(NORMAL_CASE26)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE26
D;JLT
@SP
A=M-1
M=0
@CONTINUE26
0;JMP
(TRUE26)
@SP
A=M-1
M=-1
(CONTINUE26)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 255
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE28
D;JGT
@y_NEGATIVE28
D;JLT
@NORMAL_CASE28
0;JMP
(y_POSITIVE28)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE28
D;JLT
@NORMAL_CASE28
0;JMP
(NEGATIVE_POSITIVE28)
@SP
M=M-1
A=M-1
M=0
@CONTINUE28
0;JMP
(y_NEGATIVE28)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE28
D;JGT
@NORMAL_CASE28
0;JMP
(POSITIVE_NEGATIVE28)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE28
0;JMP
(NORMAL_CASE28)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE28
D;JGT
@SP
A=M-1
M=0
@CONTINUE28
0;JMP
(TRUE28)
@SP
A=M-1
M=-1
(CONTINUE28)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawPixel$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Screen.drawPixel$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Screen.drawPixel$IF_TRUE0)
//push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Screen.drawPixel$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawPixel$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Screen.drawPixel$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Screen.drawPixel$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawPixel$ret.3)
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawPixel$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawPixel$ret.4)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawPixel$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawPixel$ret.5)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.updateLocation 2
@Screen.drawPixel$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawPixel$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.drawConditional 0
(Screen.drawConditional)
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawConditional$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Screen.drawConditional$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Screen.drawConditional$IF_TRUE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.drawPixel 2
@Screen.drawConditional$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Screen.drawConditional$ret.7)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END0
@Screen.drawConditional$IF_END0
0;JMP
// write label IF_FALSE0
(Screen.drawConditional$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.drawPixel 2
@Screen.drawConditional$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0;JMP
(Screen.drawConditional$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END0
(Screen.drawConditional$IF_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.drawLine 11
(Screen.drawLine)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE33
D;JGT
@y_NEGATIVE33
D;JLT
@NORMAL_CASE33
0;JMP
(y_POSITIVE33)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE33
D;JLT
@NORMAL_CASE33
0;JMP
(NEGATIVE_POSITIVE33)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE33
0;JMP
(y_NEGATIVE33)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE33
D;JGT
@NORMAL_CASE33
0;JMP
(POSITIVE_NEGATIVE33)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE33
0;JMP
(NORMAL_CASE33)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE33
D;JLT
@SP
A=M-1
M=0
@CONTINUE33
0;JMP
(TRUE33)
@SP
A=M-1
M=-1
(CONTINUE33)
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE34
D;JGT
@y_NEGATIVE34
D;JLT
@NORMAL_CASE34
0;JMP
(y_POSITIVE34)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE34
D;JLT
@NORMAL_CASE34
0;JMP
(NEGATIVE_POSITIVE34)
@SP
M=M-1
A=M-1
M=0
@CONTINUE34
0;JMP
(y_NEGATIVE34)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE34
D;JGT
@NORMAL_CASE34
0;JMP
(POSITIVE_NEGATIVE34)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE34
0;JMP
(NORMAL_CASE34)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE34
D;JGT
@SP
A=M-1
M=0
@CONTINUE34
0;JMP
(TRUE34)
@SP
A=M-1
M=-1
(CONTINUE34)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE36
D;JGT
@y_NEGATIVE36
D;JLT
@NORMAL_CASE36
0;JMP
(y_POSITIVE36)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE36
D;JLT
@NORMAL_CASE36
0;JMP
(NEGATIVE_POSITIVE36)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE36
0;JMP
(y_NEGATIVE36)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE36
D;JGT
@NORMAL_CASE36
0;JMP
(POSITIVE_NEGATIVE36)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE36
0;JMP
(NORMAL_CASE36)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE36
D;JLT
@SP
A=M-1
M=0
@CONTINUE36
0;JMP
(TRUE36)
@SP
A=M-1
M=-1
(CONTINUE36)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 255
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE38
D;JGT
@y_NEGATIVE38
D;JLT
@NORMAL_CASE38
0;JMP
(y_POSITIVE38)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE38
D;JLT
@NORMAL_CASE38
0;JMP
(NEGATIVE_POSITIVE38)
@SP
M=M-1
A=M-1
M=0
@CONTINUE38
0;JMP
(y_NEGATIVE38)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE38
D;JGT
@NORMAL_CASE38
0;JMP
(POSITIVE_NEGATIVE38)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE38
0;JMP
(NORMAL_CASE38)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE38
D;JGT
@SP
A=M-1
M=0
@CONTINUE38
0;JMP
(TRUE38)
@SP
A=M-1
M=-1
(CONTINUE38)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Screen.drawLine$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Screen.drawLine$IF_TRUE0)
//push constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Screen.drawLine$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawLine$ret.9)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Screen.drawLine$IF_FALSE0)
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call function Math.abs 1
@Screen.drawLine$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Screen.drawLine$ret.10)
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call function Math.abs 1
@Screen.drawLine$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0;JMP
(Screen.drawLine$ret.11)
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE42
D;JGT
@y_NEGATIVE42
D;JLT
@NORMAL_CASE42
0;JMP
(y_POSITIVE42)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE42
D;JLT
@NORMAL_CASE42
0;JMP
(NEGATIVE_POSITIVE42)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE42
0;JMP
(y_NEGATIVE42)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE42
D;JGT
@NORMAL_CASE42
0;JMP
(POSITIVE_NEGATIVE42)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE42
0;JMP
(NORMAL_CASE42)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE42
D;JLT
@SP
A=M-1
M=0
@CONTINUE42
0;JMP
(TRUE42)
@SP
A=M-1
M=-1
(CONTINUE42)
//pop local 6
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE43
D;JGT
@y_NEGATIVE43
D;JLT
@NORMAL_CASE43
0;JMP
(y_POSITIVE43)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE43
D;JLT
@NORMAL_CASE43
0;JMP
(NEGATIVE_POSITIVE43)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE43
0;JMP
(y_NEGATIVE43)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE43
D;JGT
@NORMAL_CASE43
0;JMP
(POSITIVE_NEGATIVE43)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE43
0;JMP
(NORMAL_CASE43)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE43
D;JLT
@SP
A=M-1
M=0
@CONTINUE43
0;JMP
(TRUE43)
@SP
A=M-1
M=-1
(CONTINUE43)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE46
D;JGT
@y_NEGATIVE46
D;JLT
@NORMAL_CASE46
0;JMP
(y_POSITIVE46)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE46
D;JLT
@NORMAL_CASE46
0;JMP
(NEGATIVE_POSITIVE46)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE46
0;JMP
(y_NEGATIVE46)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE46
D;JGT
@NORMAL_CASE46
0;JMP
(POSITIVE_NEGATIVE46)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE46
0;JMP
(NORMAL_CASE46)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE46
D;JLT
@SP
A=M-1
M=0
@CONTINUE46
0;JMP
(TRUE46)
@SP
A=M-1
M=-1
(CONTINUE46)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Screen.drawLine$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Screen.drawLine$IF_TRUE1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 2
@ARG
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 3
@ARG
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(Screen.drawLine$IF_FALSE1)
//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Screen.drawLine$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Screen.drawLine$IF_TRUE2)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE49
D;JGT
@y_NEGATIVE49
D;JLT
@NORMAL_CASE49
0;JMP
(y_POSITIVE49)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE49
D;JLT
@NORMAL_CASE49
0;JMP
(NEGATIVE_POSITIVE49)
@SP
M=M-1
A=M-1
M=0
@CONTINUE49
0;JMP
(y_NEGATIVE49)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE49
D;JGT
@NORMAL_CASE49
0;JMP
(POSITIVE_NEGATIVE49)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE49
0;JMP
(NORMAL_CASE49)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE49
D;JGT
@SP
A=M-1
M=0
@CONTINUE49
0;JMP
(TRUE49)
@SP
A=M-1
M=-1
(CONTINUE49)
//pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END2
@Screen.drawLine$IF_END2
0;JMP
// write label IF_FALSE2
(Screen.drawLine$IF_FALSE2)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE50
D;JGT
@y_NEGATIVE50
D;JLT
@NORMAL_CASE50
0;JMP
(y_POSITIVE50)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE50
D;JLT
@NORMAL_CASE50
0;JMP
(NEGATIVE_POSITIVE50)
@SP
M=M-1
A=M-1
M=0
@CONTINUE50
0;JMP
(y_NEGATIVE50)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE50
D;JGT
@NORMAL_CASE50
0;JMP
(POSITIVE_NEGATIVE50)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE50
0;JMP
(NORMAL_CASE50)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE50
D;JGT
@SP
A=M-1
M=0
@CONTINUE50
0;JMP
(TRUE50)
@SP
A=M-1
M=-1
(CONTINUE50)
//pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END2
(Screen.drawLine$IF_END2)
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawLine$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine$ret.12)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawLine$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine$ret.13)
//pop local 9
@LCL
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call function Math.multiply 2
@Screen.drawLine$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawLine$ret.14)
//pop local 10
@LCL
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.drawConditional 3
@Screen.drawLine$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0;JMP
(Screen.drawLine$ret.15)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Screen.drawLine$WHILE_EXP0)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE53
D;JGT
@y_NEGATIVE53
D;JLT
@NORMAL_CASE53
0;JMP
(y_POSITIVE53)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE53
D;JLT
@NORMAL_CASE53
0;JMP
(NEGATIVE_POSITIVE53)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE53
0;JMP
(y_NEGATIVE53)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE53
D;JGT
@NORMAL_CASE53
0;JMP
(POSITIVE_NEGATIVE53)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE53
0;JMP
(NORMAL_CASE53)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE53
D;JLT
@SP
A=M-1
M=0
@CONTINUE53
0;JMP
(TRUE53)
@SP
A=M-1
M=-1
(CONTINUE53)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.drawLine$WHILE_END0

D;JNE
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE55
D;JGT
@y_NEGATIVE55
D;JLT
@NORMAL_CASE55
0;JMP
(y_POSITIVE55)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE55
D;JLT
@NORMAL_CASE55
0;JMP
(NEGATIVE_POSITIVE55)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE55
0;JMP
(y_NEGATIVE55)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE55
D;JGT
@NORMAL_CASE55
0;JMP
(POSITIVE_NEGATIVE55)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE55
0;JMP
(NORMAL_CASE55)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE55
D;JLT
@SP
A=M-1
M=0
@CONTINUE55
0;JMP
(TRUE55)
@SP
A=M-1
M=-1
(CONTINUE55)
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@Screen.drawLine$IF_FALSE3
0;JMP
// write label IF_TRUE3
(Screen.drawLine$IF_TRUE3)
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 9
@LCL
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END3
@Screen.drawLine$IF_END3
0;JMP
// write label IF_FALSE3
(Screen.drawLine$IF_FALSE3)
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 10
@LCL
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE4
@SP
AM=M-1
D=M
@Screen.drawLine$IF_TRUE4

D;JNE
// write goto IF_FALSE4
@Screen.drawLine$IF_FALSE4
0;JMP
// write label IF_TRUE4
(Screen.drawLine$IF_TRUE4)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END4
@Screen.drawLine$IF_END4
0;JMP
// write label IF_FALSE4
(Screen.drawLine$IF_FALSE4)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END4
(Screen.drawLine$IF_END4)
// write label IF_END3
(Screen.drawLine$IF_END3)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.drawConditional 3
@Screen.drawLine$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0;JMP
(Screen.drawLine$ret.16)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Screen.drawLine$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Screen.drawLine$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.drawRectangle 9
(Screen.drawRectangle)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE61
D;JGT
@y_NEGATIVE61
D;JLT
@NORMAL_CASE61
0;JMP
(y_POSITIVE61)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE61
D;JLT
@NORMAL_CASE61
0;JMP
(NEGATIVE_POSITIVE61)
@SP
M=M-1
A=M-1
M=0
@CONTINUE61
0;JMP
(y_NEGATIVE61)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE61
D;JGT
@NORMAL_CASE61
0;JMP
(POSITIVE_NEGATIVE61)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE61
0;JMP
(NORMAL_CASE61)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE61
D;JGT
@SP
A=M-1
M=0
@CONTINUE61
0;JMP
(TRUE61)
@SP
A=M-1
M=-1
(CONTINUE61)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE62
D;JGT
@y_NEGATIVE62
D;JLT
@NORMAL_CASE62
0;JMP
(y_POSITIVE62)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE62
D;JLT
@NORMAL_CASE62
0;JMP
(NEGATIVE_POSITIVE62)
@SP
M=M-1
A=M-1
M=0
@CONTINUE62
0;JMP
(y_NEGATIVE62)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE62
D;JGT
@NORMAL_CASE62
0;JMP
(POSITIVE_NEGATIVE62)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE62
0;JMP
(NORMAL_CASE62)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE62
D;JGT
@SP
A=M-1
M=0
@CONTINUE62
0;JMP
(TRUE62)
@SP
A=M-1
M=-1
(CONTINUE62)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE64
D;JGT
@y_NEGATIVE64
D;JLT
@NORMAL_CASE64
0;JMP
(y_POSITIVE64)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE64
D;JLT
@NORMAL_CASE64
0;JMP
(NEGATIVE_POSITIVE64)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE64
0;JMP
(y_NEGATIVE64)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE64
D;JGT
@NORMAL_CASE64
0;JMP
(POSITIVE_NEGATIVE64)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE64
0;JMP
(NORMAL_CASE64)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE64
D;JLT
@SP
A=M-1
M=0
@CONTINUE64
0;JMP
(TRUE64)
@SP
A=M-1
M=-1
(CONTINUE64)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE66
D;JGT
@y_NEGATIVE66
D;JLT
@NORMAL_CASE66
0;JMP
(y_POSITIVE66)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE66
D;JLT
@NORMAL_CASE66
0;JMP
(NEGATIVE_POSITIVE66)
@SP
M=M-1
A=M-1
M=0
@CONTINUE66
0;JMP
(y_NEGATIVE66)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE66
D;JGT
@NORMAL_CASE66
0;JMP
(POSITIVE_NEGATIVE66)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE66
0;JMP
(NORMAL_CASE66)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE66
D;JGT
@SP
A=M-1
M=0
@CONTINUE66
0;JMP
(TRUE66)
@SP
A=M-1
M=-1
(CONTINUE66)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE68
D;JGT
@y_NEGATIVE68
D;JLT
@NORMAL_CASE68
0;JMP
(y_POSITIVE68)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE68
D;JLT
@NORMAL_CASE68
0;JMP
(NEGATIVE_POSITIVE68)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE68
0;JMP
(y_NEGATIVE68)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE68
D;JGT
@NORMAL_CASE68
0;JMP
(POSITIVE_NEGATIVE68)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE68
0;JMP
(NORMAL_CASE68)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE68
D;JLT
@SP
A=M-1
M=0
@CONTINUE68
0;JMP
(TRUE68)
@SP
A=M-1
M=-1
(CONTINUE68)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 255
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE70
D;JGT
@y_NEGATIVE70
D;JLT
@NORMAL_CASE70
0;JMP
(y_POSITIVE70)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE70
D;JLT
@NORMAL_CASE70
0;JMP
(NEGATIVE_POSITIVE70)
@SP
M=M-1
A=M-1
M=0
@CONTINUE70
0;JMP
(y_NEGATIVE70)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE70
D;JGT
@NORMAL_CASE70
0;JMP
(POSITIVE_NEGATIVE70)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE70
0;JMP
(NORMAL_CASE70)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE70
D;JGT
@SP
A=M-1
M=0
@CONTINUE70
0;JMP
(TRUE70)
@SP
A=M-1
M=-1
(CONTINUE70)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawRectangle$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Screen.drawRectangle$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Screen.drawRectangle$IF_TRUE0)
//push constant 9
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Screen.drawRectangle$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawRectangle$ret.17)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Screen.drawRectangle$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Screen.drawRectangle$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawRectangle$ret.18)
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawRectangle$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle$ret.19)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Screen.drawRectangle$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawRectangle$ret.20)
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawRectangle$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle$ret.21)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop local 6
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawRectangle$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawRectangle$ret.22)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Screen.drawRectangle$WHILE_EXP0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE82
D;JGT
@y_NEGATIVE82
D;JLT
@NORMAL_CASE82
0;JMP
(y_POSITIVE82)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE82
D;JLT
@NORMAL_CASE82
0;JMP
(NEGATIVE_POSITIVE82)
@SP
M=M-1
A=M-1
M=0
@CONTINUE82
0;JMP
(y_NEGATIVE82)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE82
D;JGT
@NORMAL_CASE82
0;JMP
(POSITIVE_NEGATIVE82)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE82
0;JMP
(NORMAL_CASE82)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE82
D;JGT
@SP
A=M-1
M=0
@CONTINUE82
0;JMP
(TRUE82)
@SP
A=M-1
M=-1
(CONTINUE82)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.drawRectangle$WHILE_END0

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE86)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE86
D;JEQ
@SP
A=M-1
M=0
@CONTINUE86
0;JMP
(TRUE86)
@SP
A=M-1
M=-1
(CONTINUE86)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Screen.drawRectangle$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Screen.drawRectangle$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Screen.drawRectangle$IF_TRUE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

// call function Screen.updateLocation 2
@Screen.drawRectangle$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.23)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END1
@Screen.drawRectangle$IF_END1
0;JMP
// write label IF_FALSE1
(Screen.drawRectangle$IF_FALSE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.updateLocation 2
@Screen.drawRectangle$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.24)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP1
(Screen.drawRectangle$WHILE_EXP1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE89
D;JGT
@y_NEGATIVE89
D;JLT
@NORMAL_CASE89
0;JMP
(y_POSITIVE89)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE89
D;JLT
@NORMAL_CASE89
0;JMP
(NEGATIVE_POSITIVE89)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE89
0;JMP
(y_NEGATIVE89)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE89
D;JGT
@NORMAL_CASE89
0;JMP
(POSITIVE_NEGATIVE89)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE89
0;JMP
(NORMAL_CASE89)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE89
D;JLT
@SP
A=M-1
M=0
@CONTINUE89
0;JMP
(TRUE89)
@SP
A=M-1
M=-1
(CONTINUE89)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END1
@SP
AM=M-1
D=M
@Screen.drawRectangle$WHILE_END1

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
// call function Screen.updateLocation 2
@Screen.drawRectangle$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.25)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP1
@Screen.drawRectangle$WHILE_EXP1
0;JMP
// write label WHILE_END1
(Screen.drawRectangle$WHILE_END1)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.updateLocation 2
@Screen.drawRectangle$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawRectangle$ret.26)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END1
(Screen.drawRectangle$IF_END1)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Screen.drawRectangle$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Screen.drawRectangle$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.drawHorizontal 11
(Screen.drawHorizontal)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.min 2
@Screen.drawHorizontal$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.min
0;JMP
(Screen.drawHorizontal$ret.27)
//pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.max 2
@Screen.drawHorizontal$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.max
0;JMP
(Screen.drawHorizontal$ret.28)
//pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//gt
@SP
A=M-1
D=M

@y_POSITIVE97
D;JGT
@y_NEGATIVE97
D;JLT
@NORMAL_CASE97
0;JMP
(y_POSITIVE97)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE97
D;JLT
@NORMAL_CASE97
0;JMP
(NEGATIVE_POSITIVE97)
@SP
M=M-1
A=M-1
M=0
@CONTINUE97
0;JMP
(y_NEGATIVE97)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE97
D;JGT
@NORMAL_CASE97
0;JMP
(POSITIVE_NEGATIVE97)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE97
0;JMP
(NORMAL_CASE97)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE97
D;JGT
@SP
A=M-1
M=0
@CONTINUE97
0;JMP
(TRUE97)
@SP
A=M-1
M=-1
(CONTINUE97)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 256
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE98
D;JGT
@y_NEGATIVE98
D;JLT
@NORMAL_CASE98
0;JMP
(y_POSITIVE98)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE98
D;JLT
@NORMAL_CASE98
0;JMP
(NEGATIVE_POSITIVE98)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE98
0;JMP
(y_NEGATIVE98)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE98
D;JGT
@NORMAL_CASE98
0;JMP
(POSITIVE_NEGATIVE98)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE98
0;JMP
(NORMAL_CASE98)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE98
D;JLT
@SP
A=M-1
M=0
@CONTINUE98
0;JMP
(TRUE98)
@SP
A=M-1
M=-1
(CONTINUE98)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 512
@512
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE100
D;JGT
@y_NEGATIVE100
D;JLT
@NORMAL_CASE100
0;JMP
(y_POSITIVE100)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE100
D;JLT
@NORMAL_CASE100
0;JMP
(NEGATIVE_POSITIVE100)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE100
0;JMP
(y_NEGATIVE100)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE100
D;JGT
@NORMAL_CASE100
0;JMP
(POSITIVE_NEGATIVE100)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE100
0;JMP
(NORMAL_CASE100)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE100
D;JLT
@SP
A=M-1
M=0
@CONTINUE100
0;JMP
(TRUE100)
@SP
A=M-1
M=-1
(CONTINUE100)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//gt
@SP
A=M-1
D=M

@y_POSITIVE103
D;JGT
@y_NEGATIVE103
D;JLT
@NORMAL_CASE103
0;JMP
(y_POSITIVE103)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE103
D;JLT
@NORMAL_CASE103
0;JMP
(NEGATIVE_POSITIVE103)
@SP
M=M-1
A=M-1
M=0
@CONTINUE103
0;JMP
(y_NEGATIVE103)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE103
D;JGT
@NORMAL_CASE103
0;JMP
(POSITIVE_NEGATIVE103)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE103
0;JMP
(NORMAL_CASE103)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE103
D;JGT
@SP
A=M-1
M=0
@CONTINUE103
0;JMP
(TRUE103)
@SP
A=M-1
M=-1
(CONTINUE103)
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawHorizontal$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Screen.drawHorizontal$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Screen.drawHorizontal$IF_TRUE0)
//push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.max 2
@Screen.drawHorizontal$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.max
0;JMP
(Screen.drawHorizontal$ret.29)
//pop local 7
@LCL
D=M
@7
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.min 2
@Screen.drawHorizontal$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.min
0;JMP
(Screen.drawHorizontal$ret.30)
//pop local 8
@LCL
D=M
@8
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Screen.drawHorizontal$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawHorizontal$ret.31)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 7
@LCL
D=M
@7
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawHorizontal$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal$ret.32)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 9
@LCL
D=M
@9
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@Screen.drawHorizontal$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(Screen.drawHorizontal$ret.33)
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 8
@LCL
D=M
@8
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawHorizontal$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal$ret.34)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 10
@LCL
D=M
@10
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 9
@LCL
D=M
@9
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop local 5
@LCL
D=M
@5
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 10
@LCL
D=M
@10
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push static 0
@Screen.0
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawHorizontal$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawHorizontal$ret.35)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 6
@LCL
D=M
@6
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 6
@LCL
D=M
@6
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE116)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE116
D;JEQ
@SP
A=M-1
M=0
@CONTINUE116
0;JMP
(TRUE116)
@SP
A=M-1
M=-1
(CONTINUE116)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Screen.drawHorizontal$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Screen.drawHorizontal$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Screen.drawHorizontal$IF_TRUE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

// call function Screen.updateLocation 2
@Screen.drawHorizontal$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.36)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END1
@Screen.drawHorizontal$IF_END1
0;JMP
// write label IF_FALSE1
(Screen.drawHorizontal$IF_FALSE1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 5
@LCL
D=M
@5
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.updateLocation 2
@Screen.drawHorizontal$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.37)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Screen.drawHorizontal$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE119
D;JGT
@y_NEGATIVE119
D;JLT
@NORMAL_CASE119
0;JMP
(y_POSITIVE119)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE119
D;JLT
@NORMAL_CASE119
0;JMP
(NEGATIVE_POSITIVE119)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE119
0;JMP
(y_NEGATIVE119)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE119
D;JGT
@NORMAL_CASE119
0;JMP
(POSITIVE_NEGATIVE119)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE119
0;JMP
(NORMAL_CASE119)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE119
D;JLT
@SP
A=M-1
M=0
@CONTINUE119
0;JMP
(TRUE119)
@SP
A=M-1
M=-1
(CONTINUE119)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.drawHorizontal$WHILE_END0

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
// call function Screen.updateLocation 2
@Screen.drawHorizontal$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.38)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Screen.drawHorizontal$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Screen.drawHorizontal$WHILE_END0)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.updateLocation 2
@Screen.drawHorizontal$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0;JMP
(Screen.drawHorizontal$ret.39)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END1
(Screen.drawHorizontal$IF_END1)
// write label IF_FALSE0
(Screen.drawHorizontal$IF_FALSE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.drawSymetric 0
(Screen.drawSymetric)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call function Screen.drawHorizontal 3
@Screen.drawSymetric$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.40)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call function Screen.drawHorizontal 3
@Screen.drawSymetric$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.41)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Screen.drawHorizontal 3
@Screen.drawSymetric$ret.42
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.42)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 3
@ARG
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call function Screen.drawHorizontal 3
@Screen.drawSymetric$ret.43
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@8
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0;JMP
(Screen.drawSymetric$ret.43)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Screen.drawCircle 3
(Screen.drawCircle)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE135
D;JGT
@y_NEGATIVE135
D;JLT
@NORMAL_CASE135
0;JMP
(y_POSITIVE135)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE135
D;JLT
@NORMAL_CASE135
0;JMP
(NEGATIVE_POSITIVE135)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE135
0;JMP
(y_NEGATIVE135)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE135
D;JGT
@NORMAL_CASE135
0;JMP
(POSITIVE_NEGATIVE135)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE135
0;JMP
(NORMAL_CASE135)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE135
D;JLT
@SP
A=M-1
M=0
@CONTINUE135
0;JMP
(TRUE135)
@SP
A=M-1
M=-1
(CONTINUE135)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE136
D;JGT
@y_NEGATIVE136
D;JLT
@NORMAL_CASE136
0;JMP
(y_POSITIVE136)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE136
D;JLT
@NORMAL_CASE136
0;JMP
(NEGATIVE_POSITIVE136)
@SP
M=M-1
A=M-1
M=0
@CONTINUE136
0;JMP
(y_NEGATIVE136)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE136
D;JGT
@NORMAL_CASE136
0;JMP
(POSITIVE_NEGATIVE136)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE136
0;JMP
(NORMAL_CASE136)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE136
D;JGT
@SP
A=M-1
M=0
@CONTINUE136
0;JMP
(TRUE136)
@SP
A=M-1
M=-1
(CONTINUE136)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE138
D;JGT
@y_NEGATIVE138
D;JLT
@NORMAL_CASE138
0;JMP
(y_POSITIVE138)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE138
D;JLT
@NORMAL_CASE138
0;JMP
(NEGATIVE_POSITIVE138)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE138
0;JMP
(y_NEGATIVE138)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE138
D;JGT
@NORMAL_CASE138
0;JMP
(POSITIVE_NEGATIVE138)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE138
0;JMP
(NORMAL_CASE138)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE138
D;JLT
@SP
A=M-1
M=0
@CONTINUE138
0;JMP
(TRUE138)
@SP
A=M-1
M=-1
(CONTINUE138)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 255
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE140
D;JGT
@y_NEGATIVE140
D;JLT
@NORMAL_CASE140
0;JMP
(y_POSITIVE140)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE140
D;JLT
@NORMAL_CASE140
0;JMP
(NEGATIVE_POSITIVE140)
@SP
M=M-1
A=M-1
M=0
@CONTINUE140
0;JMP
(y_NEGATIVE140)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE140
D;JGT
@NORMAL_CASE140
0;JMP
(POSITIVE_NEGATIVE140)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE140
0;JMP
(NORMAL_CASE140)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE140
D;JGT
@SP
A=M-1
M=0
@CONTINUE140
0;JMP
(TRUE140)
@SP
A=M-1
M=-1
(CONTINUE140)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Screen.drawCircle$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Screen.drawCircle$IF_TRUE0)
//push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Screen.drawCircle$ret.44
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawCircle$ret.44)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Screen.drawCircle$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE143
D;JGT
@y_NEGATIVE143
D;JLT
@NORMAL_CASE143
0;JMP
(y_POSITIVE143)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE143
D;JLT
@NORMAL_CASE143
0;JMP
(NEGATIVE_POSITIVE143)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE143
0;JMP
(y_NEGATIVE143)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE143
D;JGT
@NORMAL_CASE143
0;JMP
(POSITIVE_NEGATIVE143)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE143
0;JMP
(NORMAL_CASE143)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE143
D;JLT
@SP
A=M-1
M=0
@CONTINUE143
0;JMP
(TRUE143)
@SP
A=M-1
M=-1
(CONTINUE143)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 511
@511
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE145
D;JGT
@y_NEGATIVE145
D;JLT
@NORMAL_CASE145
0;JMP
(y_POSITIVE145)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE145
D;JLT
@NORMAL_CASE145
0;JMP
(NEGATIVE_POSITIVE145)
@SP
M=M-1
A=M-1
M=0
@CONTINUE145
0;JMP
(y_NEGATIVE145)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE145
D;JGT
@NORMAL_CASE145
0;JMP
(POSITIVE_NEGATIVE145)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE145
0;JMP
(NORMAL_CASE145)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE145
D;JGT
@SP
A=M-1
M=0
@CONTINUE145
0;JMP
(TRUE145)
@SP
A=M-1
M=-1
(CONTINUE145)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE148
D;JGT
@y_NEGATIVE148
D;JLT
@NORMAL_CASE148
0;JMP
(y_POSITIVE148)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE148
D;JLT
@NORMAL_CASE148
0;JMP
(NEGATIVE_POSITIVE148)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE148
0;JMP
(y_NEGATIVE148)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE148
D;JGT
@NORMAL_CASE148
0;JMP
(POSITIVE_NEGATIVE148)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE148
0;JMP
(NORMAL_CASE148)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE148
D;JLT
@SP
A=M-1
M=0
@CONTINUE148
0;JMP
(TRUE148)
@SP
A=M-1
M=-1
(CONTINUE148)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 255
@255
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE151
D;JGT
@y_NEGATIVE151
D;JLT
@NORMAL_CASE151
0;JMP
(y_POSITIVE151)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE151
D;JLT
@NORMAL_CASE151
0;JMP
(NEGATIVE_POSITIVE151)
@SP
M=M-1
A=M-1
M=0
@CONTINUE151
0;JMP
(y_NEGATIVE151)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE151
D;JGT
@NORMAL_CASE151
0;JMP
(POSITIVE_NEGATIVE151)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE151
0;JMP
(NORMAL_CASE151)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE151
D;JGT
@SP
A=M-1
M=0
@CONTINUE151
0;JMP
(TRUE151)
@SP
A=M-1
M=-1
(CONTINUE151)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@Screen.drawCircle$IF_FALSE1
0;JMP
// write label IF_TRUE1
(Screen.drawCircle$IF_TRUE1)
//push constant 13
@13
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Screen.drawCircle$ret.45
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Screen.drawCircle$ret.45)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(Screen.drawCircle$IF_FALSE1)
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.drawSymetric 4
@Screen.drawCircle$ret.46
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0;JMP
(Screen.drawCircle$ret.46)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(Screen.drawCircle$WHILE_EXP0)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE154
D;JGT
@y_NEGATIVE154
D;JLT
@NORMAL_CASE154
0;JMP
(y_POSITIVE154)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE154
D;JLT
@NORMAL_CASE154
0;JMP
(NEGATIVE_POSITIVE154)
@SP
M=M-1
A=M-1
M=0
@CONTINUE154
0;JMP
(y_NEGATIVE154)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE154
D;JGT
@NORMAL_CASE154
0;JMP
(POSITIVE_NEGATIVE154)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE154
0;JMP
(NORMAL_CASE154)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE154
D;JGT
@SP
A=M-1
M=0
@CONTINUE154
0;JMP
(TRUE154)
@SP
A=M-1
M=-1
(CONTINUE154)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Screen.drawCircle$WHILE_END0

D;JNE
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE156
D;JGT
@y_NEGATIVE156
D;JLT
@NORMAL_CASE156
0;JMP
(y_POSITIVE156)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE156
D;JLT
@NORMAL_CASE156
0;JMP
(NEGATIVE_POSITIVE156)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE156
0;JMP
(y_NEGATIVE156)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE156
D;JGT
@NORMAL_CASE156
0;JMP
(POSITIVE_NEGATIVE156)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE156
0;JMP
(NORMAL_CASE156)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE156
D;JLT
@SP
A=M-1
M=0
@CONTINUE156
0;JMP
(TRUE156)
@SP
A=M-1
M=-1
(CONTINUE156)
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@Screen.drawCircle$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@Screen.drawCircle$IF_FALSE2
0;JMP
// write label IF_TRUE2
(Screen.drawCircle$IF_TRUE2)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@Screen.drawCircle$ret.47
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawCircle$ret.47)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END2
@Screen.drawCircle$IF_END2
0;JMP
// write label IF_FALSE2
(Screen.drawCircle$IF_FALSE2)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call function Math.multiply 2
@Screen.drawCircle$ret.48
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(Screen.drawCircle$ret.48)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_END2
(Screen.drawCircle$IF_END2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Screen.drawSymetric 4
@Screen.drawCircle$ret.49
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@9
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0;JMP
(Screen.drawCircle$ret.49)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Screen.drawCircle$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Screen.drawCircle$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.new 0
(String.new)
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.alloc 1
@String.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0;JMP
(String.new$ret.1)
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE1
D;JGT
@y_NEGATIVE1
D;JLT
@NORMAL_CASE1
0;JMP
(y_POSITIVE1)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE1
D;JLT
@NORMAL_CASE1
0;JMP
(NEGATIVE_POSITIVE1)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE1
0;JMP
(y_NEGATIVE1)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE1
D;JGT
@NORMAL_CASE1
0;JMP
(POSITIVE_NEGATIVE1)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE1
0;JMP
(NORMAL_CASE1)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE1
D;JLT
@SP
A=M-1
M=0
@CONTINUE1
0;JMP
(TRUE1)
@SP
A=M-1
M=-1
(CONTINUE1)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.new$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@String.new$IF_FALSE0
0;JMP
// write label IF_TRUE0
(String.new$IF_TRUE0)
//push constant 14
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@String.new$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.new$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(String.new$IF_FALSE0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE2
D;JGT
@y_NEGATIVE2
D;JLT
@NORMAL_CASE2
0;JMP
(y_POSITIVE2)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE2
D;JLT
@NORMAL_CASE2
0;JMP
(NEGATIVE_POSITIVE2)
@SP
M=M-1
A=M-1
M=0
@CONTINUE2
0;JMP
(y_NEGATIVE2)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE2
D;JGT
@NORMAL_CASE2
0;JMP
(POSITIVE_NEGATIVE2)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE2
0;JMP
(NORMAL_CASE2)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE2
D;JGT
@SP
A=M-1
M=0
@CONTINUE2
0;JMP
(TRUE2)
@SP
A=M-1
M=-1
(CONTINUE2)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@String.new$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@String.new$IF_FALSE1
0;JMP
// write label IF_TRUE1
(String.new$IF_TRUE1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@String.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(String.new$ret.3)
//pop this 1
@THIS
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(String.new$IF_FALSE1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop this 0
@THIS
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.dispose 0
(String.dispose)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE3
D;JGT
@y_NEGATIVE3
D;JLT
@NORMAL_CASE3
0;JMP
(y_POSITIVE3)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE3
D;JLT
@NORMAL_CASE3
0;JMP
(NEGATIVE_POSITIVE3)
@SP
M=M-1
A=M-1
M=0
@CONTINUE3
0;JMP
(y_NEGATIVE3)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE3
D;JGT
@NORMAL_CASE3
0;JMP
(POSITIVE_NEGATIVE3)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE3
0;JMP
(NORMAL_CASE3)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE3
D;JGT
@SP
A=M-1
M=0
@CONTINUE3
0;JMP
(TRUE3)
@SP
A=M-1
M=-1
(CONTINUE3)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.dispose$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@String.dispose$IF_FALSE0
0;JMP
// write label IF_TRUE0
(String.dispose$IF_TRUE0)
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Array.dispose 1
@String.dispose$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(String.dispose$ret.4)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(String.dispose$IF_FALSE0)
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Memory.deAlloc 1
@String.dispose$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0;JMP
(String.dispose$ret.5)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.length 0
(String.length)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.charAt 0
(String.charAt)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE4
D;JGT
@y_NEGATIVE4
D;JLT
@NORMAL_CASE4
0;JMP
(y_POSITIVE4)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE4
D;JLT
@NORMAL_CASE4
0;JMP
(NEGATIVE_POSITIVE4)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE4
0;JMP
(y_NEGATIVE4)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE4
D;JGT
@NORMAL_CASE4
0;JMP
(POSITIVE_NEGATIVE4)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE4
0;JMP
(NORMAL_CASE4)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE4
D;JLT
@SP
A=M-1
M=0
@CONTINUE4
0;JMP
(TRUE4)
@SP
A=M-1
M=-1
(CONTINUE4)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE5
D;JGT
@y_NEGATIVE5
D;JLT
@NORMAL_CASE5
0;JMP
(y_POSITIVE5)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE5
D;JLT
@NORMAL_CASE5
0;JMP
(NEGATIVE_POSITIVE5)
@SP
M=M-1
A=M-1
M=0
@CONTINUE5
0;JMP
(y_NEGATIVE5)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE5
D;JGT
@NORMAL_CASE5
0;JMP
(POSITIVE_NEGATIVE5)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE5
0;JMP
(NORMAL_CASE5)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE5
D;JGT
@SP
A=M-1
M=0
@CONTINUE5
0;JMP
(TRUE5)
@SP
A=M-1
M=-1
(CONTINUE5)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE7)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE7
D;JEQ
@SP
A=M-1
M=0
@CONTINUE7
0;JMP
(TRUE7)
@SP
A=M-1
M=-1
(CONTINUE7)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.charAt$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@String.charAt$IF_FALSE0
0;JMP
// write label IF_TRUE0
(String.charAt$IF_TRUE0)
//push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@String.charAt$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.charAt$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(String.charAt$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.setCharAt 0
(String.setCharAt)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE10
D;JGT
@y_NEGATIVE10
D;JLT
@NORMAL_CASE10
0;JMP
(y_POSITIVE10)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE10
D;JLT
@NORMAL_CASE10
0;JMP
(NEGATIVE_POSITIVE10)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE10
0;JMP
(y_NEGATIVE10)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE10
D;JGT
@NORMAL_CASE10
0;JMP
(POSITIVE_NEGATIVE10)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE10
0;JMP
(NORMAL_CASE10)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE10
D;JLT
@SP
A=M-1
M=0
@CONTINUE10
0;JMP
(TRUE10)
@SP
A=M-1
M=-1
(CONTINUE10)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE11
D;JGT
@y_NEGATIVE11
D;JLT
@NORMAL_CASE11
0;JMP
(y_POSITIVE11)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE11
D;JLT
@NORMAL_CASE11
0;JMP
(NEGATIVE_POSITIVE11)
@SP
M=M-1
A=M-1
M=0
@CONTINUE11
0;JMP
(y_NEGATIVE11)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE11
D;JGT
@NORMAL_CASE11
0;JMP
(POSITIVE_NEGATIVE11)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE11
0;JMP
(NORMAL_CASE11)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE11
D;JGT
@SP
A=M-1
M=0
@CONTINUE11
0;JMP
(TRUE11)
@SP
A=M-1
M=-1
(CONTINUE11)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE13)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE13
D;JEQ
@SP
A=M-1
M=0
@CONTINUE13
0;JMP
(TRUE13)
@SP
A=M-1
M=-1
(CONTINUE13)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.setCharAt$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@String.setCharAt$IF_FALSE0
0;JMP
// write label IF_TRUE0
(String.setCharAt$IF_TRUE0)
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@String.setCharAt$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setCharAt$ret.7)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(String.setCharAt$IF_FALSE0)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 2
@ARG
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.appendChar 0
(String.appendChar)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE16)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE16
D;JEQ
@SP
A=M-1
M=0
@CONTINUE16
0;JMP
(TRUE16)
@SP
A=M-1
M=-1
(CONTINUE16)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.appendChar$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@String.appendChar$IF_FALSE0
0;JMP
// write label IF_TRUE0
(String.appendChar$IF_TRUE0)
//push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@String.appendChar$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.appendChar$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(String.appendChar$IF_FALSE0)
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push pointer 0
@3
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.eraseLastChar 0
(String.eraseLastChar)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE19)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE19
D;JEQ
@SP
A=M-1
M=0
@CONTINUE19
0;JMP
(TRUE19)
@SP
A=M-1
M=-1
(CONTINUE19)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.eraseLastChar$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@String.eraseLastChar$IF_FALSE0
0;JMP
// write label IF_TRUE0
(String.eraseLastChar$IF_TRUE0)
//push constant 18
@18
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@String.eraseLastChar$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.eraseLastChar$ret.9)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(String.eraseLastChar$IF_FALSE0)
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.intValue 5
(String.intValue)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE21)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE21
D;JEQ
@SP
A=M-1
M=0
@CONTINUE21
0;JMP
(TRUE21)
@SP
A=M-1
M=-1
(CONTINUE21)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@String.intValue$IF_FALSE0
0;JMP
// write label IF_TRUE0
(String.intValue$IF_TRUE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write label IF_FALSE0
(String.intValue$IF_FALSE0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 45
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE24)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE24
D;JEQ
@SP
A=M-1
M=0
@CONTINUE24
0;JMP
(TRUE24)
@SP
A=M-1
M=-1
(CONTINUE24)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@String.intValue$IF_FALSE1
0;JMP
// write label IF_TRUE1
(String.intValue$IF_TRUE1)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop local 4
@LCL
D=M
@4
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(String.intValue$IF_FALSE1)
// write label WHILE_EXP0
(String.intValue$WHILE_EXP0)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE26
D;JGT
@y_NEGATIVE26
D;JLT
@NORMAL_CASE26
0;JMP
(y_POSITIVE26)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE26
D;JLT
@NORMAL_CASE26
0;JMP
(NEGATIVE_POSITIVE26)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE26
0;JMP
(y_NEGATIVE26)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE26
D;JGT
@NORMAL_CASE26
0;JMP
(POSITIVE_NEGATIVE26)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE26
0;JMP
(NORMAL_CASE26)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE26
D;JLT
@SP
A=M-1
M=0
@CONTINUE26
0;JMP
(TRUE26)
@SP
A=M-1
M=-1
(CONTINUE26)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//and
@SP
AM=M-1
D=M
A=A-1
M=D&M

//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@String.intValue$WHILE_END0

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE31
D;JGT
@y_NEGATIVE31
D;JLT
@NORMAL_CASE31
0;JMP
(y_POSITIVE31)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE31
D;JLT
@NORMAL_CASE31
0;JMP
(NEGATIVE_POSITIVE31)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE31
0;JMP
(y_NEGATIVE31)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE31
D;JGT
@NORMAL_CASE31
0;JMP
(POSITIVE_NEGATIVE31)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE31
0;JMP
(NORMAL_CASE31)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE31
D;JLT
@SP
A=M-1
M=0
@CONTINUE31
0;JMP
(TRUE31)
@SP
A=M-1
M=-1
(CONTINUE31)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 9
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE32
D;JGT
@y_NEGATIVE32
D;JLT
@NORMAL_CASE32
0;JMP
(y_POSITIVE32)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE32
D;JLT
@NORMAL_CASE32
0;JMP
(NEGATIVE_POSITIVE32)
@SP
M=M-1
A=M-1
M=0
@CONTINUE32
0;JMP
(y_NEGATIVE32)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE32
D;JGT
@NORMAL_CASE32
0;JMP
(POSITIVE_NEGATIVE32)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE32
0;JMP
(NORMAL_CASE32)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE32
D;JGT
@SP
A=M-1
M=0
@CONTINUE32
0;JMP
(TRUE32)
@SP
A=M-1
M=-1
(CONTINUE32)
//or
@SP
AM=M-1
D=M
A=A-1
M=D|M

//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@String.intValue$IF_FALSE2
0;JMP
// write label IF_TRUE2
(String.intValue$IF_TRUE2)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@String.intValue$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(String.intValue$ret.10)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(String.intValue$IF_FALSE2)
// write goto WHILE_EXP0
@String.intValue$WHILE_EXP0
0;JMP
// write label WHILE_END0
(String.intValue$WHILE_END0)
//push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@String.intValue$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@String.intValue$IF_FALSE3
0;JMP
// write label IF_TRUE3
(String.intValue$IF_TRUE3)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE3
(String.intValue$IF_FALSE3)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.setInt 4
(String.setInt)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop pointer 0
@3
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE38)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE38
D;JEQ
@SP
A=M-1
M=0
@CONTINUE38
0;JMP
(TRUE38)
@SP
A=M-1
M=-1
(CONTINUE38)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@String.setInt$IF_FALSE0
0;JMP
// write label IF_TRUE0
(String.setInt$IF_TRUE0)
//push constant 19
@19
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@String.setInt$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setInt$ret.11)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(String.setInt$IF_FALSE0)
//push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Array.new 1
@String.setInt$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0;JMP
(String.setInt$ret.12)
//pop local 2
@LCL
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE39
D;JGT
@y_NEGATIVE39
D;JLT
@NORMAL_CASE39
0;JMP
(y_POSITIVE39)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE39
D;JLT
@NORMAL_CASE39
0;JMP
(NEGATIVE_POSITIVE39)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE39
0;JMP
(y_NEGATIVE39)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE39
D;JGT
@NORMAL_CASE39
0;JMP
(POSITIVE_NEGATIVE39)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE39
0;JMP
(NORMAL_CASE39)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE39
D;JLT
@SP
A=M-1
M=0
@CONTINUE39
0;JMP
(TRUE39)
@SP
A=M-1
M=-1
(CONTINUE39)
// write if-goto IF_TRUE1
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE1

D;JNE
// write goto IF_FALSE1
@String.setInt$IF_FALSE1
0;JMP
// write label IF_TRUE1
(String.setInt$IF_TRUE1)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//pop local 3
@LCL
D=M
@3
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
A=M-1
M=-M
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE1
(String.setInt$IF_FALSE1)
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP0
(String.setInt$WHILE_EXP0)
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE42
D;JGT
@y_NEGATIVE42
D;JLT
@NORMAL_CASE42
0;JMP
(y_POSITIVE42)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE42
D;JLT
@NORMAL_CASE42
0;JMP
(NEGATIVE_POSITIVE42)
@SP
M=M-1
A=M-1
M=0
@CONTINUE42
0;JMP
(y_NEGATIVE42)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE42
D;JGT
@NORMAL_CASE42
0;JMP
(POSITIVE_NEGATIVE42)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE42
0;JMP
(NORMAL_CASE42)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE42
D;JGT
@SP
A=M-1
M=0
@CONTINUE42
0;JMP
(TRUE42)
@SP
A=M-1
M=-1
(CONTINUE42)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@String.setInt$WHILE_END0

D;JNE
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.divide 2
@String.setInt$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0;JMP
(String.setInt$ret.13)
//pop local 1
@LCL
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Math.multiply 2
@String.setInt$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0;JMP
(String.setInt$ret.14)
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop argument 1
@ARG
D=M
@1
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@String.setInt$WHILE_EXP0
0;JMP
// write label WHILE_END0
(String.setInt$WHILE_END0)
//push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// write if-goto IF_TRUE2
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE2

D;JNE
// write goto IF_FALSE2
@String.setInt$IF_FALSE2
0;JMP
// write label IF_TRUE2
(String.setInt$IF_TRUE2)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 45
@45
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE2
(String.setInt$IF_FALSE2)
//push this 0
@THIS
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE50
D;JGT
@y_NEGATIVE50
D;JLT
@NORMAL_CASE50
0;JMP
(y_POSITIVE50)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE50
D;JLT
@NORMAL_CASE50
0;JMP
(NEGATIVE_POSITIVE50)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE50
0;JMP
(y_NEGATIVE50)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE50
D;JGT
@NORMAL_CASE50
0;JMP
(POSITIVE_NEGATIVE50)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE50
0;JMP
(NORMAL_CASE50)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE50
D;JLT
@SP
A=M-1
M=0
@CONTINUE50
0;JMP
(TRUE50)
@SP
A=M-1
M=-1
(CONTINUE50)
// write if-goto IF_TRUE3
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE3

D;JNE
// write goto IF_FALSE3
@String.setInt$IF_FALSE3
0;JMP
// write label IF_TRUE3
(String.setInt$IF_TRUE3)
//push constant 19
@19
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@String.setInt$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(String.setInt$ret.15)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE3
(String.setInt$IF_FALSE3)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
(NORMAL_CASE51)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE51
D;JEQ
@SP
A=M-1
M=0
@CONTINUE51
0;JMP
(TRUE51)
@SP
A=M-1
M=-1
(CONTINUE51)
// write if-goto IF_TRUE4
@SP
AM=M-1
D=M
@String.setInt$IF_TRUE4

D;JNE
// write goto IF_FALSE4
@String.setInt$IF_FALSE4
0;JMP
// write label IF_TRUE4
(String.setInt$IF_TRUE4)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push constant 48
@48
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto IF_END4
@String.setInt$IF_END4
0;JMP
// write label IF_FALSE4
(String.setInt$IF_FALSE4)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP1
(String.setInt$WHILE_EXP1)
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE53
D;JGT
@y_NEGATIVE53
D;JLT
@NORMAL_CASE53
0;JMP
(y_POSITIVE53)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE53
D;JLT
@NORMAL_CASE53
0;JMP
(NEGATIVE_POSITIVE53)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE53
0;JMP
(y_NEGATIVE53)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE53
D;JGT
@NORMAL_CASE53
0;JMP
(POSITIVE_NEGATIVE53)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE53
0;JMP
(NORMAL_CASE53)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE53
D;JLT
@SP
A=M-1
M=0
@CONTINUE53
0;JMP
(TRUE53)
@SP
A=M-1
M=-1
(CONTINUE53)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END1
@SP
AM=M-1
D=M
@String.setInt$WHILE_END1

D;JNE
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 1
@THIS
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//pop pointer 1
@4
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
//pop that 0
@THAT
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push this 2
@THIS
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//pop this 2
@THIS
D=M
@2
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP1
@String.setInt$WHILE_EXP1
0;JMP
// write label WHILE_END1
(String.setInt$WHILE_END1)
// write label IF_END4
(String.setInt$IF_END4)
//push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Array.dispose 1
@String.setInt$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0;JMP
(String.setInt$ret.16)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.newLine 0
(String.newLine)
//push constant 128
@128
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.backSpace 0
(String.backSpace)
//push constant 129
@129
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function String.doubleQuote 0
(String.doubleQuote)
//push constant 34
@34
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Sys.init 0
(Sys.init)
// call function Memory.init 0
@Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0;JMP
(Sys.init$ret.1)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Math.init 0
@Sys.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0;JMP
(Sys.init$ret.2)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Screen.init 0
@Sys.init$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.init
0;JMP
(Sys.init$ret.3)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Output.init 0
@Sys.init$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.init
0;JMP
(Sys.init$ret.4)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Keyboard.init 0
@Sys.init$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.init
0;JMP
(Sys.init$ret.5)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Main.main 0
@Sys.init$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0;JMP
(Sys.init$ret.6)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Sys.halt 0
@Sys.init$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.init$ret.7)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Sys.halt 0
(Sys.halt)
// write label WHILE_EXP0
(Sys.halt$WHILE_EXP0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.halt$WHILE_END0

D;JNE
// write goto WHILE_EXP0
@Sys.halt$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Sys.halt$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Sys.wait 1
(Sys.wait)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
A=M-1
D=M

@y_POSITIVE3
D;JGT
@y_NEGATIVE3
D;JLT
@NORMAL_CASE3
0;JMP
(y_POSITIVE3)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE3
D;JLT
@NORMAL_CASE3
0;JMP
(NEGATIVE_POSITIVE3)
@SP
M=M-1
A=M-1
M=-1
@CONTINUE3
0;JMP
(y_NEGATIVE3)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE3
D;JGT
@NORMAL_CASE3
0;JMP
(POSITIVE_NEGATIVE3)
@SP
M=M-1
@SP
A=M-1
M=0
@CONTINUE3
0;JMP
(NORMAL_CASE3)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE3
D;JLT
@SP
A=M-1
M=0
@CONTINUE3
0;JMP
(TRUE3)
@SP
A=M-1
M=-1
(CONTINUE3)
// write if-goto IF_TRUE0
@SP
AM=M-1
D=M
@Sys.wait$IF_TRUE0

D;JNE
// write goto IF_FALSE0
@Sys.wait$IF_FALSE0
0;JMP
// write label IF_TRUE0
(Sys.wait$IF_TRUE0)
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function Sys.error 1
@Sys.wait$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0;JMP
(Sys.wait$ret.8)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label IF_FALSE0
(Sys.wait$IF_FALSE0)
// write label WHILE_EXP0
(Sys.wait$WHILE_EXP0)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE4
D;JGT
@y_NEGATIVE4
D;JLT
@NORMAL_CASE4
0;JMP
(y_POSITIVE4)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE4
D;JLT
@NORMAL_CASE4
0;JMP
(NEGATIVE_POSITIVE4)
@SP
M=M-1
A=M-1
M=0
@CONTINUE4
0;JMP
(y_NEGATIVE4)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE4
D;JGT
@NORMAL_CASE4
0;JMP
(POSITIVE_NEGATIVE4)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE4
0;JMP
(NORMAL_CASE4)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE4
D;JGT
@SP
A=M-1
M=0
@CONTINUE4
0;JMP
(TRUE4)
@SP
A=M-1
M=-1
(CONTINUE4)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END0
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END0

D;JNE
//push constant 50
@50
D=A
@SP
A=M
M=D
@SP
M=M+1
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write label WHILE_EXP1
(Sys.wait$WHILE_EXP1)
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
A=M-1
D=M

@y_POSITIVE6
D;JGT
@y_NEGATIVE6
D;JLT
@NORMAL_CASE6
0;JMP
(y_POSITIVE6)
@SP
A=M-1
A=A-1
D=M
@NEGATIVE_POSITIVE6
D;JLT
@NORMAL_CASE6
0;JMP
(NEGATIVE_POSITIVE6)
@SP
M=M-1
A=M-1
M=0
@CONTINUE6
0;JMP
(y_NEGATIVE6)
@SP
A=M-1
A=A-1
D=M
@POSITIVE_NEGATIVE6
D;JGT
@NORMAL_CASE6
0;JMP
(POSITIVE_NEGATIVE6)
@SP
M=M-1
@SP
A=M-1
M=-1
@CONTINUE6
0;JMP
(NORMAL_CASE6)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE6
D;JGT
@SP
A=M-1
M=0
@CONTINUE6
0;JMP
(TRUE6)
@SP
A=M-1
M=-1
(CONTINUE6)
//not
@SP
AM=M-1
D=M
D=-D
D=D-1
@SP
A=M
M=D
@SP
M=M+1
// write if-goto WHILE_END1
@SP
AM=M-1
D=M
@Sys.wait$WHILE_END1

D;JNE
//push local 0
@LCL
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop local 0
@LCL
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP1
@Sys.wait$WHILE_EXP1
0;JMP
// write label WHILE_END1
(Sys.wait$WHILE_END1)
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//pop argument 0
@ARG
D=M
@0
A=D+A
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// write goto WHILE_EXP0
@Sys.wait$WHILE_EXP0
0;JMP
// write label WHILE_END0
(Sys.wait$WHILE_END0)
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
// write function Sys.error 0
(Sys.error)
//push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.new 1
@Sys.error$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0;JMP
(Sys.error$ret.9)
//push constant 69
@69
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@Sys.error$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error$ret.10)
//push constant 82
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@Sys.error$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error$ret.11)
//push constant 82
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// call function String.appendChar 2
@Sys.error$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@7
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0;JMP
(Sys.error$ret.12)
// call function Output.printString 1
@Sys.error$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0;JMP
(Sys.error$ret.13)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// call function Output.printInt 1
@Sys.error$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0;JMP
(Sys.error$ret.14)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call function Sys.halt 0
@Sys.error$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0;JMP
(Sys.error$ret.15)
//pop temp 0
@5
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
//push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// write return
@LCL
D=M
@frame
M=D
@frame
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
D=D+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0;JMP
